
AntennaCtrl6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000970  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c53  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000170c  00000000  00000000  000058ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d75  00000000  00000000  0000700b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00009d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000225b  00000000  00000000  0000a48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000308a  00000000  00000000  0000c6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000f771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
   2:	00 00       	nop
   4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
   6:	00 00       	nop
   8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
   a:	00 00       	nop
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
   e:	00 00       	nop
  10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
  12:	00 00       	nop
  14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
  16:	00 00       	nop
  18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
  1e:	00 00       	nop
  20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
  22:	00 00       	nop
  24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
  26:	00 00       	nop
  28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__vector_11>
  2e:	00 00       	nop
  30:	02 c3       	rjmp	.+1540   	; 0x636 <__vector_12>
  32:	00 00       	nop
  34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
  36:	00 00       	nop
  38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
  3e:	00 00       	nop
  40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
  42:	00 00       	nop
  44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
  46:	00 00       	nop
  48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
  4e:	00 00       	nop
  50:	7e c0       	rjmp	.+252    	; 0x14e <__bad_interrupt>
  52:	00 00       	nop
  54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
  56:	00 00       	nop
  58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
  5e:	00 00       	nop
  60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
  62:	00 00       	nop
  64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
  66:	00 00       	nop
  68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
  6e:	00 00       	nop
  70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
  84:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
  94:	6c 00 65 00 72 00 00 00                             l.e.r...

0000009c <ManufacturerString>:
  9c:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
  ac:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
  bc:	6c 00 65 00 72 00 00 00                             l.e.r...

000000c4 <LanguageString>:
  c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
  c8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  d8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  e8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  f8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000106 <DeviceDescriptor>:
 106:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 116:	dc 01                                               ..

00000118 <__ctors_end>:
 118:	11 24       	eor	r1, r1
 11a:	1f be       	out	0x3f, r1	; 63
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d4 e0       	ldi	r29, 0x04	; 4
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	e0 e7       	ldi	r30, 0x70	; 112
 12c:	f9 e0       	ldi	r31, 0x09	; 9
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	a0 30       	cpi	r26, 0x00	; 0
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	ad 30       	cpi	r26, 0x0D	; 13
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	42 d0       	rcall	.+132    	; 0x1d0 <main>
 14c:	0f c4       	rjmp	.+2078   	; 0x96c <_exit>

0000014e <__bad_interrupt>:
 14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <SPI_MasterInit>:
	//SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	return;
}

void SPI_MasterInit(void) {
	DDRB = 0b01001111;
 150:	8f e4       	ldi	r24, 0x4F	; 79
 152:	84 b9       	out	0x04, r24	; 4
	SPCR = 0b01010011;
 154:	83 e5       	ldi	r24, 0x53	; 83
 156:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 0b00000001;
 158:	28 9a       	sbi	0x05, 0	; 5
 15a:	08 95       	ret

0000015c <setupHardware>:
void setupHardware(void) {

	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Setting up hardware");

	/* Disable watchdog */
	MCUSR &= ~(1 << WDRF);
 15c:	84 b7       	in	r24, 0x34	; 52
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	a8 95       	wdr
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 16c:	88 61       	ori	r24, 0x18	; 24
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 172:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 176:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 184:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 188:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	/* Disable prescaler */
	clock_prescale_set(clock_div_1);
	
	/* Hardware Initialization */
	USB_Init();
 18a:	9d d1       	rcall	.+826    	; 0x4c6 <USB_Init>
	
	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	//TCCR0B = (1 << CS02);
	
	
	DDRD = 0b01111111;
 18c:	8f e7       	ldi	r24, 0x7F	; 127
 18e:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11110000;
 190:	80 ef       	ldi	r24, 0xF0	; 240
	SPI_MasterInit();
 192:	87 b9       	out	0x07, r24	; 7
 194:	dd cf       	rjmp	.-70     	; 0x150 <SPI_MasterInit>

00000196 <SPI_MasterTransmit>:
	SPCR = 0b01010011;
	PORTB |= 0b00000001;
}

void SPI_MasterTransmit(char cData) {
	SPDR = cData;
 196:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
 198:	0d b4       	in	r0, 0x2d	; 45
 19a:	07 fe       	sbrs	r0, 7
 19c:	fd cf       	rjmp	.-6      	; 0x198 <SPI_MasterTransmit+0x2>
	;
}
 19e:	08 95       	ret

000001a0 <pot_set>:
		dig_pot = 0;
	}
	return (255 - dig_pot);
	
}
int pot_set (uint16_t val) {
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	uint16_t hi_mask = 0b1111111100000000;
	uint16_t lo_mask = ~hi_mask;
	uint16_t cmd = (((uint16_t)cmd_error_mask) << 8) | (val & data_mask);
	uint8_t cmd_hi = (uint8_t)((hi_mask & cmd) >> 8);
	uint8_t cmd_lo = (uint8_t)(lo_mask & cmd);
	PORTB &= 0b11111110;
 1a6:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <pot_set+0xc>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <pot_set+0x12>
 1b2:	00 00       	nop
	_delay_ms(1);
	SPI_MasterTransmit(cmd_hi);
 1b4:	ce 01       	movw	r24, r28
 1b6:	88 27       	eor	r24, r24
 1b8:	91 70       	andi	r25, 0x01	; 1
 1ba:	92 60       	ori	r25, 0x02	; 2
 1bc:	89 2f       	mov	r24, r25
 1be:	eb df       	rcall	.-42     	; 0x196 <SPI_MasterTransmit>
	SPI_MasterTransmit(cmd_lo);
 1c0:	8c 2f       	mov	r24, r28
 1c2:	e9 df       	rcall	.-46     	; 0x196 <SPI_MasterTransmit>
	PORTB |= 0b00000001;
 1c4:	28 9a       	sbi	0x05, 0	; 5
	return 0;
}
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:


int main(void)
{

	setupHardware();
 1d0:	c5 df       	rcall	.-118    	; 0x15c <setupHardware>
		*	uint16_t pot_val = pot_value_calc((float)i);
		*	pot_set(pot_val);
		*	_delay_ms(5000);
		*}
		*/
		pot_set(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	e4 df       	rcall	.-56     	; 0x1a0 <pot_set>
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <main+0x2>

000001da <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 1da:	29 2f       	mov	r18, r25
 1dc:	33 27       	eor	r19, r19
 1de:	22 30       	cpi	r18, 0x02	; 2
 1e0:	31 05       	cpc	r19, r1
 1e2:	59 f0       	breq	.+22     	; 0x1fa <CALLBACK_USB_GetDescriptor+0x20>
 1e4:	23 30       	cpi	r18, 0x03	; 3
 1e6:	31 05       	cpc	r19, r1
 1e8:	69 f0       	breq	.+26     	; 0x204 <CALLBACK_USB_GetDescriptor+0x2a>
 1ea:	21 30       	cpi	r18, 0x01	; 1
 1ec:	31 05       	cpc	r19, r1
 1ee:	e9 f4       	brne	.+58     	; 0x22a <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 1f0:	82 e1       	ldi	r24, 0x12	; 18
 1f2:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 1f4:	26 e0       	ldi	r18, 0x06	; 6
 1f6:	31 e0       	ldi	r19, 0x01	; 1
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 1fa:	8e e3       	ldi	r24, 0x3E	; 62
 1fc:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 1fe:	28 ec       	ldi	r18, 0xC8	; 200
 200:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 202:	17 c0       	rjmp	.+46     	; 0x232 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 204:	99 27       	eor	r25, r25
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	91 05       	cpc	r25, r1
 20a:	49 f0       	breq	.+18     	; 0x21e <CALLBACK_USB_GetDescriptor+0x44>
 20c:	28 f0       	brcs	.+10     	; 0x218 <CALLBACK_USB_GetDescriptor+0x3e>
 20e:	02 97       	sbiw	r24, 0x02	; 2
 210:	61 f4       	brne	.+24     	; 0x22a <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 212:	e4 e7       	ldi	r30, 0x74	; 116
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	05 c0       	rjmp	.+10     	; 0x222 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 218:	e4 ec       	ldi	r30, 0xC4	; 196
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 21e:	ec e9       	ldi	r30, 0x9C	; 156
 220:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 222:	84 91       	lpm	r24, Z
 224:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 226:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 228:	04 c0       	rjmp	.+8      	; 0x232 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 232:	fa 01       	movw	r30, r20
 234:	31 83       	std	Z+1, r19	; 0x01
 236:	20 83       	st	Z, r18
	return Size;
}
 238:	08 95       	ret

0000023a <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 23a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 23e:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 242:	26 17       	cp	r18, r22
 244:	37 07       	cpc	r19, r23
 246:	48 f0       	brcs	.+18     	; 0x25a <Endpoint_Write_Control_Stream_LE+0x20>
 248:	61 15       	cp	r22, r1
 24a:	71 05       	cpc	r23, r1
 24c:	39 f4       	brne	.+14     	; 0x25c <Endpoint_Write_Control_Stream_LE+0x22>
 24e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 252:	2e 77       	andi	r18, 0x7E	; 126
 254:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 258:	01 c0       	rjmp	.+2      	; 0x25c <Endpoint_Write_Control_Stream_LE+0x22>
 25a:	b9 01       	movw	r22, r18
 25c:	fc 01       	movw	r30, r24
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	61 15       	cp	r22, r1
 262:	71 05       	cpc	r23, r1
 264:	61 f1       	breq	.+88     	; 0x2be <Endpoint_Write_Control_Stream_LE+0x84>
 266:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 26a:	88 23       	and	r24, r24
 26c:	d9 f1       	breq	.+118    	; 0x2e4 <Endpoint_Write_Control_Stream_LE+0xaa>
 26e:	85 30       	cpi	r24, 0x05	; 5
 270:	d9 f1       	breq	.+118    	; 0x2e8 <Endpoint_Write_Control_Stream_LE+0xae>
 272:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 276:	83 fd       	sbrc	r24, 3
 278:	39 c0       	rjmp	.+114    	; 0x2ec <Endpoint_Write_Control_Stream_LE+0xb2>
 27a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 27e:	82 fd       	sbrc	r24, 2
 280:	2b c0       	rjmp	.+86     	; 0x2d8 <Endpoint_Write_Control_Stream_LE+0x9e>
 282:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 286:	80 ff       	sbrs	r24, 0
 288:	eb cf       	rjmp	.-42     	; 0x260 <Endpoint_Write_Control_Stream_LE+0x26>
 28a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	61 15       	cp	r22, r1
 292:	71 05       	cpc	r23, r1
 294:	51 f0       	breq	.+20     	; 0x2aa <Endpoint_Write_Control_Stream_LE+0x70>
 296:	88 30       	cpi	r24, 0x08	; 8
 298:	91 05       	cpc	r25, r1
 29a:	38 f4       	brcc	.+14     	; 0x2aa <Endpoint_Write_Control_Stream_LE+0x70>
 29c:	21 91       	ld	r18, Z+
 29e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 2a2:	61 50       	subi	r22, 0x01	; 1
 2a4:	71 09       	sbc	r23, r1
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	f3 cf       	rjmp	.-26     	; 0x290 <Endpoint_Write_Control_Stream_LE+0x56>
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	08 97       	sbiw	r24, 0x08	; 8
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <Endpoint_Write_Control_Stream_LE+0x78>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2b6:	8e 77       	andi	r24, 0x7E	; 126
 2b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2bc:	d1 cf       	rjmp	.-94     	; 0x260 <Endpoint_Write_Control_Stream_LE+0x26>
 2be:	21 11       	cpse	r18, r1
 2c0:	d2 cf       	rjmp	.-92     	; 0x266 <Endpoint_Write_Control_Stream_LE+0x2c>
 2c2:	0a c0       	rjmp	.+20     	; 0x2d8 <Endpoint_Write_Control_Stream_LE+0x9e>
 2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 2c8:	88 23       	and	r24, r24
 2ca:	61 f0       	breq	.+24     	; 0x2e4 <Endpoint_Write_Control_Stream_LE+0xaa>
 2cc:	85 30       	cpi	r24, 0x05	; 5
 2ce:	61 f0       	breq	.+24     	; 0x2e8 <Endpoint_Write_Control_Stream_LE+0xae>
 2d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2d4:	83 fd       	sbrc	r24, 3
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <Endpoint_Write_Control_Stream_LE+0xb2>
 2d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2dc:	82 ff       	sbrs	r24, 2
 2de:	f2 cf       	rjmp	.-28     	; 0x2c4 <Endpoint_Write_Control_Stream_LE+0x8a>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	08 95       	ret
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	08 95       	ret
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret

000002f0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 2f0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 2f4:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 2f8:	26 17       	cp	r18, r22
 2fa:	37 07       	cpc	r19, r23
 2fc:	48 f0       	brcs	.+18     	; 0x310 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 2fe:	61 15       	cp	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	39 f4       	brne	.+14     	; 0x312 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 304:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 308:	2e 77       	andi	r18, 0x7E	; 126
 30a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 30e:	01 c0       	rjmp	.+2      	; 0x312 <Endpoint_Write_Control_PStream_LE+0x22>
 310:	b9 01       	movw	r22, r18
 312:	fc 01       	movw	r30, r24
 314:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 316:	61 15       	cp	r22, r1
 318:	71 05       	cpc	r23, r1
 31a:	79 f1       	breq	.+94     	; 0x37a <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 31c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 320:	88 23       	and	r24, r24
 322:	09 f4       	brne	.+2      	; 0x326 <Endpoint_Write_Control_PStream_LE+0x36>
 324:	3d c0       	rjmp	.+122    	; 0x3a0 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 326:	85 30       	cpi	r24, 0x05	; 5
 328:	09 f4       	brne	.+2      	; 0x32c <Endpoint_Write_Control_PStream_LE+0x3c>
 32a:	3c c0       	rjmp	.+120    	; 0x3a4 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 32c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 330:	83 fd       	sbrc	r24, 3
 332:	3a c0       	rjmp	.+116    	; 0x3a8 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 338:	82 fd       	sbrc	r24, 2
 33a:	2c c0       	rjmp	.+88     	; 0x394 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 33c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
 340:	80 ff       	sbrs	r24, 0
 342:	e9 cf       	rjmp	.-46     	; 0x316 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 344:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 348:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 34a:	61 15       	cp	r22, r1
 34c:	71 05       	cpc	r23, r1
 34e:	59 f0       	breq	.+22     	; 0x366 <Endpoint_Write_Control_PStream_LE+0x76>
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	91 05       	cpc	r25, r1
 354:	40 f4       	brcc	.+16     	; 0x366 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 356:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 358:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 35c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 35e:	61 50       	subi	r22, 0x01	; 1
 360:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	f2 cf       	rjmp	.-28     	; 0x34a <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	08 97       	sbiw	r24, 0x08	; 8
 36a:	09 f0       	breq	.+2      	; 0x36e <Endpoint_Write_Control_PStream_LE+0x7e>
 36c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 36e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 372:	8e 77       	andi	r24, 0x7E	; 126
 374:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 378:	ce cf       	rjmp	.-100    	; 0x316 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 37a:	21 11       	cpse	r18, r1
 37c:	cf cf       	rjmp	.-98     	; 0x31c <Endpoint_Write_Control_PStream_LE+0x2c>
 37e:	0a c0       	rjmp	.+20     	; 0x394 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 380:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 384:	88 23       	and	r24, r24
 386:	61 f0       	breq	.+24     	; 0x3a0 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 388:	85 30       	cpi	r24, 0x05	; 5
 38a:	61 f0       	breq	.+24     	; 0x3a4 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 38c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 390:	83 fd       	sbrc	r24, 3
 392:	0a c0       	rjmp	.+20     	; 0x3a8 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 394:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 398:	82 ff       	sbrs	r24, 2
 39a:	f2 cf       	rjmp	.-28     	; 0x380 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 3aa:	08 95       	ret

000003ac <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 3ac:	98 2f       	mov	r25, r24
 3ae:	95 30       	cpi	r25, 0x05	; 5
 3b0:	68 f5       	brcc	.+90     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3b2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 3b6:	98 17       	cp	r25, r24
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 3ba:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 3be:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 3c2:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <Endpoint_ConfigureEndpoint_Prv+0x22>
 3c8:	24 2f       	mov	r18, r20
 3ca:	76 2f       	mov	r23, r22
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	21 fd       	sbrc	r18, 1
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 3d2:	9f 5f       	subi	r25, 0xFF	; 255
 3d4:	ec cf       	rjmp	.-40     	; 0x3ae <Endpoint_ConfigureEndpoint_Prv+0x2>
 3d6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 3da:	3e 7f       	andi	r19, 0xFE	; 254
 3dc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 3e0:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 3e4:	3d 7f       	andi	r19, 0xFD	; 253
 3e6:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 3ea:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 3ee:	31 60       	ori	r19, 0x01	; 1
 3f0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 3f4:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 3f8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 3fc:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 400:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 404:	27 fd       	sbrc	r18, 7
 406:	e5 cf       	rjmp	.-54     	; 0x3d2 <Endpoint_ConfigureEndpoint_Prv+0x26>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
 40c:	8f 70       	andi	r24, 0x0F	; 15
 40e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret

00000416 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 416:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>
 41a:	87 ff       	sbrs	r24, 7
 41c:	11 c0       	rjmp	.+34     	; 0x440 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 41e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 422:	82 fd       	sbrc	r24, 2
 424:	05 c0       	rjmp	.+10     	; 0x430 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 426:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 42a:	81 11       	cpse	r24, r1
 42c:	f8 cf       	rjmp	.-16     	; 0x41e <Endpoint_ClearStatusStage+0x8>
 42e:	11 c0       	rjmp	.+34     	; 0x452 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 430:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 434:	8b 77       	andi	r24, 0x7B	; 123
 436:	0b c0       	rjmp	.+22     	; 0x44e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 438:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 43c:	88 23       	and	r24, r24
 43e:	49 f0       	breq	.+18     	; 0x452 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 440:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 444:	80 ff       	sbrs	r24, 0
 446:	f8 cf       	rjmp	.-16     	; 0x438 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 448:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 44c:	8e 77       	andi	r24, 0x7E	; 126
 44e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 452:	08 95       	ret

00000454 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 454:	41 d0       	rcall	.+130    	; 0x4d8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 456:	43 d0       	rcall	.+134    	; 0x4de <USB_INT_ClearAllInterrupts>
 458:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 45c:	8f 77       	andi	r24, 0x7F	; 127
 45e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 462:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 466:	80 68       	ori	r24, 0x80	; 128
 468:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 46c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 470:	8f 7d       	andi	r24, 0xDF	; 223
 472:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 476:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 478:	89 bd       	out	0x29, r24	; 41
 47a:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 47c:	89 bd       	out	0x29, r24	; 41
 47e:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 480:	00 fe       	sbrs	r0, 0
 482:	fd cf       	rjmp	.-6      	; 0x47e <USB_ResetInterface+0x2a>
 484:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 488:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	USB_Device_ConfigurationNumber  = 0;
 48c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 490:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 494:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	88 df       	rcall	.-240    	; 0x3ac <Endpoint_ConfigureEndpoint_Prv>
 49c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 4a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 4b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 4b4:	88 60       	ori	r24, 0x08	; 8
 4b6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 4ba:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4be:	8e 7f       	andi	r24, 0xFE	; 254
 4c0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 4c4:	08 95       	ret

000004c6 <USB_Init>:
 4c6:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	8e 7f       	andi	r24, 0xFE	; 254
 4ce:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <USB_IsInitialized>

	USB_ResetInterface();
 4d6:	be cf       	rjmp	.-132    	; 0x454 <USB_ResetInterface>

000004d8 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4d8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 4dc:	08 95       	ret

000004de <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 4de:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 4e2:	08 95       	ret

000004e4 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 506:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 50a:	82 ff       	sbrs	r24, 2
 50c:	0a c0       	rjmp	.+20     	; 0x522 <__stack+0x23>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 50e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 512:	82 ff       	sbrs	r24, 2
 514:	06 c0       	rjmp	.+12     	; 0x522 <__stack+0x23>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 516:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 51a:	8b 7f       	andi	r24, 0xFB	; 251
 51c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 520:	24 d2       	rcall	.+1096   	; 0x96a <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 522:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 526:	80 ff       	sbrs	r24, 0
 528:	17 c0       	rjmp	.+46     	; 0x558 <__stack+0x59>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 52a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 52e:	80 ff       	sbrs	r24, 0
 530:	13 c0       	rjmp	.+38     	; 0x558 <__stack+0x59>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 532:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 536:	8e 7f       	andi	r24, 0xFE	; 254
 538:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 53c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 540:	80 61       	ori	r24, 0x10	; 16
 542:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 546:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 54a:	80 62       	ori	r24, 0x20	; 32
 54c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 550:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 552:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 556:	09 d2       	rcall	.+1042   	; 0x96a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 558:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 55c:	84 ff       	sbrs	r24, 4
 55e:	2f c0       	rjmp	.+94     	; 0x5be <__stack+0xbf>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 560:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 564:	84 ff       	sbrs	r24, 4
 566:	2b c0       	rjmp	.+86     	; 0x5be <__stack+0xbf>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 570:	09 b4       	in	r0, 0x29	; 41
 572:	00 fe       	sbrs	r0, 0
 574:	fd cf       	rjmp	.-6      	; 0x570 <__stack+0x71>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 576:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 57a:	8f 7d       	andi	r24, 0xDF	; 223
 57c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 580:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 584:	8f 7e       	andi	r24, 0xEF	; 239
 586:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 58a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 58e:	8f 7e       	andi	r24, 0xEF	; 239
 590:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 594:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 59e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 5a2:	88 23       	and	r24, r24
 5a4:	11 f0       	breq	.+4      	; 0x5aa <__stack+0xab>
		  USB_DeviceState = DEVICE_STATE_Configured;
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__stack+0xb9>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 5aa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 5ae:	87 fd       	sbrc	r24, 7
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__stack+0xb7>
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <__stack+0xb9>
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 5bc:	d6 d1       	rcall	.+940    	; 0x96a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 5be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5c2:	83 ff       	sbrs	r24, 3
 5c4:	27 c0       	rjmp	.+78     	; 0x614 <__stack+0x115>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 5c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5ca:	83 ff       	sbrs	r24, 3
 5cc:	23 c0       	rjmp	.+70     	; 0x614 <__stack+0x115>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 5ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5d2:	87 7f       	andi	r24, 0xF7	; 247
 5d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 5de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5e6:	8e 7f       	andi	r24, 0xFE	; 254
 5e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5fa:	80 61       	ori	r24, 0x10	; 16
 5fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 600:	42 e0       	ldi	r20, 0x02	; 2
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	d2 de       	rcall	.-604    	; 0x3ac <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 608:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 60c:	88 60       	ori	r24, 0x08	; 8
 60e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 612:	ab d1       	rcall	.+854    	; 0x96a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	0f 90       	pop	r0
 632:	1f 90       	pop	r1
 634:	18 95       	reti

00000636 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	ef 93       	push	r30
 65a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 65c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 660:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 662:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 666:	d8 2f       	mov	r29, r24
 668:	d1 70       	andi	r29, 0x01	; 1
 66a:	80 fd       	sbrc	r24, 0
 66c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 66e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 672:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 676:	87 7f       	andi	r24, 0xF7	; 247
 678:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 67c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 67e:	1e d0       	rcall	.+60     	; 0x6bc <USB_Device_ProcessControlRequest>
 680:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 684:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 688:	88 60       	ori	r24, 0x08	; 8
 68a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 68e:	cd 2b       	or	r28, r29
 690:	cf 70       	andi	r28, 0x0F	; 15
 692:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	bf 91       	pop	r27
 6a0:	af 91       	pop	r26
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	7f 91       	pop	r23
 6a8:	6f 91       	pop	r22
 6aa:	5f 91       	pop	r21
 6ac:	4f 91       	pop	r20
 6ae:	3f 91       	pop	r19
 6b0:	2f 91       	pop	r18
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	aa 97       	sbiw	r28, 0x2a	; 42
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	e5 e0       	ldi	r30, 0x05	; 5
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 6d6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 6da:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	ed 30       	cpi	r30, 0x0D	; 13
 6e0:	f2 07       	cpc	r31, r18
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 6e4:	42 d1       	rcall	.+644    	; 0x96a <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 6ea:	83 ff       	sbrs	r24, 3
 6ec:	26 c1       	rjmp	.+588    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 6ee:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 6f2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <USB_ControlRequest+0x1>
 6f6:	95 30       	cpi	r25, 0x05	; 5
 6f8:	09 f4       	brne	.+2      	; 0x6fc <USB_Device_ProcessControlRequest+0x40>
 6fa:	78 c0       	rjmp	.+240    	; 0x7ec <USB_Device_ProcessControlRequest+0x130>
 6fc:	30 f4       	brcc	.+12     	; 0x70a <USB_Device_ProcessControlRequest+0x4e>
 6fe:	91 30       	cpi	r25, 0x01	; 1
 700:	81 f1       	breq	.+96     	; 0x762 <USB_Device_ProcessControlRequest+0xa6>
 702:	68 f0       	brcs	.+26     	; 0x71e <USB_Device_ProcessControlRequest+0x62>
 704:	93 30       	cpi	r25, 0x03	; 3
 706:	69 f1       	breq	.+90     	; 0x762 <USB_Device_ProcessControlRequest+0xa6>
 708:	18 c1       	rjmp	.+560    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
 70a:	98 30       	cpi	r25, 0x08	; 8
 70c:	09 f4       	brne	.+2      	; 0x710 <USB_Device_ProcessControlRequest+0x54>
 70e:	e2 c0       	rjmp	.+452    	; 0x8d4 <USB_Device_ProcessControlRequest+0x218>
 710:	99 30       	cpi	r25, 0x09	; 9
 712:	09 f4       	brne	.+2      	; 0x716 <USB_Device_ProcessControlRequest+0x5a>
 714:	f1 c0       	rjmp	.+482    	; 0x8f8 <USB_Device_ProcessControlRequest+0x23c>
 716:	96 30       	cpi	r25, 0x06	; 6
 718:	09 f0       	breq	.+2      	; 0x71c <USB_Device_ProcessControlRequest+0x60>
 71a:	0f c1       	rjmp	.+542    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
 71c:	89 c0       	rjmp	.+274    	; 0x830 <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 71e:	80 38       	cpi	r24, 0x80	; 128
 720:	81 f0       	breq	.+32     	; 0x742 <USB_Device_ProcessControlRequest+0x86>
 722:	82 38       	cpi	r24, 0x82	; 130
 724:	09 f0       	breq	.+2      	; 0x728 <USB_Device_ProcessControlRequest+0x6c>
 726:	09 c1       	rjmp	.+530    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 728:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 72c:	8f 70       	andi	r24, 0x0F	; 15
 72e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 732:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 736:	85 fb       	bst	r24, 5
 738:	88 27       	eor	r24, r24
 73a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 73c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 740:	06 c0       	rjmp	.+12     	; 0x74e <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 742:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 746:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 74a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 74c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 74e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 752:	97 7f       	andi	r25, 0xF7	; 247
 754:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 758:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 75c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 760:	c4 c0       	rjmp	.+392    	; 0x8ea <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 762:	28 2f       	mov	r18, r24
 764:	2d 7f       	andi	r18, 0xFD	; 253
 766:	09 f0       	breq	.+2      	; 0x76a <USB_Device_ProcessControlRequest+0xae>
 768:	e8 c0       	rjmp	.+464    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 76a:	88 23       	and	r24, r24
 76c:	19 f0       	breq	.+6      	; 0x774 <USB_Device_ProcessControlRequest+0xb8>
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	61 f0       	breq	.+24     	; 0x78a <USB_Device_ProcessControlRequest+0xce>
 772:	e3 c0       	rjmp	.+454    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 774:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	09 f0       	breq	.+2      	; 0x77e <USB_Device_ProcessControlRequest+0xc2>
 77c:	de c0       	rjmp	.+444    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 77e:	93 30       	cpi	r25, 0x03	; 3
 780:	09 f0       	breq	.+2      	; 0x784 <USB_Device_ProcessControlRequest+0xc8>
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 788:	2b c0       	rjmp	.+86     	; 0x7e0 <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 78a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 78e:	81 11       	cpse	r24, r1
 790:	27 c0       	rjmp	.+78     	; 0x7e0 <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 792:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 796:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 798:	09 f4       	brne	.+2      	; 0x79c <USB_Device_ProcessControlRequest+0xe0>
 79a:	cf c0       	rjmp	.+414    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 79c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 7a0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 7a4:	20 ff       	sbrs	r18, 0
 7a6:	1c c0       	rjmp	.+56     	; 0x7e0 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 7a8:	93 30       	cpi	r25, 0x03	; 3
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 7ac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 7b0:	80 62       	ori	r24, 0x20	; 32
 7b2:	14 c0       	rjmp	.+40     	; 0x7dc <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 7b4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 7b8:	90 61       	ori	r25, 0x10	; 16
 7ba:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	a9 01       	movw	r20, r18
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <USB_Device_ProcessControlRequest+0x10e>
 7c6:	44 0f       	add	r20, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	8a 95       	dec	r24
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <USB_Device_ProcessControlRequest+0x10a>
 7ce:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 7d2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 7d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 7da:	88 60       	ori	r24, 0x08	; 8
 7dc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7e0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 7e8:	87 7f       	andi	r24, 0xF7	; 247
 7ea:	82 c0       	rjmp	.+260    	; 0x8f0 <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 7ec:	81 11       	cpse	r24, r1
 7ee:	a5 c0       	rjmp	.+330    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 7f0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 7f4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 7f6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 7fa:	80 78       	andi	r24, 0x80	; 128
 7fc:	81 2b       	or	r24, r17
 7fe:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 802:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 806:	87 7f       	andi	r24, 0xF7	; 247
 808:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 80c:	04 de       	rcall	.-1016   	; 0x416 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 80e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
 812:	80 ff       	sbrs	r24, 0
 814:	fc cf       	rjmp	.-8      	; 0x80e <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 816:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 81a:	80 68       	ori	r24, 0x80	; 128
 81c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 820:	11 11       	cpse	r17, r1
 822:	02 c0       	rjmp	.+4      	; 0x828 <USB_Device_ProcessControlRequest+0x16c>
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	01 c0       	rjmp	.+2      	; 0x82a <USB_Device_ProcessControlRequest+0x16e>
 828:	83 e0       	ldi	r24, 0x03	; 3
 82a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
 82e:	85 c0       	rjmp	.+266    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 830:	80 58       	subi	r24, 0x80	; 128
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	08 f0       	brcs	.+2      	; 0x838 <USB_Device_ProcessControlRequest+0x17c>
 836:	81 c0       	rjmp	.+258    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 838:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 83c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 840:	8c 3d       	cpi	r24, 0xDC	; 220
 842:	53 e0       	ldi	r21, 0x03	; 3
 844:	95 07       	cpc	r25, r21
 846:	71 f5       	brne	.+92     	; 0x8a4 <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 848:	83 e0       	ldi	r24, 0x03	; 3
 84a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 84c:	8a e2       	ldi	r24, 0x2A	; 42
 84e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 850:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 852:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 854:	de 01       	movw	r26, r28
 856:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 858:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 85a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 85c:	51 e2       	ldi	r21, 0x21	; 33
 85e:	e3 2f       	mov	r30, r19
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 866:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 868:	20 ff       	sbrs	r18, 0
 86a:	03 c0       	rjmp	.+6      	; 0x872 <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
 86c:	e2 95       	swap	r30
 86e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 870:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 872:	ef 70       	andi	r30, 0x0F	; 15
 874:	8e 2f       	mov	r24, r30
 876:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 878:	ea 30       	cpi	r30, 0x0A	; 10
 87a:	10 f0       	brcs	.+4      	; 0x880 <USB_Device_ProcessControlRequest+0x1c4>
 87c:	c7 96       	adiw	r24, 0x37	; 55
 87e:	01 c0       	rjmp	.+2      	; 0x882 <USB_Device_ProcessControlRequest+0x1c6>
 880:	c0 96       	adiw	r24, 0x30	; 48
 882:	8d 93       	st	X+, r24
 884:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 886:	2f 5f       	subi	r18, 0xFF	; 255
 888:	24 31       	cpi	r18, 0x14	; 20
 88a:	49 f7       	brne	.-46     	; 0x85e <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 88c:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 88e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 892:	87 7f       	andi	r24, 0xF7	; 247
 894:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 898:	6a e2       	ldi	r22, 0x2A	; 42
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	ce 01       	movw	r24, r28
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	cc dc       	rcall	.-1640   	; 0x23a <Endpoint_Write_Control_Stream_LE>
 8a2:	12 c0       	rjmp	.+36     	; 0x8c8 <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 8a4:	ae 01       	movw	r20, r28
 8a6:	4f 5f       	subi	r20, 0xFF	; 255
 8a8:	5f 4f       	sbci	r21, 0xFF	; 255
 8aa:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 8ae:	95 dc       	rcall	.-1750   	; 0x1da <CALLBACK_USB_GetDescriptor>
 8b0:	bc 01       	movw	r22, r24
 8b2:	89 2b       	or	r24, r25
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <USB_Device_ProcessControlRequest+0x1fc>
 8b6:	41 c0       	rjmp	.+130    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
 8b8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8bc:	97 7f       	andi	r25, 0xF7	; 247
 8be:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	9a 81       	ldd	r25, Y+2	; 0x02
 8c6:	14 dd       	rcall	.-1496   	; 0x2f0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8cc:	8b 77       	andi	r24, 0x7B	; 123
 8ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8d2:	33 c0       	rjmp	.+102    	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 8d4:	80 38       	cpi	r24, 0x80	; 128
 8d6:	89 f5       	brne	.+98     	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8dc:	87 7f       	andi	r24, 0xF7	; 247
 8de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 8e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8e6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8ee:	8e 77       	andi	r24, 0x7E	; 126
 8f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 8f4:	90 dd       	rcall	.-1248   	; 0x416 <Endpoint_ClearStatusStage>
 8f6:	21 c0       	rjmp	.+66     	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8f8:	81 11       	cpse	r24, r1
 8fa:	1f c0       	rjmp	.+62     	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 8fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 900:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 904:	99 27       	eor	r25, r25
 906:	02 97       	sbiw	r24, 0x02	; 2
 908:	c4 f4       	brge	.+48     	; 0x93a <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 90a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 90e:	87 7f       	andi	r24, 0xF7	; 247
 910:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 914:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 918:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>

	Endpoint_ClearStatusStage();
 91c:	7c dd       	rcall	.-1288   	; 0x416 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 91e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 922:	81 11       	cpse	r24, r1
 924:	06 c0       	rjmp	.+12     	; 0x932 <USB_Device_ProcessControlRequest+0x276>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 926:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 92a:	87 fd       	sbrc	r24, 7
 92c:	02 c0       	rjmp	.+4      	; 0x932 <USB_Device_ProcessControlRequest+0x276>
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	01 c0       	rjmp	.+2      	; 0x934 <USB_Device_ProcessControlRequest+0x278>
 932:	84 e0       	ldi	r24, 0x04	; 4
 934:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 938:	18 d0       	rcall	.+48     	; 0x96a <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 93a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 93e:	83 ff       	sbrs	r24, 3
 940:	0a c0       	rjmp	.+20     	; 0x956 <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 942:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 946:	87 7f       	andi	r24, 0xF7	; 247
 948:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 94c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 950:	80 62       	ori	r24, 0x20	; 32
 952:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 956:	aa 96       	adiw	r28, 0x2a	; 42
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	08 95       	ret

0000096a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 96a:	08 95       	ret

0000096c <_exit>:
 96c:	f8 94       	cli

0000096e <__stop_program>:
 96e:	ff cf       	rjmp	.-2      	; 0x96e <__stop_program>
