
AntennaCtrl6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000fce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050e5  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001731  00000000  00000000  00006385  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d96  00000000  00000000  00007ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  0000a84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000227c  00000000  00000000  0000af44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003142  00000000  00000000  0000d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00010302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
   2:	00 00       	nop
   4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
   6:	00 00       	nop
   8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
   a:	00 00       	nop
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
   e:	00 00       	nop
  10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
  12:	00 00       	nop
  14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
  16:	00 00       	nop
  18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
  1e:	00 00       	nop
  20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
  22:	00 00       	nop
  24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
  26:	00 00       	nop
  28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c3       	rjmp	.+1768   	; 0x716 <__vector_11>
  2e:	00 00       	nop
  30:	1b c4       	rjmp	.+2102   	; 0x868 <__vector_12>
  32:	00 00       	nop
  34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
  36:	00 00       	nop
  38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
  3e:	00 00       	nop
  40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
  42:	00 00       	nop
  44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
  46:	00 00       	nop
  48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
  4e:	00 00       	nop
  50:	7e c0       	rjmp	.+252    	; 0x14e <__bad_interrupt>
  52:	00 00       	nop
  54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
  56:	00 00       	nop
  58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
  5e:	00 00       	nop
  60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
  62:	00 00       	nop
  64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
  66:	00 00       	nop
  68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
  6e:	00 00       	nop
  70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
  84:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
  94:	6c 00 65 00 72 00 00 00                             l.e.r...

0000009c <ManufacturerString>:
  9c:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
  ac:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
  bc:	6c 00 65 00 72 00 00 00                             l.e.r...

000000c4 <LanguageString>:
  c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
  c8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  d8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  e8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  f8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000106 <DeviceDescriptor>:
 106:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 116:	dc 01                                               ..

00000118 <__ctors_end>:
 118:	11 24       	eor	r1, r1
 11a:	1f be       	out	0x3f, r1	; 63
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d4 e0       	ldi	r29, 0x04	; 4
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	ea e5       	ldi	r30, 0x5A	; 90
 12c:	ff e0       	ldi	r31, 0x0F	; 15
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	a0 30       	cpi	r26, 0x00	; 0
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	ad 30       	cpi	r26, 0x0D	; 13
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	47 d1       	rcall	.+654    	; 0x3da <main>
 14c:	04 c7       	rjmp	.+3592   	; 0xf56 <_exit>

0000014e <__bad_interrupt>:
 14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <set_mux>:
void Blink(void) 
{
	// Blinks blue LED with specified period
	PORTB |= 0b01000000;
	_delay_ms(1000);
	PORTB &= (~0b01000000);
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	e9 2f       	mov	r30, r25
 156:	f6 2f       	mov	r31, r22
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8f 73       	andi	r24, 0x3F	; 63
 15c:	88 b9       	out	0x08, r24	; 8
 15e:	3b b1       	in	r19, 0x0b	; 11
 160:	8c 2f       	mov	r24, r28
 162:	60 e1       	ldi	r22, 0x10	; 16
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	d0 d6       	rcall	.+3488   	; 0xf08 <__divmodhi4>
 168:	28 2f       	mov	r18, r24
 16a:	2f 70       	andi	r18, 0x0F	; 15
 16c:	30 78       	andi	r19, 0x80	; 128
 16e:	82 2f       	mov	r24, r18
 170:	83 2b       	or	r24, r19
 172:	2c 2f       	mov	r18, r28
 174:	3e 2f       	mov	r19, r30
 176:	37 ff       	sbrs	r19, 7
 178:	02 c0       	rjmp	.+4      	; 0x17e <set_mux+0x2e>
 17a:	21 5f       	subi	r18, 0xF1	; 241
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	54 e0       	ldi	r21, 0x04	; 4
 180:	35 95       	asr	r19
 182:	27 95       	ror	r18
 184:	5a 95       	dec	r21
 186:	e1 f7       	brne	.-8      	; 0x180 <set_mux+0x30>
 188:	27 70       	andi	r18, 0x07	; 7
 18a:	22 95       	swap	r18
 18c:	20 7f       	andi	r18, 0xF0	; 240
 18e:	28 2b       	or	r18, r24
 190:	2b b9       	out	0x0b, r18	; 11
 192:	28 b1       	in	r18, 0x08	; 8
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	41 11       	cpse	r20, r1
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <set_mux+0x50>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	31 e0       	ldi	r19, 0x01	; 1
 1a6:	f1 11       	cpse	r31, r1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <set_mux+0x5c>
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	83 2b       	or	r24, r19
 1ae:	82 95       	swap	r24
 1b0:	88 0f       	add	r24, r24
 1b2:	88 0f       	add	r24, r24
 1b4:	80 7c       	andi	r24, 0xC0	; 192
 1b6:	82 2b       	or	r24, r18
 1b8:	88 b9       	out	0x08, r24	; 8
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <set_COM>:
 1be:	98 b1       	in	r25, 0x08	; 8
 1c0:	9f 7c       	andi	r25, 0xCF	; 207
 1c2:	98 b9       	out	0x08, r25	; 8
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	61 11       	cpse	r22, r1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <set_COM+0x14>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	81 11       	cpse	r24, r1
 1da:	01 c0       	rjmp	.+2      	; 0x1de <set_COM+0x20>
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	24 2b       	or	r18, r20
 1e0:	22 95       	swap	r18
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	29 2b       	or	r18, r25
 1e6:	28 b9       	out	0x08, r18	; 8
 1e8:	08 95       	ret

000001ea <SendPulse>:
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	66 34       	cpi	r22, 0x46	; 70
 1f0:	71 05       	cpc	r23, r1
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <SendPulse+0xc>
 1f4:	80 c0       	rjmp	.+256    	; 0x2f6 <SendPulse+0x10c>
 1f6:	eb 01       	movw	r28, r22
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	88 23       	and	r24, r24
 1fe:	09 f4       	brne	.+2      	; 0x202 <SendPulse+0x18>
 200:	40 c0       	rjmp	.+128    	; 0x282 <SendPulse+0x98>
 202:	ce 01       	movw	r24, r28
 204:	a5 df       	rcall	.-182    	; 0x150 <set_mux>
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	d9 df       	rcall	.-78     	; 0x1be <set_COM>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <SendPulse+0x26>
 214:	00 c0       	rjmp	.+0      	; 0x216 <SendPulse+0x2c>
 216:	00 00       	nop
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	d0 df       	rcall	.-96     	; 0x1be <set_COM>
 21e:	8f e8       	ldi	r24, 0x8F	; 143
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <SendPulse+0x38>
 226:	00 c0       	rjmp	.+0      	; 0x228 <SendPulse+0x3e>
 228:	00 00       	nop
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	ce 01       	movw	r24, r28
 230:	8f df       	rcall	.-226    	; 0x150 <set_mux>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	c3 df       	rcall	.-122    	; 0x1be <set_COM>
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	88 df       	rcall	.-240    	; 0x150 <set_mux>
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	bc df       	rcall	.-136    	; 0x1be <set_COM>
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	ce 01       	movw	r24, r28
 24c:	81 df       	rcall	.-254    	; 0x150 <set_mux>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	b5 df       	rcall	.-150    	; 0x1be <set_COM>
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	ce 01       	movw	r24, r28
 25a:	7a df       	rcall	.-268    	; 0x150 <set_mux>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	ae df       	rcall	.-164    	; 0x1be <set_COM>
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	ce 01       	movw	r24, r28
 268:	73 df       	rcall	.-282    	; 0x150 <set_mux>
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	a7 df       	rcall	.-178    	; 0x1be <set_COM>
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	9f e0       	ldi	r25, 0x0F	; 15
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <SendPulse+0x8a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <SendPulse+0x90>
 27a:	00 00       	nop
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	85 b9       	out	0x05, r24	; 5
 280:	37 c0       	rjmp	.+110    	; 0x2f0 <SendPulse+0x106>
 282:	ce 01       	movw	r24, r28
 284:	65 df       	rcall	.-310    	; 0x150 <set_mux>
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	99 df       	rcall	.-206    	; 0x1be <set_COM>
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <SendPulse+0xa6>
 294:	00 c0       	rjmp	.+0      	; 0x296 <SendPulse+0xac>
 296:	00 00       	nop
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	ce 01       	movw	r24, r28
 29e:	58 df       	rcall	.-336    	; 0x150 <set_mux>
 2a0:	8f e8       	ldi	r24, 0x8F	; 143
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <SendPulse+0xba>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <SendPulse+0xc0>
 2aa:	00 00       	nop
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	ce 01       	movw	r24, r28
 2b2:	4e df       	rcall	.-356    	; 0x150 <set_mux>
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	82 df       	rcall	.-252    	; 0x1be <set_COM>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	ce 01       	movw	r24, r28
 2c0:	47 df       	rcall	.-370    	; 0x150 <set_mux>
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	7b df       	rcall	.-266    	; 0x1be <set_COM>
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	ce 01       	movw	r24, r28
 2ce:	40 df       	rcall	.-384    	; 0x150 <set_mux>
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	74 df       	rcall	.-280    	; 0x1be <set_COM>
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	ce 01       	movw	r24, r28
 2dc:	39 df       	rcall	.-398    	; 0x150 <set_mux>
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	6d df       	rcall	.-294    	; 0x1be <set_COM>
 2e4:	8f e9       	ldi	r24, 0x9F	; 159
 2e6:	9f e0       	ldi	r25, 0x0F	; 15
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <SendPulse+0xfe>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <SendPulse+0x104>
 2ee:	00 00       	nop
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <SendPulse+0x110>
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	9f ef       	ldi	r25, 0xFF	; 255
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <pot_value_calc>:
 300:	2a e9       	ldi	r18, 0x9A	; 154
 302:	39 e9       	ldi	r19, 0x99	; 153
 304:	49 e1       	ldi	r20, 0x19	; 25
 306:	50 e4       	ldi	r21, 0x40	; 64
 308:	4b d4       	rcall	.+2198   	; 0xba0 <__addsf3>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 ec       	ldi	r20, 0xC0	; 192
 310:	5f e3       	ldi	r21, 0x3F	; 63
 312:	aa d4       	rcall	.+2388   	; 0xc68 <__divsf3>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e8       	ldi	r20, 0x80	; 128
 31a:	5f e3       	ldi	r21, 0x3F	; 63
 31c:	40 d4       	rcall	.+2176   	; 0xb9e <__subsf3>
 31e:	9b 01       	movw	r18, r22
 320:	ac 01       	movw	r20, r24
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	7c ed       	ldi	r23, 0xDC	; 220
 326:	82 e8       	ldi	r24, 0x82	; 130
 328:	97 e4       	ldi	r25, 0x47	; 71
 32a:	9e d4       	rcall	.+2364   	; 0xc68 <__divsf3>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	4f e7       	ldi	r20, 0x7F	; 127
 332:	53 e4       	ldi	r21, 0x43	; 67
 334:	7e d5       	rcall	.+2812   	; 0xe32 <__mulsf3>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e4       	ldi	r19, 0x40	; 64
 33a:	4c e9       	ldi	r20, 0x9C	; 156
 33c:	55 e4       	ldi	r21, 0x45	; 69
 33e:	94 d4       	rcall	.+2344   	; 0xc68 <__divsf3>
 340:	fb d4       	rcall	.+2550   	; 0xd38 <__fixunssfsi>
 342:	6f 3f       	cpi	r22, 0xFF	; 255
 344:	71 05       	cpc	r23, r1
 346:	19 f0       	breq	.+6      	; 0x34e <pot_value_calc+0x4e>
 348:	10 f0       	brcs	.+4      	; 0x34e <pot_value_calc+0x4e>
 34a:	6f ef       	ldi	r22, 0xFF	; 255
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	86 1b       	sub	r24, r22
 354:	97 0b       	sbc	r25, r23
 356:	08 95       	ret

00000358 <SPI_MasterInit>:
	return;
}

void SPI_MasterInit(void) 
{
	DDRB = 0b01001111;
 358:	8f e4       	ldi	r24, 0x4F	; 79
 35a:	84 b9       	out	0x04, r24	; 4
	SPCR = 0b01010011;
 35c:	83 e5       	ldi	r24, 0x53	; 83
 35e:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 0b00000001;
 360:	28 9a       	sbi	0x05, 0	; 5
 362:	08 95       	ret

00000364 <setupHardware>:
{

	//CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Setting up hardware");

	/* Disable watchdog */
	MCUSR &= ~(1 << WDRF);
 364:	84 b7       	in	r24, 0x34	; 52
 366:	87 7f       	andi	r24, 0xF7	; 247
 368:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	a8 95       	wdr
 370:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 374:	88 61       	ori	r24, 0x18	; 24
 376:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 37a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 37e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	80 e8       	ldi	r24, 0x80	; 128
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 38c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 390:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	/* Disable prescaler */
	clock_prescale_set(clock_div_1);
	
	/* Hardware Initialization */
	USB_Init();
 392:	b2 d1       	rcall	.+868    	; 0x6f8 <USB_Init>
	
	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	//TCCR0B = (1 << CS02);
	
	
	DDRD = 0b01111111;
 394:	8f e7       	ldi	r24, 0x7F	; 127
 396:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11110000;
 398:	80 ef       	ldi	r24, 0xF0	; 240
	SPI_MasterInit();
 39a:	87 b9       	out	0x07, r24	; 7
 39c:	dd cf       	rjmp	.-70     	; 0x358 <SPI_MasterInit>

0000039e <SPI_MasterTransmit>:
	PORTB |= 0b00000001;
}

void SPI_MasterTransmit(char cData) 
{
	SPDR = cData;
 39e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
 3a0:	0d b4       	in	r0, 0x2d	; 45
 3a2:	07 fe       	sbrs	r0, 7
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <SPI_MasterTransmit+0x2>
	;
}
 3a6:	08 95       	ret

000003a8 <pot_set>:
	return (255 - dig_pot);
	
}

int pot_set (float voltage) 
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	//val is btwn 0 and 256
	uint16_t val = pot_value_calc(voltage);
 3ac:	a9 df       	rcall	.-174    	; 0x300 <pot_value_calc>
 3ae:	ec 01       	movw	r28, r24
	uint16_t hi_mask = 0b1111111100000000;
	uint16_t lo_mask = ~hi_mask;
	uint16_t cmd = (((uint16_t)cmd_error_mask) << 8) | (val & data_mask);
	uint8_t cmd_hi = (uint8_t)((hi_mask & cmd) >> 8);
	uint8_t cmd_lo = (uint8_t)(lo_mask & cmd);
	PORTB &= 0b11111110;
 3b0:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	8f e9       	ldi	r24, 0x9F	; 159
 3b4:	9f e0       	ldi	r25, 0x0F	; 15
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <pot_set+0xe>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <pot_set+0x14>
 3bc:	00 00       	nop
	_delay_ms(1);
	SPI_MasterTransmit(cmd_hi);
 3be:	ce 01       	movw	r24, r28
 3c0:	88 27       	eor	r24, r24
 3c2:	91 70       	andi	r25, 0x01	; 1
 3c4:	92 60       	ori	r25, 0x02	; 2
 3c6:	89 2f       	mov	r24, r25
 3c8:	ea df       	rcall	.-44     	; 0x39e <SPI_MasterTransmit>
	SPI_MasterTransmit(cmd_lo);
 3ca:	8c 2f       	mov	r24, r28
 3cc:	e8 df       	rcall	.-48     	; 0x39e <SPI_MasterTransmit>
 3ce:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= 0b00000001;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <main>:
 3da:	c4 df       	rcall	.-120    	; 0x364 <setupHardware>
{

	setupHardware();
	//sei(); /*  Enable interrupts */
	//GlobalInterruptEnable();
	pot_set(25.0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	88 ec       	ldi	r24, 0xC8	; 200
 3e2:	91 e4       	ldi	r25, 0x41	; 65
 3e4:	e1 df       	rcall	.-62     	; 0x3a8 <pot_set>
	set_mux(52, 0, 0);
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	84 e3       	ldi	r24, 0x34	; 52
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	b0 de       	rcall	.-672    	; 0x150 <set_mux>
		*	pot_set((float)i);
		*	_delay_ms(5000);
		*}
		*/
		//pot_set(25.0);
		SendPulse(0, 1);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	f9 de       	rcall	.-526    	; 0x1ea <SendPulse>
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	81 ee       	ldi	r24, 0xE1	; 225
 3fc:	94 e0       	ldi	r25, 0x04	; 4
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x24>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	f2 cf       	rjmp	.-28     	; 0x3f0 <main+0x16>

0000040c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 40c:	29 2f       	mov	r18, r25
 40e:	33 27       	eor	r19, r19
 410:	22 30       	cpi	r18, 0x02	; 2
 412:	31 05       	cpc	r19, r1
 414:	59 f0       	breq	.+22     	; 0x42c <CALLBACK_USB_GetDescriptor+0x20>
 416:	23 30       	cpi	r18, 0x03	; 3
 418:	31 05       	cpc	r19, r1
 41a:	69 f0       	breq	.+26     	; 0x436 <CALLBACK_USB_GetDescriptor+0x2a>
 41c:	21 30       	cpi	r18, 0x01	; 1
 41e:	31 05       	cpc	r19, r1
 420:	e9 f4       	brne	.+58     	; 0x45c <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 422:	82 e1       	ldi	r24, 0x12	; 18
 424:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 426:	26 e0       	ldi	r18, 0x06	; 6
 428:	31 e0       	ldi	r19, 0x01	; 1
 42a:	1c c0       	rjmp	.+56     	; 0x464 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 42c:	8e e3       	ldi	r24, 0x3E	; 62
 42e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 430:	28 ec       	ldi	r18, 0xC8	; 200
 432:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 434:	17 c0       	rjmp	.+46     	; 0x464 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 436:	99 27       	eor	r25, r25
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	91 05       	cpc	r25, r1
 43c:	49 f0       	breq	.+18     	; 0x450 <CALLBACK_USB_GetDescriptor+0x44>
 43e:	28 f0       	brcs	.+10     	; 0x44a <CALLBACK_USB_GetDescriptor+0x3e>
 440:	02 97       	sbiw	r24, 0x02	; 2
 442:	61 f4       	brne	.+24     	; 0x45c <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 444:	e4 e7       	ldi	r30, 0x74	; 116
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	05 c0       	rjmp	.+10     	; 0x454 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 44a:	e4 ec       	ldi	r30, 0xC4	; 196
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 450:	ec e9       	ldi	r30, 0x9C	; 156
 452:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 454:	84 91       	lpm	r24, Z
 456:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 458:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 45a:	04 c0       	rjmp	.+8      	; 0x464 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 464:	fa 01       	movw	r30, r20
 466:	31 83       	std	Z+1, r19	; 0x01
 468:	20 83       	st	Z, r18
	return Size;
}
 46a:	08 95       	ret

0000046c <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 46c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 470:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 474:	26 17       	cp	r18, r22
 476:	37 07       	cpc	r19, r23
 478:	48 f0       	brcs	.+18     	; 0x48c <Endpoint_Write_Control_Stream_LE+0x20>
 47a:	61 15       	cp	r22, r1
 47c:	71 05       	cpc	r23, r1
 47e:	39 f4       	brne	.+14     	; 0x48e <Endpoint_Write_Control_Stream_LE+0x22>
 480:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 484:	2e 77       	andi	r18, 0x7E	; 126
 486:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 48a:	01 c0       	rjmp	.+2      	; 0x48e <Endpoint_Write_Control_Stream_LE+0x22>
 48c:	b9 01       	movw	r22, r18
 48e:	fc 01       	movw	r30, r24
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	61 15       	cp	r22, r1
 494:	71 05       	cpc	r23, r1
 496:	61 f1       	breq	.+88     	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x84>
 498:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 49c:	88 23       	and	r24, r24
 49e:	d9 f1       	breq	.+118    	; 0x516 <__stack+0x17>
 4a0:	85 30       	cpi	r24, 0x05	; 5
 4a2:	d9 f1       	breq	.+118    	; 0x51a <__stack+0x1b>
 4a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4a8:	83 fd       	sbrc	r24, 3
 4aa:	39 c0       	rjmp	.+114    	; 0x51e <__stack+0x1f>
 4ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4b0:	82 fd       	sbrc	r24, 2
 4b2:	2b c0       	rjmp	.+86     	; 0x50a <__stack+0xb>
 4b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4b8:	80 ff       	sbrs	r24, 0
 4ba:	eb cf       	rjmp	.-42     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x26>
 4bc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	61 15       	cp	r22, r1
 4c4:	71 05       	cpc	r23, r1
 4c6:	51 f0       	breq	.+20     	; 0x4dc <Endpoint_Write_Control_Stream_LE+0x70>
 4c8:	88 30       	cpi	r24, 0x08	; 8
 4ca:	91 05       	cpc	r25, r1
 4cc:	38 f4       	brcc	.+14     	; 0x4dc <Endpoint_Write_Control_Stream_LE+0x70>
 4ce:	21 91       	ld	r18, Z+
 4d0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 4d4:	61 50       	subi	r22, 0x01	; 1
 4d6:	71 09       	sbc	r23, r1
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	f3 cf       	rjmp	.-26     	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0x56>
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	08 97       	sbiw	r24, 0x08	; 8
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0x78>
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4e8:	8e 77       	andi	r24, 0x7E	; 126
 4ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4ee:	d1 cf       	rjmp	.-94     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x26>
 4f0:	21 11       	cpse	r18, r1
 4f2:	d2 cf       	rjmp	.-92     	; 0x498 <Endpoint_Write_Control_Stream_LE+0x2c>
 4f4:	0a c0       	rjmp	.+20     	; 0x50a <__stack+0xb>
 4f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 4fa:	88 23       	and	r24, r24
 4fc:	61 f0       	breq	.+24     	; 0x516 <__stack+0x17>
 4fe:	85 30       	cpi	r24, 0x05	; 5
 500:	61 f0       	breq	.+24     	; 0x51a <__stack+0x1b>
 502:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 506:	83 fd       	sbrc	r24, 3
 508:	0a c0       	rjmp	.+20     	; 0x51e <__stack+0x1f>
 50a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 50e:	82 ff       	sbrs	r24, 2
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x8a>
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	08 95       	ret
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	08 95       	ret
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	08 95       	ret

00000522 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 522:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 526:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 52a:	26 17       	cp	r18, r22
 52c:	37 07       	cpc	r19, r23
 52e:	48 f0       	brcs	.+18     	; 0x542 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	39 f4       	brne	.+14     	; 0x544 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 536:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 53a:	2e 77       	andi	r18, 0x7E	; 126
 53c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 540:	01 c0       	rjmp	.+2      	; 0x544 <Endpoint_Write_Control_PStream_LE+0x22>
 542:	b9 01       	movw	r22, r18
 544:	fc 01       	movw	r30, r24
 546:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 548:	61 15       	cp	r22, r1
 54a:	71 05       	cpc	r23, r1
 54c:	79 f1       	breq	.+94     	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 54e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 552:	88 23       	and	r24, r24
 554:	09 f4       	brne	.+2      	; 0x558 <Endpoint_Write_Control_PStream_LE+0x36>
 556:	3d c0       	rjmp	.+122    	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 558:	85 30       	cpi	r24, 0x05	; 5
 55a:	09 f4       	brne	.+2      	; 0x55e <Endpoint_Write_Control_PStream_LE+0x3c>
 55c:	3c c0       	rjmp	.+120    	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 55e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 562:	83 fd       	sbrc	r24, 3
 564:	3a c0       	rjmp	.+116    	; 0x5da <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 566:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 56a:	82 fd       	sbrc	r24, 2
 56c:	2c c0       	rjmp	.+88     	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 56e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
 572:	80 ff       	sbrs	r24, 0
 574:	e9 cf       	rjmp	.-46     	; 0x548 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 576:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 57a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 57c:	61 15       	cp	r22, r1
 57e:	71 05       	cpc	r23, r1
 580:	59 f0       	breq	.+22     	; 0x598 <Endpoint_Write_Control_PStream_LE+0x76>
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	91 05       	cpc	r25, r1
 586:	40 f4       	brcc	.+16     	; 0x598 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 588:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 58a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 58e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 590:	61 50       	subi	r22, 0x01	; 1
 592:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	f2 cf       	rjmp	.-28     	; 0x57c <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	08 97       	sbiw	r24, 0x08	; 8
 59c:	09 f0       	breq	.+2      	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0x7e>
 59e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5a4:	8e 77       	andi	r24, 0x7E	; 126
 5a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5aa:	ce cf       	rjmp	.-100    	; 0x548 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5ac:	21 11       	cpse	r18, r1
 5ae:	cf cf       	rjmp	.-98     	; 0x54e <Endpoint_Write_Control_PStream_LE+0x2c>
 5b0:	0a c0       	rjmp	.+20     	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5b6:	88 23       	and	r24, r24
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5ba:	85 30       	cpi	r24, 0x05	; 5
 5bc:	61 f0       	breq	.+24     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5c2:	83 fd       	sbrc	r24, 3
 5c4:	0a c0       	rjmp	.+20     	; 0x5da <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5ca:	82 ff       	sbrs	r24, 2
 5cc:	f2 cf       	rjmp	.-28     	; 0x5b2 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5da:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5dc:	08 95       	ret

000005de <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 5de:	98 2f       	mov	r25, r24
 5e0:	95 30       	cpi	r25, 0x05	; 5
 5e2:	68 f5       	brcc	.+90     	; 0x63e <Endpoint_ConfigureEndpoint_Prv+0x60>
 5e4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 5e8:	98 17       	cp	r25, r24
 5ea:	39 f0       	breq	.+14     	; 0x5fa <Endpoint_ConfigureEndpoint_Prv+0x1c>
 5ec:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 5f0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 5f4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <Endpoint_ConfigureEndpoint_Prv+0x22>
 5fa:	24 2f       	mov	r18, r20
 5fc:	76 2f       	mov	r23, r22
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	21 fd       	sbrc	r18, 1
 602:	02 c0       	rjmp	.+4      	; 0x608 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 604:	9f 5f       	subi	r25, 0xFF	; 255
 606:	ec cf       	rjmp	.-40     	; 0x5e0 <Endpoint_ConfigureEndpoint_Prv+0x2>
 608:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 60c:	3e 7f       	andi	r19, 0xFE	; 254
 60e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 612:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 616:	3d 7f       	andi	r19, 0xFD	; 253
 618:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 61c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 620:	31 60       	ori	r19, 0x01	; 1
 622:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 626:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 62a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 62e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 632:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 636:	27 fd       	sbrc	r18, 7
 638:	e5 cf       	rjmp	.-54     	; 0x604 <Endpoint_ConfigureEndpoint_Prv+0x26>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	08 95       	ret
 63e:	8f 70       	andi	r24, 0x0F	; 15
 640:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	08 95       	ret

00000648 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 648:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>
 64c:	87 ff       	sbrs	r24, 7
 64e:	11 c0       	rjmp	.+34     	; 0x672 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 650:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 654:	82 fd       	sbrc	r24, 2
 656:	05 c0       	rjmp	.+10     	; 0x662 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 658:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 65c:	81 11       	cpse	r24, r1
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <Endpoint_ClearStatusStage+0x8>
 660:	11 c0       	rjmp	.+34     	; 0x684 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 662:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 666:	8b 77       	andi	r24, 0x7B	; 123
 668:	0b c0       	rjmp	.+22     	; 0x680 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 66a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 66e:	88 23       	and	r24, r24
 670:	49 f0       	breq	.+18     	; 0x684 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 672:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 676:	80 ff       	sbrs	r24, 0
 678:	f8 cf       	rjmp	.-16     	; 0x66a <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 67a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 67e:	8e 77       	andi	r24, 0x7E	; 126
 680:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 684:	08 95       	ret

00000686 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 686:	41 d0       	rcall	.+130    	; 0x70a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 688:	43 d0       	rcall	.+134    	; 0x710 <USB_INT_ClearAllInterrupts>
 68a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 68e:	8f 77       	andi	r24, 0x7F	; 127
 690:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 694:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 69e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6a2:	8f 7d       	andi	r24, 0xDF	; 223
 6a4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6a8:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6aa:	89 bd       	out	0x29, r24	; 41
 6ac:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6ae:	89 bd       	out	0x29, r24	; 41
 6b0:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6b2:	00 fe       	sbrs	r0, 0
 6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <USB_ResetInterface+0x2a>
 6b6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	USB_Device_ConfigurationNumber  = 0;
 6be:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6c6:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	88 df       	rcall	.-240    	; 0x5de <Endpoint_ConfigureEndpoint_Prv>
 6ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6d2:	8e 7f       	andi	r24, 0xFE	; 254
 6d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6dc:	81 60       	ori	r24, 0x01	; 1
 6de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 6e6:	88 60       	ori	r24, 0x08	; 8
 6e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6ec:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 6f6:	08 95       	ret

000006f8 <USB_Init>:
 6f8:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	8e 7f       	andi	r24, 0xFE	; 254
 700:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <USB_IsInitialized>

	USB_ResetInterface();
 708:	be cf       	rjmp	.-132    	; 0x686 <USB_ResetInterface>

0000070a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 70a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 70e:	08 95       	ret

00000710 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 710:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 714:	08 95       	ret

00000716 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 716:	1f 92       	push	r1
 718:	0f 92       	push	r0
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	0f 92       	push	r0
 71e:	11 24       	eor	r1, r1
 720:	2f 93       	push	r18
 722:	3f 93       	push	r19
 724:	4f 93       	push	r20
 726:	5f 93       	push	r21
 728:	6f 93       	push	r22
 72a:	7f 93       	push	r23
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 738:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 73c:	82 ff       	sbrs	r24, 2
 73e:	0a c0       	rjmp	.+20     	; 0x754 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 740:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 744:	82 ff       	sbrs	r24, 2
 746:	06 c0       	rjmp	.+12     	; 0x754 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 748:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 74c:	8b 7f       	andi	r24, 0xFB	; 251
 74e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 752:	24 d2       	rcall	.+1096   	; 0xb9c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 754:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 758:	80 ff       	sbrs	r24, 0
 75a:	17 c0       	rjmp	.+46     	; 0x78a <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 75c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 760:	80 ff       	sbrs	r24, 0
 762:	13 c0       	rjmp	.+38     	; 0x78a <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 764:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 768:	8e 7f       	andi	r24, 0xFE	; 254
 76a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 76e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 772:	80 61       	ori	r24, 0x10	; 16
 774:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 778:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 77c:	80 62       	ori	r24, 0x20	; 32
 77e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 782:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 784:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 788:	09 d2       	rcall	.+1042   	; 0xb9c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 78a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 78e:	84 ff       	sbrs	r24, 4
 790:	2f c0       	rjmp	.+94     	; 0x7f0 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 792:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 796:	84 ff       	sbrs	r24, 4
 798:	2b c0       	rjmp	.+86     	; 0x7f0 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 79e:	86 e0       	ldi	r24, 0x06	; 6
 7a0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7a2:	09 b4       	in	r0, 0x29	; 41
 7a4:	00 fe       	sbrs	r0, 0
 7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7a8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
 7ae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 7b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7b6:	8f 7e       	andi	r24, 0xEF	; 239
 7b8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 7bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7c0:	8f 7e       	andi	r24, 0xEF	; 239
 7c2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7ca:	81 60       	ori	r24, 0x01	; 1
 7cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 7d4:	88 23       	and	r24, r24
 7d6:	11 f0       	breq	.+4      	; 0x7dc <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 7d8:	84 e0       	ldi	r24, 0x04	; 4
 7da:	07 c0       	rjmp	.+14     	; 0x7ea <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7dc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 7e0:	87 fd       	sbrc	r24, 7
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <__vector_11+0xd2>
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <__vector_11+0xd4>
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 7ee:	d6 d1       	rcall	.+940    	; 0xb9c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7f4:	83 ff       	sbrs	r24, 3
 7f6:	27 c0       	rjmp	.+78     	; 0x846 <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7fc:	83 ff       	sbrs	r24, 3
 7fe:	23 c0       	rjmp	.+70     	; 0x846 <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 800:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 810:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 814:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 818:	8e 7f       	andi	r24, 0xFE	; 254
 81a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 81e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 828:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 82c:	80 61       	ori	r24, 0x10	; 16
 82e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 832:	42 e0       	ldi	r20, 0x02	; 2
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	d2 de       	rcall	.-604    	; 0x5de <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 83a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 83e:	88 60       	ori	r24, 0x08	; 8
 840:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 844:	ab d1       	rcall	.+854    	; 0xb9c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 88e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 892:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 894:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 898:	d8 2f       	mov	r29, r24
 89a:	d1 70       	andi	r29, 0x01	; 1
 89c:	80 fd       	sbrc	r24, 0
 89e:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8a0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 8a4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8a8:	87 7f       	andi	r24, 0xF7	; 247
 8aa:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 8ae:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 8b0:	1e d0       	rcall	.+60     	; 0x8ee <USB_Device_ProcessControlRequest>
 8b2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 8b6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8ba:	88 60       	ori	r24, 0x08	; 8
 8bc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 8c0:	cd 2b       	or	r28, r29
 8c2:	cf 70       	andi	r28, 0x0F	; 15
 8c4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	bf 91       	pop	r27
 8d2:	af 91       	pop	r26
 8d4:	9f 91       	pop	r25
 8d6:	8f 91       	pop	r24
 8d8:	7f 91       	pop	r23
 8da:	6f 91       	pop	r22
 8dc:	5f 91       	pop	r21
 8de:	4f 91       	pop	r20
 8e0:	3f 91       	pop	r19
 8e2:	2f 91       	pop	r18
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	0f 90       	pop	r0
 8ea:	1f 90       	pop	r1
 8ec:	18 95       	reti

000008ee <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
 8f8:	aa 97       	sbiw	r28, 0x2a	; 42
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
 904:	e5 e0       	ldi	r30, 0x05	; 5
 906:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 908:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 90c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	ed 30       	cpi	r30, 0x0D	; 13
 912:	f2 07       	cpc	r31, r18
 914:	c9 f7       	brne	.-14     	; 0x908 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 916:	42 d1       	rcall	.+644    	; 0xb9c <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 91c:	83 ff       	sbrs	r24, 3
 91e:	26 c1       	rjmp	.+588    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 920:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 924:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <USB_ControlRequest+0x1>
 928:	95 30       	cpi	r25, 0x05	; 5
 92a:	09 f4       	brne	.+2      	; 0x92e <USB_Device_ProcessControlRequest+0x40>
 92c:	78 c0       	rjmp	.+240    	; 0xa1e <USB_Device_ProcessControlRequest+0x130>
 92e:	30 f4       	brcc	.+12     	; 0x93c <USB_Device_ProcessControlRequest+0x4e>
 930:	91 30       	cpi	r25, 0x01	; 1
 932:	81 f1       	breq	.+96     	; 0x994 <USB_Device_ProcessControlRequest+0xa6>
 934:	68 f0       	brcs	.+26     	; 0x950 <USB_Device_ProcessControlRequest+0x62>
 936:	93 30       	cpi	r25, 0x03	; 3
 938:	69 f1       	breq	.+90     	; 0x994 <USB_Device_ProcessControlRequest+0xa6>
 93a:	18 c1       	rjmp	.+560    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
 93c:	98 30       	cpi	r25, 0x08	; 8
 93e:	09 f4       	brne	.+2      	; 0x942 <USB_Device_ProcessControlRequest+0x54>
 940:	e2 c0       	rjmp	.+452    	; 0xb06 <USB_Device_ProcessControlRequest+0x218>
 942:	99 30       	cpi	r25, 0x09	; 9
 944:	09 f4       	brne	.+2      	; 0x948 <USB_Device_ProcessControlRequest+0x5a>
 946:	f1 c0       	rjmp	.+482    	; 0xb2a <USB_Device_ProcessControlRequest+0x23c>
 948:	96 30       	cpi	r25, 0x06	; 6
 94a:	09 f0       	breq	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0x60>
 94c:	0f c1       	rjmp	.+542    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
 94e:	89 c0       	rjmp	.+274    	; 0xa62 <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 950:	80 38       	cpi	r24, 0x80	; 128
 952:	81 f0       	breq	.+32     	; 0x974 <USB_Device_ProcessControlRequest+0x86>
 954:	82 38       	cpi	r24, 0x82	; 130
 956:	09 f0       	breq	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x6c>
 958:	09 c1       	rjmp	.+530    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 95a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 95e:	8f 70       	andi	r24, 0x0F	; 15
 960:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 964:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 968:	85 fb       	bst	r24, 5
 96a:	88 27       	eor	r24, r24
 96c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 96e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 972:	06 c0       	rjmp	.+12     	; 0x980 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 974:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 978:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 97c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 97e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 980:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 984:	97 7f       	andi	r25, 0xF7	; 247
 986:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 98a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 98e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 992:	c4 c0       	rjmp	.+392    	; 0xb1c <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 994:	28 2f       	mov	r18, r24
 996:	2d 7f       	andi	r18, 0xFD	; 253
 998:	09 f0       	breq	.+2      	; 0x99c <USB_Device_ProcessControlRequest+0xae>
 99a:	e8 c0       	rjmp	.+464    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 99c:	88 23       	and	r24, r24
 99e:	19 f0       	breq	.+6      	; 0x9a6 <USB_Device_ProcessControlRequest+0xb8>
 9a0:	82 30       	cpi	r24, 0x02	; 2
 9a2:	61 f0       	breq	.+24     	; 0x9bc <USB_Device_ProcessControlRequest+0xce>
 9a4:	e3 c0       	rjmp	.+454    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 9aa:	81 30       	cpi	r24, 0x01	; 1
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <USB_Device_ProcessControlRequest+0xc2>
 9ae:	de c0       	rjmp	.+444    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9b0:	93 30       	cpi	r25, 0x03	; 3
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <USB_Device_ProcessControlRequest+0xc8>
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 9ba:	2b c0       	rjmp	.+86     	; 0xa12 <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 9c0:	81 11       	cpse	r24, r1
 9c2:	27 c0       	rjmp	.+78     	; 0xa12 <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 9c8:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9ca:	09 f4       	brne	.+2      	; 0x9ce <USB_Device_ProcessControlRequest+0xe0>
 9cc:	cf c0       	rjmp	.+414    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9ce:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9d2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9d6:	20 ff       	sbrs	r18, 0
 9d8:	1c c0       	rjmp	.+56     	; 0xa12 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9da:	93 30       	cpi	r25, 0x03	; 3
 9dc:	21 f4       	brne	.+8      	; 0x9e6 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9de:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 9e2:	80 62       	ori	r24, 0x20	; 32
 9e4:	14 c0       	rjmp	.+40     	; 0xa0e <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9e6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 9ea:	90 61       	ori	r25, 0x10	; 16
 9ec:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	a9 01       	movw	r20, r18
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <USB_Device_ProcessControlRequest+0x10e>
 9f8:	44 0f       	add	r20, r20
 9fa:	55 1f       	adc	r21, r21
 9fc:	8a 95       	dec	r24
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <USB_Device_ProcessControlRequest+0x10a>
 a00:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 a04:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a08:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a0c:	88 60       	ori	r24, 0x08	; 8
 a0e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a12:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a1a:	87 7f       	andi	r24, 0xF7	; 247
 a1c:	82 c0       	rjmp	.+260    	; 0xb22 <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a1e:	81 11       	cpse	r24, r1
 a20:	a5 c0       	rjmp	.+330    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a22:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 a26:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a28:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 a2c:	80 78       	andi	r24, 0x80	; 128
 a2e:	81 2b       	or	r24, r17
 a30:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 a34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a38:	87 7f       	andi	r24, 0xF7	; 247
 a3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a3e:	04 de       	rcall	.-1016   	; 0x648 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
 a44:	80 ff       	sbrs	r24, 0
 a46:	fc cf       	rjmp	.-8      	; 0xa40 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 a48:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 a4c:	80 68       	ori	r24, 0x80	; 128
 a4e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a52:	11 11       	cpse	r17, r1
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <USB_Device_ProcessControlRequest+0x16c>
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	01 c0       	rjmp	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0x16e>
 a5a:	83 e0       	ldi	r24, 0x03	; 3
 a5c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
 a60:	85 c0       	rjmp	.+266    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a62:	80 58       	subi	r24, 0x80	; 128
 a64:	82 30       	cpi	r24, 0x02	; 2
 a66:	08 f0       	brcs	.+2      	; 0xa6a <USB_Device_ProcessControlRequest+0x17c>
 a68:	81 c0       	rjmp	.+258    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a6a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 a6e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 a72:	8c 3d       	cpi	r24, 0xDC	; 220
 a74:	53 e0       	ldi	r21, 0x03	; 3
 a76:	95 07       	cpc	r25, r21
 a78:	71 f5       	brne	.+92     	; 0xad6 <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a7e:	8a e2       	ldi	r24, 0x2A	; 42
 a80:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a82:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a84:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a86:	de 01       	movw	r26, r28
 a88:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a8a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a8c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a8e:	51 e2       	ldi	r21, 0x21	; 33
 a90:	e3 2f       	mov	r30, r19
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 a98:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a9a:	20 ff       	sbrs	r18, 0
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
 a9e:	e2 95       	swap	r30
 aa0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 aa2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 aa4:	ef 70       	andi	r30, 0x0F	; 15
 aa6:	8e 2f       	mov	r24, r30
 aa8:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 aaa:	ea 30       	cpi	r30, 0x0A	; 10
 aac:	10 f0       	brcs	.+4      	; 0xab2 <USB_Device_ProcessControlRequest+0x1c4>
 aae:	c7 96       	adiw	r24, 0x37	; 55
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x1c6>
 ab2:	c0 96       	adiw	r24, 0x30	; 48
 ab4:	8d 93       	st	X+, r24
 ab6:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ab8:	2f 5f       	subi	r18, 0xFF	; 255
 aba:	24 31       	cpi	r18, 0x14	; 20
 abc:	49 f7       	brne	.-46     	; 0xa90 <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 abe:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ac4:	87 7f       	andi	r24, 0xF7	; 247
 ac6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 aca:	6a e2       	ldi	r22, 0x2A	; 42
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	ce 01       	movw	r24, r28
 ad0:	01 96       	adiw	r24, 0x01	; 1
 ad2:	cc dc       	rcall	.-1640   	; 0x46c <Endpoint_Write_Control_Stream_LE>
 ad4:	12 c0       	rjmp	.+36     	; 0xafa <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ad6:	ae 01       	movw	r20, r28
 ad8:	4f 5f       	subi	r20, 0xFF	; 255
 ada:	5f 4f       	sbci	r21, 0xFF	; 255
 adc:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 ae0:	95 dc       	rcall	.-1750   	; 0x40c <CALLBACK_USB_GetDescriptor>
 ae2:	bc 01       	movw	r22, r24
 ae4:	89 2b       	or	r24, r25
 ae6:	09 f4       	brne	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0x1fc>
 ae8:	41 c0       	rjmp	.+130    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
 aea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 aee:	97 7f       	andi	r25, 0xF7	; 247
 af0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 af4:	89 81       	ldd	r24, Y+1	; 0x01
 af6:	9a 81       	ldd	r25, Y+2	; 0x02
 af8:	14 dd       	rcall	.-1496   	; 0x522 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 afa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 afe:	8b 77       	andi	r24, 0x7B	; 123
 b00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b04:	33 c0       	rjmp	.+102    	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b06:	80 38       	cpi	r24, 0x80	; 128
 b08:	89 f5       	brne	.+98     	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b0e:	87 7f       	andi	r24, 0xF7	; 247
 b10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b18:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b20:	8e 77       	andi	r24, 0x7E	; 126
 b22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b26:	90 dd       	rcall	.-1248   	; 0x648 <Endpoint_ClearStatusStage>
 b28:	21 c0       	rjmp	.+66     	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b2a:	81 11       	cpse	r24, r1
 b2c:	1f c0       	rjmp	.+62     	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b2e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 b32:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 b36:	99 27       	eor	r25, r25
 b38:	02 97       	sbiw	r24, 0x02	; 2
 b3a:	c4 f4       	brge	.+48     	; 0xb6c <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b40:	87 7f       	andi	r24, 0xF7	; 247
 b42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b46:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 b4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>

	Endpoint_ClearStatusStage();
 b4e:	7c dd       	rcall	.-1288   	; 0x648 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b50:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 b54:	81 11       	cpse	r24, r1
 b56:	06 c0       	rjmp	.+12     	; 0xb64 <USB_Device_ProcessControlRequest+0x276>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b58:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b5c:	87 fd       	sbrc	r24, 7
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <USB_Device_ProcessControlRequest+0x276>
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	01 c0       	rjmp	.+2      	; 0xb66 <USB_Device_ProcessControlRequest+0x278>
 b64:	84 e0       	ldi	r24, 0x04	; 4
 b66:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 b6a:	18 d0       	rcall	.+48     	; 0xb9c <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b70:	83 ff       	sbrs	r24, 3
 b72:	0a c0       	rjmp	.+20     	; 0xb88 <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b78:	87 7f       	andi	r24, 0xF7	; 247
 b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b7e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b82:	80 62       	ori	r24, 0x20	; 32
 b84:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b88:	aa 96       	adiw	r28, 0x2a	; 42
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	08 95       	ret

00000b9c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b9c:	08 95       	ret

00000b9e <__subsf3>:
 b9e:	50 58       	subi	r21, 0x80	; 128

00000ba0 <__addsf3>:
 ba0:	bb 27       	eor	r27, r27
 ba2:	aa 27       	eor	r26, r26
 ba4:	0e d0       	rcall	.+28     	; 0xbc2 <__addsf3x>
 ba6:	0b c1       	rjmp	.+534    	; 0xdbe <__fp_round>
 ba8:	fc d0       	rcall	.+504    	; 0xda2 <__fp_pscA>
 baa:	30 f0       	brcs	.+12     	; 0xbb8 <__addsf3+0x18>
 bac:	01 d1       	rcall	.+514    	; 0xdb0 <__fp_pscB>
 bae:	20 f0       	brcs	.+8      	; 0xbb8 <__addsf3+0x18>
 bb0:	31 f4       	brne	.+12     	; 0xbbe <__addsf3+0x1e>
 bb2:	9f 3f       	cpi	r25, 0xFF	; 255
 bb4:	11 f4       	brne	.+4      	; 0xbba <__addsf3+0x1a>
 bb6:	1e f4       	brtc	.+6      	; 0xbbe <__addsf3+0x1e>
 bb8:	f1 c0       	rjmp	.+482    	; 0xd9c <__fp_nan>
 bba:	0e f4       	brtc	.+2      	; 0xbbe <__addsf3+0x1e>
 bbc:	e0 95       	com	r30
 bbe:	e7 fb       	bst	r30, 7
 bc0:	e7 c0       	rjmp	.+462    	; 0xd90 <__fp_inf>

00000bc2 <__addsf3x>:
 bc2:	e9 2f       	mov	r30, r25
 bc4:	0d d1       	rcall	.+538    	; 0xde0 <__fp_split3>
 bc6:	80 f3       	brcs	.-32     	; 0xba8 <__addsf3+0x8>
 bc8:	ba 17       	cp	r27, r26
 bca:	62 07       	cpc	r22, r18
 bcc:	73 07       	cpc	r23, r19
 bce:	84 07       	cpc	r24, r20
 bd0:	95 07       	cpc	r25, r21
 bd2:	18 f0       	brcs	.+6      	; 0xbda <__addsf3x+0x18>
 bd4:	71 f4       	brne	.+28     	; 0xbf2 <__addsf3x+0x30>
 bd6:	9e f5       	brtc	.+102    	; 0xc3e <__addsf3x+0x7c>
 bd8:	25 c1       	rjmp	.+586    	; 0xe24 <__fp_zero>
 bda:	0e f4       	brtc	.+2      	; 0xbde <__addsf3x+0x1c>
 bdc:	e0 95       	com	r30
 bde:	0b 2e       	mov	r0, r27
 be0:	ba 2f       	mov	r27, r26
 be2:	a0 2d       	mov	r26, r0
 be4:	0b 01       	movw	r0, r22
 be6:	b9 01       	movw	r22, r18
 be8:	90 01       	movw	r18, r0
 bea:	0c 01       	movw	r0, r24
 bec:	ca 01       	movw	r24, r20
 bee:	a0 01       	movw	r20, r0
 bf0:	11 24       	eor	r1, r1
 bf2:	ff 27       	eor	r31, r31
 bf4:	59 1b       	sub	r21, r25
 bf6:	99 f0       	breq	.+38     	; 0xc1e <__addsf3x+0x5c>
 bf8:	59 3f       	cpi	r21, 0xF9	; 249
 bfa:	50 f4       	brcc	.+20     	; 0xc10 <__addsf3x+0x4e>
 bfc:	50 3e       	cpi	r21, 0xE0	; 224
 bfe:	68 f1       	brcs	.+90     	; 0xc5a <__addsf3x+0x98>
 c00:	1a 16       	cp	r1, r26
 c02:	f0 40       	sbci	r31, 0x00	; 0
 c04:	a2 2f       	mov	r26, r18
 c06:	23 2f       	mov	r18, r19
 c08:	34 2f       	mov	r19, r20
 c0a:	44 27       	eor	r20, r20
 c0c:	58 5f       	subi	r21, 0xF8	; 248
 c0e:	f3 cf       	rjmp	.-26     	; 0xbf6 <__addsf3x+0x34>
 c10:	46 95       	lsr	r20
 c12:	37 95       	ror	r19
 c14:	27 95       	ror	r18
 c16:	a7 95       	ror	r26
 c18:	f0 40       	sbci	r31, 0x00	; 0
 c1a:	53 95       	inc	r21
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__addsf3x+0x4e>
 c1e:	7e f4       	brtc	.+30     	; 0xc3e <__addsf3x+0x7c>
 c20:	1f 16       	cp	r1, r31
 c22:	ba 0b       	sbc	r27, r26
 c24:	62 0b       	sbc	r22, r18
 c26:	73 0b       	sbc	r23, r19
 c28:	84 0b       	sbc	r24, r20
 c2a:	ba f0       	brmi	.+46     	; 0xc5a <__addsf3x+0x98>
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	a1 f0       	breq	.+40     	; 0xc58 <__addsf3x+0x96>
 c30:	ff 0f       	add	r31, r31
 c32:	bb 1f       	adc	r27, r27
 c34:	66 1f       	adc	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	c2 f7       	brpl	.-16     	; 0xc2c <__addsf3x+0x6a>
 c3c:	0e c0       	rjmp	.+28     	; 0xc5a <__addsf3x+0x98>
 c3e:	ba 0f       	add	r27, r26
 c40:	62 1f       	adc	r22, r18
 c42:	73 1f       	adc	r23, r19
 c44:	84 1f       	adc	r24, r20
 c46:	48 f4       	brcc	.+18     	; 0xc5a <__addsf3x+0x98>
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	b7 95       	ror	r27
 c50:	f7 95       	ror	r31
 c52:	9e 3f       	cpi	r25, 0xFE	; 254
 c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0x96>
 c56:	b3 cf       	rjmp	.-154    	; 0xbbe <__addsf3+0x1e>
 c58:	93 95       	inc	r25
 c5a:	88 0f       	add	r24, r24
 c5c:	08 f0       	brcs	.+2      	; 0xc60 <__addsf3x+0x9e>
 c5e:	99 27       	eor	r25, r25
 c60:	ee 0f       	add	r30, r30
 c62:	97 95       	ror	r25
 c64:	87 95       	ror	r24
 c66:	08 95       	ret

00000c68 <__divsf3>:
 c68:	0c d0       	rcall	.+24     	; 0xc82 <__divsf3x>
 c6a:	a9 c0       	rjmp	.+338    	; 0xdbe <__fp_round>
 c6c:	a1 d0       	rcall	.+322    	; 0xdb0 <__fp_pscB>
 c6e:	40 f0       	brcs	.+16     	; 0xc80 <__divsf3+0x18>
 c70:	98 d0       	rcall	.+304    	; 0xda2 <__fp_pscA>
 c72:	30 f0       	brcs	.+12     	; 0xc80 <__divsf3+0x18>
 c74:	21 f4       	brne	.+8      	; 0xc7e <__divsf3+0x16>
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	19 f0       	breq	.+6      	; 0xc80 <__divsf3+0x18>
 c7a:	8a c0       	rjmp	.+276    	; 0xd90 <__fp_inf>
 c7c:	51 11       	cpse	r21, r1
 c7e:	d3 c0       	rjmp	.+422    	; 0xe26 <__fp_szero>
 c80:	8d c0       	rjmp	.+282    	; 0xd9c <__fp_nan>

00000c82 <__divsf3x>:
 c82:	ae d0       	rcall	.+348    	; 0xde0 <__fp_split3>
 c84:	98 f3       	brcs	.-26     	; 0xc6c <__divsf3+0x4>

00000c86 <__divsf3_pse>:
 c86:	99 23       	and	r25, r25
 c88:	c9 f3       	breq	.-14     	; 0xc7c <__divsf3+0x14>
 c8a:	55 23       	and	r21, r21
 c8c:	b1 f3       	breq	.-20     	; 0xc7a <__divsf3+0x12>
 c8e:	95 1b       	sub	r25, r21
 c90:	55 0b       	sbc	r21, r21
 c92:	bb 27       	eor	r27, r27
 c94:	aa 27       	eor	r26, r26
 c96:	62 17       	cp	r22, r18
 c98:	73 07       	cpc	r23, r19
 c9a:	84 07       	cpc	r24, r20
 c9c:	38 f0       	brcs	.+14     	; 0xcac <__divsf3_pse+0x26>
 c9e:	9f 5f       	subi	r25, 0xFF	; 255
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255
 ca2:	22 0f       	add	r18, r18
 ca4:	33 1f       	adc	r19, r19
 ca6:	44 1f       	adc	r20, r20
 ca8:	aa 1f       	adc	r26, r26
 caa:	a9 f3       	breq	.-22     	; 0xc96 <__divsf3_pse+0x10>
 cac:	33 d0       	rcall	.+102    	; 0xd14 <__divsf3_pse+0x8e>
 cae:	0e 2e       	mov	r0, r30
 cb0:	3a f0       	brmi	.+14     	; 0xcc0 <__divsf3_pse+0x3a>
 cb2:	e0 e8       	ldi	r30, 0x80	; 128
 cb4:	30 d0       	rcall	.+96     	; 0xd16 <__divsf3_pse+0x90>
 cb6:	91 50       	subi	r25, 0x01	; 1
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	e6 95       	lsr	r30
 cbc:	00 1c       	adc	r0, r0
 cbe:	ca f7       	brpl	.-14     	; 0xcb2 <__divsf3_pse+0x2c>
 cc0:	29 d0       	rcall	.+82     	; 0xd14 <__divsf3_pse+0x8e>
 cc2:	fe 2f       	mov	r31, r30
 cc4:	27 d0       	rcall	.+78     	; 0xd14 <__divsf3_pse+0x8e>
 cc6:	66 0f       	add	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	bb 1f       	adc	r27, r27
 cce:	26 17       	cp	r18, r22
 cd0:	37 07       	cpc	r19, r23
 cd2:	48 07       	cpc	r20, r24
 cd4:	ab 07       	cpc	r26, r27
 cd6:	b0 e8       	ldi	r27, 0x80	; 128
 cd8:	09 f0       	breq	.+2      	; 0xcdc <__divsf3_pse+0x56>
 cda:	bb 0b       	sbc	r27, r27
 cdc:	80 2d       	mov	r24, r0
 cde:	bf 01       	movw	r22, r30
 ce0:	ff 27       	eor	r31, r31
 ce2:	93 58       	subi	r25, 0x83	; 131
 ce4:	5f 4f       	sbci	r21, 0xFF	; 255
 ce6:	2a f0       	brmi	.+10     	; 0xcf2 <__divsf3_pse+0x6c>
 ce8:	9e 3f       	cpi	r25, 0xFE	; 254
 cea:	51 05       	cpc	r21, r1
 cec:	68 f0       	brcs	.+26     	; 0xd08 <__divsf3_pse+0x82>
 cee:	50 c0       	rjmp	.+160    	; 0xd90 <__fp_inf>
 cf0:	9a c0       	rjmp	.+308    	; 0xe26 <__fp_szero>
 cf2:	5f 3f       	cpi	r21, 0xFF	; 255
 cf4:	ec f3       	brlt	.-6      	; 0xcf0 <__divsf3_pse+0x6a>
 cf6:	98 3e       	cpi	r25, 0xE8	; 232
 cf8:	dc f3       	brlt	.-10     	; 0xcf0 <__divsf3_pse+0x6a>
 cfa:	86 95       	lsr	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	b7 95       	ror	r27
 d02:	f7 95       	ror	r31
 d04:	9f 5f       	subi	r25, 0xFF	; 255
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__divsf3_pse+0x74>
 d08:	88 0f       	add	r24, r24
 d0a:	91 1d       	adc	r25, r1
 d0c:	96 95       	lsr	r25
 d0e:	87 95       	ror	r24
 d10:	97 f9       	bld	r25, 7
 d12:	08 95       	ret
 d14:	e1 e0       	ldi	r30, 0x01	; 1
 d16:	66 0f       	add	r22, r22
 d18:	77 1f       	adc	r23, r23
 d1a:	88 1f       	adc	r24, r24
 d1c:	bb 1f       	adc	r27, r27
 d1e:	62 17       	cp	r22, r18
 d20:	73 07       	cpc	r23, r19
 d22:	84 07       	cpc	r24, r20
 d24:	ba 07       	cpc	r27, r26
 d26:	20 f0       	brcs	.+8      	; 0xd30 <__divsf3_pse+0xaa>
 d28:	62 1b       	sub	r22, r18
 d2a:	73 0b       	sbc	r23, r19
 d2c:	84 0b       	sbc	r24, r20
 d2e:	ba 0b       	sbc	r27, r26
 d30:	ee 1f       	adc	r30, r30
 d32:	88 f7       	brcc	.-30     	; 0xd16 <__divsf3_pse+0x90>
 d34:	e0 95       	com	r30
 d36:	08 95       	ret

00000d38 <__fixunssfsi>:
 d38:	5b d0       	rcall	.+182    	; 0xdf0 <__fp_splitA>
 d3a:	88 f0       	brcs	.+34     	; 0xd5e <__fixunssfsi+0x26>
 d3c:	9f 57       	subi	r25, 0x7F	; 127
 d3e:	90 f0       	brcs	.+36     	; 0xd64 <__fixunssfsi+0x2c>
 d40:	b9 2f       	mov	r27, r25
 d42:	99 27       	eor	r25, r25
 d44:	b7 51       	subi	r27, 0x17	; 23
 d46:	a0 f0       	brcs	.+40     	; 0xd70 <__fixunssfsi+0x38>
 d48:	d1 f0       	breq	.+52     	; 0xd7e <__fixunssfsi+0x46>
 d4a:	66 0f       	add	r22, r22
 d4c:	77 1f       	adc	r23, r23
 d4e:	88 1f       	adc	r24, r24
 d50:	99 1f       	adc	r25, r25
 d52:	1a f0       	brmi	.+6      	; 0xd5a <__fixunssfsi+0x22>
 d54:	ba 95       	dec	r27
 d56:	c9 f7       	brne	.-14     	; 0xd4a <__fixunssfsi+0x12>
 d58:	12 c0       	rjmp	.+36     	; 0xd7e <__fixunssfsi+0x46>
 d5a:	b1 30       	cpi	r27, 0x01	; 1
 d5c:	81 f0       	breq	.+32     	; 0xd7e <__fixunssfsi+0x46>
 d5e:	62 d0       	rcall	.+196    	; 0xe24 <__fp_zero>
 d60:	b1 e0       	ldi	r27, 0x01	; 1
 d62:	08 95       	ret
 d64:	5f c0       	rjmp	.+190    	; 0xe24 <__fp_zero>
 d66:	67 2f       	mov	r22, r23
 d68:	78 2f       	mov	r23, r24
 d6a:	88 27       	eor	r24, r24
 d6c:	b8 5f       	subi	r27, 0xF8	; 248
 d6e:	39 f0       	breq	.+14     	; 0xd7e <__fixunssfsi+0x46>
 d70:	b9 3f       	cpi	r27, 0xF9	; 249
 d72:	cc f3       	brlt	.-14     	; 0xd66 <__fixunssfsi+0x2e>
 d74:	86 95       	lsr	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	b3 95       	inc	r27
 d7c:	d9 f7       	brne	.-10     	; 0xd74 <__fixunssfsi+0x3c>
 d7e:	3e f4       	brtc	.+14     	; 0xd8e <__fixunssfsi+0x56>
 d80:	90 95       	com	r25
 d82:	80 95       	com	r24
 d84:	70 95       	com	r23
 d86:	61 95       	neg	r22
 d88:	7f 4f       	sbci	r23, 0xFF	; 255
 d8a:	8f 4f       	sbci	r24, 0xFF	; 255
 d8c:	9f 4f       	sbci	r25, 0xFF	; 255
 d8e:	08 95       	ret

00000d90 <__fp_inf>:
 d90:	97 f9       	bld	r25, 7
 d92:	9f 67       	ori	r25, 0x7F	; 127
 d94:	80 e8       	ldi	r24, 0x80	; 128
 d96:	70 e0       	ldi	r23, 0x00	; 0
 d98:	60 e0       	ldi	r22, 0x00	; 0
 d9a:	08 95       	ret

00000d9c <__fp_nan>:
 d9c:	9f ef       	ldi	r25, 0xFF	; 255
 d9e:	80 ec       	ldi	r24, 0xC0	; 192
 da0:	08 95       	ret

00000da2 <__fp_pscA>:
 da2:	00 24       	eor	r0, r0
 da4:	0a 94       	dec	r0
 da6:	16 16       	cp	r1, r22
 da8:	17 06       	cpc	r1, r23
 daa:	18 06       	cpc	r1, r24
 dac:	09 06       	cpc	r0, r25
 dae:	08 95       	ret

00000db0 <__fp_pscB>:
 db0:	00 24       	eor	r0, r0
 db2:	0a 94       	dec	r0
 db4:	12 16       	cp	r1, r18
 db6:	13 06       	cpc	r1, r19
 db8:	14 06       	cpc	r1, r20
 dba:	05 06       	cpc	r0, r21
 dbc:	08 95       	ret

00000dbe <__fp_round>:
 dbe:	09 2e       	mov	r0, r25
 dc0:	03 94       	inc	r0
 dc2:	00 0c       	add	r0, r0
 dc4:	11 f4       	brne	.+4      	; 0xdca <__fp_round+0xc>
 dc6:	88 23       	and	r24, r24
 dc8:	52 f0       	brmi	.+20     	; 0xdde <__fp_round+0x20>
 dca:	bb 0f       	add	r27, r27
 dcc:	40 f4       	brcc	.+16     	; 0xdde <__fp_round+0x20>
 dce:	bf 2b       	or	r27, r31
 dd0:	11 f4       	brne	.+4      	; 0xdd6 <__fp_round+0x18>
 dd2:	60 ff       	sbrs	r22, 0
 dd4:	04 c0       	rjmp	.+8      	; 0xdde <__fp_round+0x20>
 dd6:	6f 5f       	subi	r22, 0xFF	; 255
 dd8:	7f 4f       	sbci	r23, 0xFF	; 255
 dda:	8f 4f       	sbci	r24, 0xFF	; 255
 ddc:	9f 4f       	sbci	r25, 0xFF	; 255
 dde:	08 95       	ret

00000de0 <__fp_split3>:
 de0:	57 fd       	sbrc	r21, 7
 de2:	90 58       	subi	r25, 0x80	; 128
 de4:	44 0f       	add	r20, r20
 de6:	55 1f       	adc	r21, r21
 de8:	59 f0       	breq	.+22     	; 0xe00 <__fp_splitA+0x10>
 dea:	5f 3f       	cpi	r21, 0xFF	; 255
 dec:	71 f0       	breq	.+28     	; 0xe0a <__fp_splitA+0x1a>
 dee:	47 95       	ror	r20

00000df0 <__fp_splitA>:
 df0:	88 0f       	add	r24, r24
 df2:	97 fb       	bst	r25, 7
 df4:	99 1f       	adc	r25, r25
 df6:	61 f0       	breq	.+24     	; 0xe10 <__fp_splitA+0x20>
 df8:	9f 3f       	cpi	r25, 0xFF	; 255
 dfa:	79 f0       	breq	.+30     	; 0xe1a <__fp_splitA+0x2a>
 dfc:	87 95       	ror	r24
 dfe:	08 95       	ret
 e00:	12 16       	cp	r1, r18
 e02:	13 06       	cpc	r1, r19
 e04:	14 06       	cpc	r1, r20
 e06:	55 1f       	adc	r21, r21
 e08:	f2 cf       	rjmp	.-28     	; 0xdee <__fp_split3+0xe>
 e0a:	46 95       	lsr	r20
 e0c:	f1 df       	rcall	.-30     	; 0xdf0 <__fp_splitA>
 e0e:	08 c0       	rjmp	.+16     	; 0xe20 <__fp_splitA+0x30>
 e10:	16 16       	cp	r1, r22
 e12:	17 06       	cpc	r1, r23
 e14:	18 06       	cpc	r1, r24
 e16:	99 1f       	adc	r25, r25
 e18:	f1 cf       	rjmp	.-30     	; 0xdfc <__fp_splitA+0xc>
 e1a:	86 95       	lsr	r24
 e1c:	71 05       	cpc	r23, r1
 e1e:	61 05       	cpc	r22, r1
 e20:	08 94       	sec
 e22:	08 95       	ret

00000e24 <__fp_zero>:
 e24:	e8 94       	clt

00000e26 <__fp_szero>:
 e26:	bb 27       	eor	r27, r27
 e28:	66 27       	eor	r22, r22
 e2a:	77 27       	eor	r23, r23
 e2c:	cb 01       	movw	r24, r22
 e2e:	97 f9       	bld	r25, 7
 e30:	08 95       	ret

00000e32 <__mulsf3>:
 e32:	0a d0       	rcall	.+20     	; 0xe48 <__mulsf3x>
 e34:	c4 cf       	rjmp	.-120    	; 0xdbe <__fp_round>
 e36:	b5 df       	rcall	.-150    	; 0xda2 <__fp_pscA>
 e38:	28 f0       	brcs	.+10     	; 0xe44 <__mulsf3+0x12>
 e3a:	ba df       	rcall	.-140    	; 0xdb0 <__fp_pscB>
 e3c:	18 f0       	brcs	.+6      	; 0xe44 <__mulsf3+0x12>
 e3e:	95 23       	and	r25, r21
 e40:	09 f0       	breq	.+2      	; 0xe44 <__mulsf3+0x12>
 e42:	a6 cf       	rjmp	.-180    	; 0xd90 <__fp_inf>
 e44:	ab cf       	rjmp	.-170    	; 0xd9c <__fp_nan>
 e46:	ef cf       	rjmp	.-34     	; 0xe26 <__fp_szero>

00000e48 <__mulsf3x>:
 e48:	cb df       	rcall	.-106    	; 0xde0 <__fp_split3>
 e4a:	a8 f3       	brcs	.-22     	; 0xe36 <__mulsf3+0x4>

00000e4c <__mulsf3_pse>:
 e4c:	99 23       	and	r25, r25
 e4e:	d9 f3       	breq	.-10     	; 0xe46 <__mulsf3+0x14>
 e50:	55 23       	and	r21, r21
 e52:	c9 f3       	breq	.-14     	; 0xe46 <__mulsf3+0x14>
 e54:	95 0f       	add	r25, r21
 e56:	50 e0       	ldi	r21, 0x00	; 0
 e58:	55 1f       	adc	r21, r21
 e5a:	aa 27       	eor	r26, r26
 e5c:	ee 27       	eor	r30, r30
 e5e:	ff 27       	eor	r31, r31
 e60:	bb 27       	eor	r27, r27
 e62:	00 24       	eor	r0, r0
 e64:	08 94       	sec
 e66:	67 95       	ror	r22
 e68:	20 f4       	brcc	.+8      	; 0xe72 <__mulsf3_pse+0x26>
 e6a:	e2 0f       	add	r30, r18
 e6c:	f3 1f       	adc	r31, r19
 e6e:	b4 1f       	adc	r27, r20
 e70:	0a 1e       	adc	r0, r26
 e72:	22 0f       	add	r18, r18
 e74:	33 1f       	adc	r19, r19
 e76:	44 1f       	adc	r20, r20
 e78:	aa 1f       	adc	r26, r26
 e7a:	66 95       	lsr	r22
 e7c:	a9 f7       	brne	.-22     	; 0xe68 <__mulsf3_pse+0x1c>
 e7e:	77 95       	ror	r23
 e80:	30 f4       	brcc	.+12     	; 0xe8e <__mulsf3_pse+0x42>
 e82:	f3 0f       	add	r31, r19
 e84:	b4 1f       	adc	r27, r20
 e86:	0a 1e       	adc	r0, r26
 e88:	12 1e       	adc	r1, r18
 e8a:	08 f4       	brcc	.+2      	; 0xe8e <__mulsf3_pse+0x42>
 e8c:	63 95       	inc	r22
 e8e:	33 0f       	add	r19, r19
 e90:	44 1f       	adc	r20, r20
 e92:	aa 1f       	adc	r26, r26
 e94:	22 1f       	adc	r18, r18
 e96:	76 95       	lsr	r23
 e98:	99 f7       	brne	.-26     	; 0xe80 <__mulsf3_pse+0x34>
 e9a:	87 95       	ror	r24
 e9c:	20 f4       	brcc	.+8      	; 0xea6 <__mulsf3_pse+0x5a>
 e9e:	b4 0f       	add	r27, r20
 ea0:	0a 1e       	adc	r0, r26
 ea2:	12 1e       	adc	r1, r18
 ea4:	63 1f       	adc	r22, r19
 ea6:	44 0f       	add	r20, r20
 ea8:	aa 1f       	adc	r26, r26
 eaa:	22 1f       	adc	r18, r18
 eac:	33 1f       	adc	r19, r19
 eae:	86 95       	lsr	r24
 eb0:	a9 f7       	brne	.-22     	; 0xe9c <__mulsf3_pse+0x50>
 eb2:	86 2f       	mov	r24, r22
 eb4:	71 2d       	mov	r23, r1
 eb6:	60 2d       	mov	r22, r0
 eb8:	11 24       	eor	r1, r1
 eba:	9f 57       	subi	r25, 0x7F	; 127
 ebc:	50 40       	sbci	r21, 0x00	; 0
 ebe:	8a f0       	brmi	.+34     	; 0xee2 <__mulsf3_pse+0x96>
 ec0:	e1 f0       	breq	.+56     	; 0xefa <__mulsf3_pse+0xae>
 ec2:	88 23       	and	r24, r24
 ec4:	4a f0       	brmi	.+18     	; 0xed8 <__mulsf3_pse+0x8c>
 ec6:	ee 0f       	add	r30, r30
 ec8:	ff 1f       	adc	r31, r31
 eca:	bb 1f       	adc	r27, r27
 ecc:	66 1f       	adc	r22, r22
 ece:	77 1f       	adc	r23, r23
 ed0:	88 1f       	adc	r24, r24
 ed2:	91 50       	subi	r25, 0x01	; 1
 ed4:	50 40       	sbci	r21, 0x00	; 0
 ed6:	a9 f7       	brne	.-22     	; 0xec2 <__mulsf3_pse+0x76>
 ed8:	9e 3f       	cpi	r25, 0xFE	; 254
 eda:	51 05       	cpc	r21, r1
 edc:	70 f0       	brcs	.+28     	; 0xefa <__mulsf3_pse+0xae>
 ede:	58 cf       	rjmp	.-336    	; 0xd90 <__fp_inf>
 ee0:	a2 cf       	rjmp	.-188    	; 0xe26 <__fp_szero>
 ee2:	5f 3f       	cpi	r21, 0xFF	; 255
 ee4:	ec f3       	brlt	.-6      	; 0xee0 <__mulsf3_pse+0x94>
 ee6:	98 3e       	cpi	r25, 0xE8	; 232
 ee8:	dc f3       	brlt	.-10     	; 0xee0 <__mulsf3_pse+0x94>
 eea:	86 95       	lsr	r24
 eec:	77 95       	ror	r23
 eee:	67 95       	ror	r22
 ef0:	b7 95       	ror	r27
 ef2:	f7 95       	ror	r31
 ef4:	e7 95       	ror	r30
 ef6:	9f 5f       	subi	r25, 0xFF	; 255
 ef8:	c1 f7       	brne	.-16     	; 0xeea <__mulsf3_pse+0x9e>
 efa:	fe 2b       	or	r31, r30
 efc:	88 0f       	add	r24, r24
 efe:	91 1d       	adc	r25, r1
 f00:	96 95       	lsr	r25
 f02:	87 95       	ror	r24
 f04:	97 f9       	bld	r25, 7
 f06:	08 95       	ret

00000f08 <__divmodhi4>:
 f08:	97 fb       	bst	r25, 7
 f0a:	07 2e       	mov	r0, r23
 f0c:	16 f4       	brtc	.+4      	; 0xf12 <__divmodhi4+0xa>
 f0e:	00 94       	com	r0
 f10:	06 d0       	rcall	.+12     	; 0xf1e <__divmodhi4_neg1>
 f12:	77 fd       	sbrc	r23, 7
 f14:	08 d0       	rcall	.+16     	; 0xf26 <__divmodhi4_neg2>
 f16:	0b d0       	rcall	.+22     	; 0xf2e <__udivmodhi4>
 f18:	07 fc       	sbrc	r0, 7
 f1a:	05 d0       	rcall	.+10     	; 0xf26 <__divmodhi4_neg2>
 f1c:	3e f4       	brtc	.+14     	; 0xf2c <__divmodhi4_exit>

00000f1e <__divmodhi4_neg1>:
 f1e:	90 95       	com	r25
 f20:	81 95       	neg	r24
 f22:	9f 4f       	sbci	r25, 0xFF	; 255
 f24:	08 95       	ret

00000f26 <__divmodhi4_neg2>:
 f26:	70 95       	com	r23
 f28:	61 95       	neg	r22
 f2a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f2c <__divmodhi4_exit>:
 f2c:	08 95       	ret

00000f2e <__udivmodhi4>:
 f2e:	aa 1b       	sub	r26, r26
 f30:	bb 1b       	sub	r27, r27
 f32:	51 e1       	ldi	r21, 0x11	; 17
 f34:	07 c0       	rjmp	.+14     	; 0xf44 <__udivmodhi4_ep>

00000f36 <__udivmodhi4_loop>:
 f36:	aa 1f       	adc	r26, r26
 f38:	bb 1f       	adc	r27, r27
 f3a:	a6 17       	cp	r26, r22
 f3c:	b7 07       	cpc	r27, r23
 f3e:	10 f0       	brcs	.+4      	; 0xf44 <__udivmodhi4_ep>
 f40:	a6 1b       	sub	r26, r22
 f42:	b7 0b       	sbc	r27, r23

00000f44 <__udivmodhi4_ep>:
 f44:	88 1f       	adc	r24, r24
 f46:	99 1f       	adc	r25, r25
 f48:	5a 95       	dec	r21
 f4a:	a9 f7       	brne	.-22     	; 0xf36 <__udivmodhi4_loop>
 f4c:	80 95       	com	r24
 f4e:	90 95       	com	r25
 f50:	bc 01       	movw	r22, r24
 f52:	cd 01       	movw	r24, r26
 f54:	08 95       	ret

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
