
AntennaCtrl6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00001ad4  00001b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800188  00800188  00001bf0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006452  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c2f  00000000  00000000  0000840e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038e1  00000000  00000000  0000a03d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  0000d920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002638  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e78  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  000146e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
       6:	00 00       	nop
       8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
       a:	00 00       	nop
       c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
       e:	00 00       	nop
      10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
      12:	00 00       	nop
      14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
      16:	00 00       	nop
      18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
      1e:	00 00       	nop
      20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
      22:	00 00       	nop
      24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c4       	rjmp	.+2208   	; 0x8ce <__vector_11>
      2e:	00 00       	nop
      30:	f7 c4       	rjmp	.+2542   	; 0xa20 <__vector_12>
      32:	00 00       	nop
      34:	8d c0       	rjmp	.+282    	; 0x150 <__bad_interrupt>
      36:	00 00       	nop
      38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
      3e:	00 00       	nop
      40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
      42:	00 00       	nop
      44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
      46:	00 00       	nop
      48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
      52:	00 00       	nop
      54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
      56:	00 00       	nop
      58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
      5e:	00 00       	nop
      60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
      62:	00 00       	nop
      64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
      66:	00 00       	nop
      68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
      84:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
      94:	6c 00 65 00 72 00 00 00                             l.e.r...

0000009c <ManufacturerString>:
      9c:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
      ac:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
      bc:	6c 00 65 00 72 00 00 00                             l.e.r...

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
      c8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      d8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      e8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      f8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d4 e0       	ldi	r29, 0x04	; 4
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e4 ed       	ldi	r30, 0xD4	; 212
     12c:	fa e1       	ldi	r31, 0x1A	; 26
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
     130:	05 90       	lpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	a8 38       	cpi	r26, 0x88	; 136
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	a8 e8       	ldi	r26, 0x88	; 136
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	a7 3a       	cpi	r26, 0xA7	; 167
     146:	b2 07       	cpc	r27, r18
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	a6 d1       	rcall	.+844    	; 0x498 <main>
     14c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <_exit>

00000150 <__bad_interrupt>:
     150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <set_mux>:
	_delay_ms(1);
	SPI_MasterTransmit(cmd_hi);
	SPI_MasterTransmit(cmd_lo);
	PORTB |= 0b00000001;
	return 0;
}
     152:	cf 93       	push	r28
     154:	f8 2f       	mov	r31, r24
     156:	e9 2f       	mov	r30, r25
     158:	c6 2f       	mov	r28, r22
     15a:	88 b1       	in	r24, 0x08	; 8
     15c:	8f 73       	andi	r24, 0x3F	; 63
     15e:	88 b9       	out	0x08, r24	; 8
     160:	3b b1       	in	r19, 0x0b	; 11
     162:	8f 2f       	mov	r24, r31
     164:	60 e1       	ldi	r22, 0x10	; 16
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	aa d7       	rcall	.+3924   	; 0x10be <__divmodhi4>
     16a:	28 2f       	mov	r18, r24
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	30 78       	andi	r19, 0x80	; 128
     170:	82 2f       	mov	r24, r18
     172:	83 2b       	or	r24, r19
     174:	2f 2f       	mov	r18, r31
     176:	3e 2f       	mov	r19, r30
     178:	37 ff       	sbrs	r19, 7
     17a:	02 c0       	rjmp	.+4      	; 0x180 <set_mux+0x2e>
     17c:	21 5f       	subi	r18, 0xF1	; 241
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	94 e0       	ldi	r25, 0x04	; 4
     182:	35 95       	asr	r19
     184:	27 95       	ror	r18
     186:	9a 95       	dec	r25
     188:	e1 f7       	brne	.-8      	; 0x182 <set_mux+0x30>
     18a:	27 70       	andi	r18, 0x07	; 7
     18c:	22 95       	swap	r18
     18e:	20 7f       	andi	r18, 0xF0	; 240
     190:	28 2b       	or	r18, r24
     192:	2b b9       	out	0x0b, r18	; 11
     194:	cc 23       	and	r28, r28
     196:	49 f0       	breq	.+18     	; 0x1aa <set_mux+0x58>
     198:	41 11       	cpse	r20, r1
     19a:	12 c0       	rjmp	.+36     	; 0x1c0 <set_mux+0x6e>
     19c:	47 98       	cbi	0x08, 7	; 8
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	8a 95       	dec	r24
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <set_mux+0x4e>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <set_mux+0x54>
     1a6:	46 9a       	sbi	0x08, 6	; 8
     1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <set_mux+0x6e>
     1aa:	44 23       	and	r20, r20
     1ac:	39 f0       	breq	.+14     	; 0x1bc <set_mux+0x6a>
     1ae:	46 98       	cbi	0x08, 6	; 8
     1b0:	8a e0       	ldi	r24, 0x0A	; 10
     1b2:	8a 95       	dec	r24
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <set_mux+0x60>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <set_mux+0x66>
     1b8:	47 9a       	sbi	0x08, 7	; 8
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <set_mux+0x6e>
     1bc:	47 98       	cbi	0x08, 7	; 8
     1be:	46 98       	cbi	0x08, 6	; 8
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <set_COM>:
     1c4:	88 23       	and	r24, r24
     1c6:	19 f0       	breq	.+6      	; 0x1ce <set_COM+0xa>
     1c8:	66 23       	and	r22, r22
     1ca:	51 f0       	breq	.+20     	; 0x1e0 <set_COM+0x1c>
     1cc:	08 95       	ret
     1ce:	66 23       	and	r22, r22
     1d0:	71 f0       	breq	.+28     	; 0x1ee <set_COM+0x2a>
     1d2:	44 98       	cbi	0x08, 4	; 8
     1d4:	8a e0       	ldi	r24, 0x0A	; 10
     1d6:	8a 95       	dec	r24
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <set_COM+0x12>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <set_COM+0x18>
     1dc:	45 9a       	sbi	0x08, 5	; 8
     1de:	08 95       	ret
     1e0:	45 98       	cbi	0x08, 5	; 8
     1e2:	8a e0       	ldi	r24, 0x0A	; 10
     1e4:	8a 95       	dec	r24
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <set_COM+0x20>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <set_COM+0x26>
     1ea:	44 9a       	sbi	0x08, 4	; 8
     1ec:	08 95       	ret
     1ee:	45 98       	cbi	0x08, 5	; 8
     1f0:	44 98       	cbi	0x08, 4	; 8
     1f2:	08 95       	ret

000001f4 <Blink>:
     1f4:	2e 9a       	sbi	0x05, 6	; 5
     1f6:	2f ef       	ldi	r18, 0xFF	; 255
     1f8:	85 ea       	ldi	r24, 0xA5	; 165
     1fa:	9e e0       	ldi	r25, 0x0E	; 14
     1fc:	21 50       	subi	r18, 0x01	; 1
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	90 40       	sbci	r25, 0x00	; 0
     202:	e1 f7       	brne	.-8      	; 0x1fc <Blink+0x8>
     204:	00 c0       	rjmp	.+0      	; 0x206 <Blink+0x12>
     206:	00 00       	nop
     208:	2e 98       	cbi	0x05, 6	; 5
     20a:	08 95       	ret

0000020c <SendPulse>:
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	66 34       	cpi	r22, 0x46	; 70
     212:	71 05       	cpc	r23, r1
     214:	08 f0       	brcs	.+2      	; 0x218 <SendPulse+0xc>
     216:	6a c0       	rjmp	.+212    	; 0x2ec <SendPulse+0xe0>
     218:	eb 01       	movw	r28, r22
     21a:	88 23       	and	r24, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <SendPulse+0x14>
     21e:	3c c0       	rjmp	.+120    	; 0x298 <SendPulse+0x8c>
     220:	e9 df       	rcall	.-46     	; 0x1f4 <Blink>
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	ce 01       	movw	r24, r28
     228:	94 df       	rcall	.-216    	; 0x152 <set_mux>
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	ca df       	rcall	.-108    	; 0x1c4 <set_COM>
     230:	8f e9       	ldi	r24, 0x9F	; 159
     232:	9f e0       	ldi	r25, 0x0F	; 15
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <SendPulse+0x28>
     238:	00 c0       	rjmp	.+0      	; 0x23a <SendPulse+0x2e>
     23a:	00 00       	nop
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	c1 df       	rcall	.-126    	; 0x1c4 <set_COM>
     242:	41 e0       	ldi	r20, 0x01	; 1
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	83 df       	rcall	.-250    	; 0x152 <set_mux>
     24c:	8f e8       	ldi	r24, 0x8F	; 143
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <SendPulse+0x44>
     254:	00 c0       	rjmp	.+0      	; 0x256 <SendPulse+0x4a>
     256:	00 00       	nop
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	b3 df       	rcall	.-154    	; 0x1c4 <set_COM>
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	ce 01       	movw	r24, r28
     264:	76 df       	rcall	.-276    	; 0x152 <set_mux>
     266:	9a e1       	ldi	r25, 0x1A	; 26
     268:	9a 95       	dec	r25
     26a:	f1 f7       	brne	.-4      	; 0x268 <SendPulse+0x5c>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <SendPulse+0x62>
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	a8 df       	rcall	.-176    	; 0x1c4 <set_COM>
     274:	41 e0       	ldi	r20, 0x01	; 1
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	ce 01       	movw	r24, r28
     27a:	6b df       	rcall	.-298    	; 0x152 <set_mux>
     27c:	8f e9       	ldi	r24, 0x9F	; 159
     27e:	9f e0       	ldi	r25, 0x0F	; 15
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <SendPulse+0x74>
     284:	00 c0       	rjmp	.+0      	; 0x286 <SendPulse+0x7a>
     286:	00 00       	nop
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	9b df       	rcall	.-202    	; 0x1c4 <set_COM>
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	ce 01       	movw	r24, r28
     294:	5e df       	rcall	.-324    	; 0x152 <set_mux>
     296:	21 c0       	rjmp	.+66     	; 0x2da <SendPulse+0xce>
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	ce 01       	movw	r24, r28
     29e:	59 df       	rcall	.-334    	; 0x152 <set_mux>
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	8f df       	rcall	.-226    	; 0x1c4 <set_COM>
     2a6:	8f e9       	ldi	r24, 0x9F	; 159
     2a8:	9f e0       	ldi	r25, 0x0F	; 15
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <SendPulse+0x9e>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <SendPulse+0xa4>
     2b0:	00 00       	nop
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	ce 01       	movw	r24, r28
     2b8:	4c df       	rcall	.-360    	; 0x152 <set_mux>
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	82 df       	rcall	.-252    	; 0x1c4 <set_COM>
     2c0:	8f e8       	ldi	r24, 0x8F	; 143
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SendPulse+0xb8>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <SendPulse+0xbe>
     2ca:	00 00       	nop
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	ce 01       	movw	r24, r28
     2d2:	3f df       	rcall	.-386    	; 0x152 <set_mux>
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	75 df       	rcall	.-278    	; 0x1c4 <set_COM>
     2da:	8f e9       	ldi	r24, 0x9F	; 159
     2dc:	9f e0       	ldi	r25, 0x0F	; 15
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <SendPulse+0xd2>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <SendPulse+0xd8>
     2e4:	00 00       	nop
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <SendPulse+0xe4>
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	9f ef       	ldi	r25, 0xFF	; 255
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <usb_rx>:
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	6e 97       	sbiw	r28, 0x1e	; 30
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	4a e8       	ldi	r20, 0x8A	; 138
     318:	51 e0       	ldi	r21, 0x01	; 1
     31a:	6a e0       	ldi	r22, 0x0A	; 10
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	ce 01       	movw	r24, r28
     320:	45 96       	adiw	r24, 0x15	; 21
     322:	0e 94 b6 09 	call	0x136c	; 0x136c <fgets>
     326:	89 2b       	or	r24, r25
     328:	09 f4       	brne	.+2      	; 0x32c <usb_rx+0x36>
     32a:	84 c0       	rjmp	.+264    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     32c:	8d 89       	ldd	r24, Y+21	; 0x15
     32e:	8b 32       	cpi	r24, 0x2B	; 43
     330:	39 f0       	breq	.+14     	; 0x340 <usb_rx+0x4a>
     332:	8d 32       	cpi	r24, 0x2D	; 45
     334:	29 f0       	breq	.+10     	; 0x340 <usb_rx+0x4a>
     336:	6a e8       	ldi	r22, 0x8A	; 138
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	8b e1       	ldi	r24, 0x1B	; 27
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	32 c0       	rjmp	.+100    	; 0x3a4 <usb_rx+0xae>
     340:	de 01       	movw	r26, r28
     342:	56 96       	adiw	r26, 0x16	; 22
     344:	fe 01       	movw	r30, r28
     346:	3b 96       	adiw	r30, 0x0b	; 11
     348:	be 01       	movw	r22, r28
     34a:	6c 5e       	subi	r22, 0xEC	; 236
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	cf 01       	movw	r24, r30
     354:	4d 91       	ld	r20, X+
     356:	4c 35       	cpi	r20, 0x5C	; 92
     358:	29 f0       	breq	.+10     	; 0x364 <usb_rx+0x6e>
     35a:	21 15       	cp	r18, r1
     35c:	31 05       	cpc	r19, r1
     35e:	11 f4       	brne	.+4      	; 0x364 <usb_rx+0x6e>
     360:	40 83       	st	Z, r20
     362:	02 c0       	rjmp	.+4      	; 0x368 <usb_rx+0x72>
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	31 96       	adiw	r30, 0x01	; 1
     36a:	e6 17       	cp	r30, r22
     36c:	f7 07       	cpc	r31, r23
     36e:	91 f7       	brne	.-28     	; 0x354 <usb_rx+0x5e>
     370:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <errno+0x1>
     374:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <errno>
     378:	4a e0       	ldi	r20, 0x0A	; 10
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	c5 d6       	rcall	.+3466   	; 0x110c <strtol>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
     386:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <errno>
     38a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <errno+0x1>
     38e:	89 2b       	or	r24, r25
     390:	29 f4       	brne	.+10     	; 0x39c <usb_rx+0xa6>
     392:	c1 14       	cp	r12, r1
     394:	d1 04       	cpc	r13, r1
     396:	e1 04       	cpc	r14, r1
     398:	f1 04       	cpc	r15, r1
     39a:	39 f4       	brne	.+14     	; 0x3aa <usb_rx+0xb4>
     39c:	6a e8       	ldi	r22, 0x8A	; 138
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	8c e3       	ldi	r24, 0x3C	; 60
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	0e 94 df 09 	call	0x13be	; 0x13be <fputs>
     3a8:	45 c0       	rjmp	.+138    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3aa:	8d 89       	ldd	r24, Y+21	; 0x15
     3ac:	8b 32       	cpi	r24, 0x2B	; 43
     3ae:	f1 f4       	brne	.+60     	; 0x3ec <usb_rx+0xf6>
     3b0:	b6 01       	movw	r22, r12
     3b2:	61 50       	subi	r22, 0x01	; 1
     3b4:	71 09       	sbc	r23, r1
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	29 df       	rcall	.-430    	; 0x20c <SendPulse>
     3ba:	97 ff       	sbrs	r25, 7
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <usb_rx+0xd2>
     3be:	6a e8       	ldi	r22, 0x8A	; 138
     3c0:	71 e0       	ldi	r23, 0x01	; 1
     3c2:	88 e4       	ldi	r24, 0x48	; 72
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	ee cf       	rjmp	.-36     	; 0x3a4 <usb_rx+0xae>
     3c8:	df 92       	push	r13
     3ca:	cf 92       	push	r12
     3cc:	85 e5       	ldi	r24, 0x55	; 85
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	8e 01       	movw	r16, r28
     3d6:	0f 5f       	subi	r16, 0xFF	; 255
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	1f 93       	push	r17
     3dc:	0f 93       	push	r16
     3de:	0e 94 08 0a 	call	0x1410	; 0x1410 <sprintf>
     3e2:	6a e8       	ldi	r22, 0x8A	; 138
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	88 e5       	ldi	r24, 0x58	; 88
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	19 c0       	rjmp	.+50     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3ec:	8d 32       	cpi	r24, 0x2D	; 45
     3ee:	11 f5       	brne	.+68     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3f0:	b6 01       	movw	r22, r12
     3f2:	61 50       	subi	r22, 0x01	; 1
     3f4:	71 09       	sbc	r23, r1
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	09 df       	rcall	.-494    	; 0x20c <SendPulse>
     3fa:	97 fd       	sbrc	r25, 7
     3fc:	e0 cf       	rjmp	.-64     	; 0x3be <usb_rx+0xc8>
     3fe:	df 92       	push	r13
     400:	cf 92       	push	r12
     402:	85 e5       	ldi	r24, 0x55	; 85
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	8e 01       	movw	r16, r28
     40c:	0f 5f       	subi	r16, 0xFF	; 255
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	1f 93       	push	r17
     412:	0f 93       	push	r16
     414:	fd d7       	rcall	.+4090   	; 0x1410 <sprintf>
     416:	6a e8       	ldi	r22, 0x8A	; 138
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	80 e7       	ldi	r24, 0x70	; 112
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	cf d7       	rcall	.+3998   	; 0x13be <fputs>
     420:	6a e8       	ldi	r22, 0x8A	; 138
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	c8 01       	movw	r24, r16
     426:	cb d7       	rcall	.+3990   	; 0x13be <fputs>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	6e 96       	adiw	r28, 0x1e	; 30
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	08 95       	ret

00000452 <SPI_MasterInit>:
     452:	8f e4       	ldi	r24, 0x4F	; 79
     454:	84 b9       	out	0x04, r24	; 4
     456:	83 e5       	ldi	r24, 0x53	; 83
     458:	8c bd       	out	0x2c, r24	; 44
     45a:	28 9a       	sbi	0x05, 0	; 5
     45c:	08 95       	ret

0000045e <setupHardware>:
     45e:	84 b7       	in	r24, 0x34	; 52
     460:	87 7f       	andi	r24, 0xF7	; 247
     462:	84 bf       	out	0x34, r24	; 52
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	a8 95       	wdr
     46a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     46e:	88 61       	ori	r24, 0x18	; 24
     470:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     474:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     478:	0f be       	out	0x3f, r0	; 63
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	80 e8       	ldi	r24, 0x80	; 128
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     486:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	11 d2       	rcall	.+1058   	; 0x8b0 <USB_Init>
     48e:	8f e7       	ldi	r24, 0x7F	; 127
     490:	8a b9       	out	0x0a, r24	; 10
     492:	80 ef       	ldi	r24, 0xF0	; 240
     494:	87 b9       	out	0x07, r24	; 7
     496:	dd cf       	rjmp	.-70     	; 0x452 <SPI_MasterInit>

00000498 <main>:
     498:	e2 df       	rcall	.-60     	; 0x45e <setupHardware>
     49a:	6a e8       	ldi	r22, 0x8A	; 138
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	49 d5       	rcall	.+2706   	; 0xf36 <CDC_Device_CreateStream>
     4a4:	78 94       	sei
     4a6:	78 94       	sei
     4a8:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     4ac:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
     4b0:	89 2b       	or	r24, r25
     4b2:	d1 f3       	breq	.-12     	; 0x4a8 <main+0x10>
     4b4:	20 df       	rcall	.-448    	; 0x2f6 <usb_rx>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	f1 d4       	rcall	.+2530   	; 0xe9e <CDC_Device_USBTask>
     4bc:	4c d4       	rcall	.+2200   	; 0xd56 <USB_USBTask>
     4be:	f4 cf       	rjmp	.-24     	; 0x4a8 <main+0x10>

000004c0 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    usb_connected = 1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x1>
     4c8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
     4cc:	08 95       	ret

000004ce <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    usb_connected = 0;
     4ce:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__data_end+0x1>
     4d2:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__data_end>
     4d6:	08 95       	ret

000004d8 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	56 c4       	rjmp	.+2220   	; 0xd8a <CDC_Device_ConfigureEndpoints>

000004de <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	3d c5       	rjmp	.+2682   	; 0xf5e <CDC_Device_ProcessControlRequest>

000004e4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4e4:	29 2f       	mov	r18, r25
     4e6:	33 27       	eor	r19, r19
     4e8:	22 30       	cpi	r18, 0x02	; 2
     4ea:	31 05       	cpc	r19, r1
     4ec:	59 f0       	breq	.+22     	; 0x504 <__stack+0x5>
     4ee:	23 30       	cpi	r18, 0x03	; 3
     4f0:	31 05       	cpc	r19, r1
     4f2:	69 f0       	breq	.+26     	; 0x50e <__stack+0xf>
     4f4:	21 30       	cpi	r18, 0x01	; 1
     4f6:	31 05       	cpc	r19, r1
     4f8:	e9 f4       	brne	.+58     	; 0x534 <__stack+0x35>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4fa:	82 e1       	ldi	r24, 0x12	; 18
     4fc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4fe:	26 e0       	ldi	r18, 0x06	; 6
     500:	31 e0       	ldi	r19, 0x01	; 1
     502:	1c c0       	rjmp	.+56     	; 0x53c <__stack+0x3d>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     504:	8e e3       	ldi	r24, 0x3E	; 62
     506:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     508:	28 ec       	ldi	r18, 0xC8	; 200
     50a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     50c:	17 c0       	rjmp	.+46     	; 0x53c <__stack+0x3d>
		case DTYPE_String:
			switch (DescriptorNumber)
     50e:	99 27       	eor	r25, r25
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	91 05       	cpc	r25, r1
     514:	49 f0       	breq	.+18     	; 0x528 <__stack+0x29>
     516:	28 f0       	brcs	.+10     	; 0x522 <__stack+0x23>
     518:	02 97       	sbiw	r24, 0x02	; 2
     51a:	61 f4       	brne	.+24     	; 0x534 <__stack+0x35>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     51c:	e4 e7       	ldi	r30, 0x74	; 116
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	05 c0       	rjmp	.+10     	; 0x52c <__stack+0x2d>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     522:	e4 ec       	ldi	r30, 0xC4	; 196
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <__stack+0x2d>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     528:	ec e9       	ldi	r30, 0x9C	; 156
     52a:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     52c:	84 91       	lpm	r24, Z
     52e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     530:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     532:	04 c0       	rjmp	.+8      	; 0x53c <__stack+0x3d>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     53c:	fa 01       	movw	r30, r20
     53e:	31 83       	std	Z+1, r19	; 0x01
     540:	20 83       	st	Z, r18
	return Size;
}
     542:	08 95       	ret

00000544 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     544:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x6>
     548:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x7>
     54c:	26 17       	cp	r18, r22
     54e:	37 07       	cpc	r19, r23
     550:	48 f0       	brcs	.+18     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x20>
     552:	61 15       	cp	r22, r1
     554:	71 05       	cpc	r23, r1
     556:	39 f4       	brne	.+14     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x22>
     558:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     55c:	2e 77       	andi	r18, 0x7E	; 126
     55e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     562:	01 c0       	rjmp	.+2      	; 0x566 <Endpoint_Write_Control_Stream_LE+0x22>
     564:	b9 01       	movw	r22, r18
     566:	fc 01       	movw	r30, r24
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	61 15       	cp	r22, r1
     56c:	71 05       	cpc	r23, r1
     56e:	61 f1       	breq	.+88     	; 0x5c8 <Endpoint_Write_Control_Stream_LE+0x84>
     570:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     574:	88 23       	and	r24, r24
     576:	d9 f1       	breq	.+118    	; 0x5ee <Endpoint_Write_Control_Stream_LE+0xaa>
     578:	85 30       	cpi	r24, 0x05	; 5
     57a:	d9 f1       	breq	.+118    	; 0x5f2 <Endpoint_Write_Control_Stream_LE+0xae>
     57c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     580:	83 fd       	sbrc	r24, 3
     582:	39 c0       	rjmp	.+114    	; 0x5f6 <Endpoint_Write_Control_Stream_LE+0xb2>
     584:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     588:	82 fd       	sbrc	r24, 2
     58a:	2b c0       	rjmp	.+86     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0x9e>
     58c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     590:	80 ff       	sbrs	r24, 0
     592:	eb cf       	rjmp	.-42     	; 0x56a <Endpoint_Write_Control_Stream_LE+0x26>
     594:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	61 15       	cp	r22, r1
     59c:	71 05       	cpc	r23, r1
     59e:	51 f0       	breq	.+20     	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0x70>
     5a0:	88 30       	cpi	r24, 0x08	; 8
     5a2:	91 05       	cpc	r25, r1
     5a4:	38 f4       	brcc	.+14     	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0x70>
     5a6:	21 91       	ld	r18, Z+
     5a8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     5ac:	61 50       	subi	r22, 0x01	; 1
     5ae:	71 09       	sbc	r23, r1
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	f3 cf       	rjmp	.-26     	; 0x59a <Endpoint_Write_Control_Stream_LE+0x56>
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	08 97       	sbiw	r24, 0x08	; 8
     5b8:	09 f0       	breq	.+2      	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x78>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5c0:	8e 77       	andi	r24, 0x7E	; 126
     5c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5c6:	d1 cf       	rjmp	.-94     	; 0x56a <Endpoint_Write_Control_Stream_LE+0x26>
     5c8:	21 11       	cpse	r18, r1
     5ca:	d2 cf       	rjmp	.-92     	; 0x570 <Endpoint_Write_Control_Stream_LE+0x2c>
     5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0x9e>
     5ce:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     5d2:	88 23       	and	r24, r24
     5d4:	61 f0       	breq	.+24     	; 0x5ee <Endpoint_Write_Control_Stream_LE+0xaa>
     5d6:	85 30       	cpi	r24, 0x05	; 5
     5d8:	61 f0       	breq	.+24     	; 0x5f2 <Endpoint_Write_Control_Stream_LE+0xae>
     5da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5de:	83 fd       	sbrc	r24, 3
     5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <Endpoint_Write_Control_Stream_LE+0xb2>
     5e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5e6:	82 ff       	sbrs	r24, 2
     5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0x8a>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	08 95       	ret
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	08 95       	ret
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	08 95       	ret

000005fa <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5fa:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x6>
     5fe:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x7>
     602:	26 17       	cp	r18, r22
     604:	37 07       	cpc	r19, r23
     606:	48 f0       	brcs	.+18     	; 0x61a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     608:	61 15       	cp	r22, r1
     60a:	71 05       	cpc	r23, r1
     60c:	39 f4       	brne	.+14     	; 0x61c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     60e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     612:	2e 77       	andi	r18, 0x7E	; 126
     614:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     618:	01 c0       	rjmp	.+2      	; 0x61c <Endpoint_Write_Control_PStream_LE+0x22>
     61a:	b9 01       	movw	r22, r18
     61c:	fc 01       	movw	r30, r24
     61e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     620:	61 15       	cp	r22, r1
     622:	71 05       	cpc	r23, r1
     624:	79 f1       	breq	.+94     	; 0x684 <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     626:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     62a:	88 23       	and	r24, r24
     62c:	09 f4       	brne	.+2      	; 0x630 <Endpoint_Write_Control_PStream_LE+0x36>
     62e:	3d c0       	rjmp	.+122    	; 0x6aa <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	09 f4       	brne	.+2      	; 0x636 <Endpoint_Write_Control_PStream_LE+0x3c>
     634:	3c c0       	rjmp	.+120    	; 0x6ae <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     636:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     63a:	83 fd       	sbrc	r24, 3
     63c:	3a c0       	rjmp	.+116    	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     63e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     642:	82 fd       	sbrc	r24, 2
     644:	2c c0       	rjmp	.+88     	; 0x69e <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     646:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
     64a:	80 ff       	sbrs	r24, 0
     64c:	e9 cf       	rjmp	.-46     	; 0x620 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     64e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     652:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     654:	61 15       	cp	r22, r1
     656:	71 05       	cpc	r23, r1
     658:	59 f0       	breq	.+22     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x76>
     65a:	88 30       	cpi	r24, 0x08	; 8
     65c:	91 05       	cpc	r25, r1
     65e:	40 f4       	brcc	.+16     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     660:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     662:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     666:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     668:	61 50       	subi	r22, 0x01	; 1
     66a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	f2 cf       	rjmp	.-28     	; 0x654 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     670:	21 e0       	ldi	r18, 0x01	; 1
     672:	08 97       	sbiw	r24, 0x08	; 8
     674:	09 f0       	breq	.+2      	; 0x678 <Endpoint_Write_Control_PStream_LE+0x7e>
     676:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     678:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     67c:	8e 77       	andi	r24, 0x7E	; 126
     67e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     682:	ce cf       	rjmp	.-100    	; 0x620 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     684:	21 11       	cpse	r18, r1
     686:	cf cf       	rjmp	.-98     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x2c>
     688:	0a c0       	rjmp	.+20     	; 0x69e <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     68a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     68e:	88 23       	and	r24, r24
     690:	61 f0       	breq	.+24     	; 0x6aa <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     692:	85 30       	cpi	r24, 0x05	; 5
     694:	61 f0       	breq	.+24     	; 0x6ae <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     696:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     69a:	83 fd       	sbrc	r24, 3
     69c:	0a c0       	rjmp	.+20     	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     69e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6a2:	82 ff       	sbrs	r24, 2
     6a4:	f2 cf       	rjmp	.-28     	; 0x68a <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6b4:	08 95       	ret

000006b6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     6b6:	98 2f       	mov	r25, r24
     6b8:	95 30       	cpi	r25, 0x05	; 5
     6ba:	68 f5       	brcc	.+90     	; 0x716 <Endpoint_ConfigureEndpoint_Prv+0x60>
     6bc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     6c0:	98 17       	cp	r25, r24
     6c2:	39 f0       	breq	.+14     	; 0x6d2 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     6c4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     6c8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     6cc:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <Endpoint_ConfigureEndpoint_Prv+0x22>
     6d2:	24 2f       	mov	r18, r20
     6d4:	76 2f       	mov	r23, r22
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	21 fd       	sbrc	r18, 1
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     6dc:	9f 5f       	subi	r25, 0xFF	; 255
     6de:	ec cf       	rjmp	.-40     	; 0x6b8 <Endpoint_ConfigureEndpoint_Prv+0x2>
     6e0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6e4:	3e 7f       	andi	r19, 0xFE	; 254
     6e6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6ea:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     6ee:	3d 7f       	andi	r19, 0xFD	; 253
     6f0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     6f4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6f8:	31 60       	ori	r19, 0x01	; 1
     6fa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6fe:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     702:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     706:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     70a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     70e:	27 fd       	sbrc	r18, 7
     710:	e5 cf       	rjmp	.-54     	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x26>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret
     716:	8f 70       	andi	r24, 0x0F	; 15
     718:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	08 95       	ret

00000720 <Endpoint_ConfigureEndpointTable>:
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	06 2f       	mov	r16, r22
     72a:	ec 01       	movw	r28, r24
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	10 17       	cp	r17, r16
     730:	71 f1       	breq	.+92     	; 0x78e <Endpoint_ConfigureEndpointTable+0x6e>
     732:	98 81       	ld	r25, Y
     734:	91 11       	cpse	r25, r1
     736:	03 c0       	rjmp	.+6      	; 0x73e <Endpoint_ConfigureEndpointTable+0x1e>
     738:	1f 5f       	subi	r17, 0xFF	; 255
     73a:	25 96       	adiw	r28, 0x05	; 5
     73c:	f8 cf       	rjmp	.-16     	; 0x72e <Endpoint_ConfigureEndpointTable+0xe>
     73e:	2c 81       	ldd	r18, Y+4	; 0x04
     740:	a9 81       	ldd	r26, Y+1	; 0x01
     742:	ba 81       	ldd	r27, Y+2	; 0x02
     744:	6b 81       	ldd	r22, Y+3	; 0x03
     746:	89 2f       	mov	r24, r25
     748:	8f 70       	andi	r24, 0x0F	; 15
     74a:	85 30       	cpi	r24, 0x05	; 5
     74c:	10 f0       	brcs	.+4      	; 0x752 <Endpoint_ConfigureEndpointTable+0x32>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	1f c0       	rjmp	.+62     	; 0x790 <Endpoint_ConfigureEndpointTable+0x70>
     752:	22 30       	cpi	r18, 0x02	; 2
     754:	10 f4       	brcc	.+4      	; 0x75a <Endpoint_ConfigureEndpointTable+0x3a>
     756:	42 e0       	ldi	r20, 0x02	; 2
     758:	01 c0       	rjmp	.+2      	; 0x75c <Endpoint_ConfigureEndpointTable+0x3c>
     75a:	46 e0       	ldi	r20, 0x06	; 6
     75c:	e8 e0       	ldi	r30, 0x08	; 8
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	ea 17       	cp	r30, r26
     764:	fb 07       	cpc	r31, r27
     766:	20 f4       	brcc	.+8      	; 0x770 <Endpoint_ConfigureEndpointTable+0x50>
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	f9 cf       	rjmp	.-14     	; 0x762 <Endpoint_ConfigureEndpointTable+0x42>
     770:	22 95       	swap	r18
     772:	20 7f       	andi	r18, 0xF0	; 240
     774:	42 2b       	or	r20, r18
     776:	62 95       	swap	r22
     778:	66 0f       	add	r22, r22
     77a:	66 0f       	add	r22, r22
     77c:	60 7c       	andi	r22, 0xC0	; 192
     77e:	99 1f       	adc	r25, r25
     780:	99 27       	eor	r25, r25
     782:	99 1f       	adc	r25, r25
     784:	69 2b       	or	r22, r25
     786:	97 df       	rcall	.-210    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>
     788:	81 11       	cpse	r24, r1
     78a:	d6 cf       	rjmp	.-84     	; 0x738 <Endpoint_ConfigureEndpointTable+0x18>
     78c:	e0 cf       	rjmp	.-64     	; 0x74e <Endpoint_ConfigureEndpointTable+0x2e>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	08 95       	ret

0000079a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     79a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
     79e:	87 ff       	sbrs	r24, 7
     7a0:	11 c0       	rjmp	.+34     	; 0x7c4 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     7a6:	82 fd       	sbrc	r24, 2
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7aa:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     7ae:	81 11       	cpse	r24, r1
     7b0:	f8 cf       	rjmp	.-16     	; 0x7a2 <Endpoint_ClearStatusStage+0x8>
     7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7b8:	8b 77       	andi	r24, 0x7B	; 123
     7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7bc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     7c0:	88 23       	and	r24, r24
     7c2:	49 f0       	breq	.+18     	; 0x7d6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7c8:	80 ff       	sbrs	r24, 0
     7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7d0:	8e 77       	andi	r24, 0x7E	; 126
     7d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7d6:	08 95       	ret

000007d8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7d8:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     7dc:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     7e0:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7e2:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     7e6:	84 2f       	mov	r24, r20
     7e8:	81 70       	andi	r24, 0x01	; 1
     7ea:	40 ff       	sbrs	r20, 0
     7ec:	23 c0       	rjmp	.+70     	; 0x834 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7f2:	80 fd       	sbrc	r24, 0
     7f4:	1d c0       	rjmp	.+58     	; 0x830 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7f6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7fa:	88 23       	and	r24, r24
     7fc:	99 f0       	breq	.+38     	; 0x824 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7fe:	85 30       	cpi	r24, 0x05	; 5
     800:	99 f0       	breq	.+38     	; 0x828 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     802:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     806:	85 fd       	sbrc	r24, 5
     808:	11 c0       	rjmp	.+34     	; 0x82c <Endpoint_WaitUntilReady+0x54>
     80a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     80e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     812:	24 17       	cp	r18, r20
     814:	35 07       	cpc	r19, r21
     816:	29 f3       	breq	.-54     	; 0x7e2 <Endpoint_WaitUntilReady+0xa>
     818:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     81a:	11 f0       	breq	.+4      	; 0x820 <Endpoint_WaitUntilReady+0x48>
     81c:	9a 01       	movw	r18, r20
     81e:	e1 cf       	rjmp	.-62     	; 0x7e2 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     834:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     838:	42 ff       	sbrs	r20, 2
     83a:	dd cf       	rjmp	.-70     	; 0x7f6 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     83c:	08 95       	ret

0000083e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     83e:	41 d0       	rcall	.+130    	; 0x8c2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     840:	43 d0       	rcall	.+134    	; 0x8c8 <USB_INT_ClearAllInterrupts>
     842:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     846:	8f 77       	andi	r24, 0x7F	; 127
     848:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     84c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     850:	80 68       	ori	r24, 0x80	; 128
     852:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     856:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     85a:	8f 7d       	andi	r24, 0xDF	; 223
     85c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     860:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     862:	89 bd       	out	0x29, r24	; 41
     864:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     866:	89 bd       	out	0x29, r24	; 41
     868:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     86a:	00 fe       	sbrs	r0, 0
     86c:	fd cf       	rjmp	.-6      	; 0x868 <USB_ResetInterface+0x2a>
     86e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     872:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     876:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     87a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     87e:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	18 df       	rcall	.-464    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>
     886:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     88a:	8e 7f       	andi	r24, 0xFE	; 254
     88c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     890:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     894:	81 60       	ori	r24, 0x01	; 1
     896:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     89a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8a4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     8ae:	08 95       	ret

000008b0 <USB_Init>:
     8b0:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	8e 7f       	andi	r24, 0xFE	; 254
     8b8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USB_IsInitialized>

	USB_ResetInterface();
     8c0:	be cf       	rjmp	.-132    	; 0x83e <USB_ResetInterface>

000008c2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8c2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8c6:	08 95       	ret

000008c8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8c8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     8cc:	08 95       	ret

000008ce <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8f4:	82 ff       	sbrs	r24, 2
     8f6:	0a c0       	rjmp	.+20     	; 0x90c <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8fc:	82 ff       	sbrs	r24, 2
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     900:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     90a:	24 d2       	rcall	.+1096   	; 0xd54 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     90c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     910:	80 ff       	sbrs	r24, 0
     912:	17 c0       	rjmp	.+46     	; 0x942 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     914:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     918:	80 ff       	sbrs	r24, 0
     91a:	13 c0       	rjmp	.+38     	; 0x942 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     91c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     926:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     930:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     934:	80 62       	ori	r24, 0x20	; 32
     936:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     93a:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     93c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     940:	c6 dd       	rcall	.-1140   	; 0x4ce <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     942:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     946:	84 ff       	sbrs	r24, 4
     948:	2f c0       	rjmp	.+94     	; 0x9a8 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     94a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     94e:	84 ff       	sbrs	r24, 4
     950:	2b c0       	rjmp	.+86     	; 0x9a8 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     95a:	09 b4       	in	r0, 0x29	; 41
     95c:	00 fe       	sbrs	r0, 0
     95e:	fd cf       	rjmp	.-6      	; 0x95a <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     960:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     964:	8f 7d       	andi	r24, 0xDF	; 223
     966:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     96a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     96e:	8f 7e       	andi	r24, 0xEF	; 239
     970:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     974:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     978:	8f 7e       	andi	r24, 0xEF	; 239
     97a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     97e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     982:	81 60       	ori	r24, 0x01	; 1
     984:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     988:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_Device_ConfigurationNumber>
     98c:	88 23       	and	r24, r24
     98e:	11 f0       	breq	.+4      	; 0x994 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
     990:	84 e0       	ldi	r24, 0x04	; 4
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     994:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     998:	87 fd       	sbrc	r24, 7
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__vector_11+0xd2>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <__vector_11+0xd4>
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     9a6:	8c dd       	rcall	.-1256   	; 0x4c0 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9ac:	83 ff       	sbrs	r24, 3
     9ae:	27 c0       	rjmp	.+78     	; 0x9fe <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     9b4:	83 ff       	sbrs	r24, 3
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     9bc:	87 7f       	andi	r24, 0xF7	; 247
     9be:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     9c8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     9d0:	8e 7f       	andi	r24, 0xFE	; 254
     9d2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     9e4:	80 61       	ori	r24, 0x10	; 16
     9e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9ea:	42 e0       	ldi	r20, 0x02	; 2
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	62 de       	rcall	.-828    	; 0x6b6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9f2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     9f6:	88 60       	ori	r24, 0x08	; 8
     9f8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9fc:	ab d1       	rcall	.+854    	; 0xd54 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	2f 93       	push	r18
     a2c:	3f 93       	push	r19
     a2e:	4f 93       	push	r20
     a30:	5f 93       	push	r21
     a32:	6f 93       	push	r22
     a34:	7f 93       	push	r23
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a46:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     a4a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a4c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     a50:	d8 2f       	mov	r29, r24
     a52:	d1 70       	andi	r29, 0x01	; 1
     a54:	80 fd       	sbrc	r24, 0
     a56:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a58:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a5c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     a60:	87 7f       	andi	r24, 0xF7	; 247
     a62:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a66:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a68:	1e d0       	rcall	.+60     	; 0xaa6 <USB_Device_ProcessControlRequest>
     a6a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a6e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     a72:	88 60       	ori	r24, 0x08	; 8
     a74:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     a78:	cd 2b       	or	r28, r29
     a7a:	cf 70       	andi	r28, 0x0F	; 15
     a7c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	aa 97       	sbiw	r28, 0x2a	; 42
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	ed e9       	ldi	r30, 0x9D	; 157
     abe:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ac0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ac4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	e5 3a       	cpi	r30, 0xA5	; 165
     aca:	f2 07       	cpc	r31, r18
     acc:	c9 f7       	brne	.-14     	; 0xac0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     ace:	07 dd       	rcall	.-1522   	; 0x4de <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ad0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     ad4:	83 ff       	sbrs	r24, 3
     ad6:	26 c1       	rjmp	.+588    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ad8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     adc:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <USB_ControlRequest+0x1>
     ae0:	95 30       	cpi	r25, 0x05	; 5
     ae2:	09 f4       	brne	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0x40>
     ae4:	78 c0       	rjmp	.+240    	; 0xbd6 <USB_Device_ProcessControlRequest+0x130>
     ae6:	30 f4       	brcc	.+12     	; 0xaf4 <USB_Device_ProcessControlRequest+0x4e>
     ae8:	91 30       	cpi	r25, 0x01	; 1
     aea:	81 f1       	breq	.+96     	; 0xb4c <USB_Device_ProcessControlRequest+0xa6>
     aec:	68 f0       	brcs	.+26     	; 0xb08 <USB_Device_ProcessControlRequest+0x62>
     aee:	93 30       	cpi	r25, 0x03	; 3
     af0:	69 f1       	breq	.+90     	; 0xb4c <USB_Device_ProcessControlRequest+0xa6>
     af2:	18 c1       	rjmp	.+560    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
     af4:	98 30       	cpi	r25, 0x08	; 8
     af6:	09 f4       	brne	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x54>
     af8:	e2 c0       	rjmp	.+452    	; 0xcbe <USB_Device_ProcessControlRequest+0x218>
     afa:	99 30       	cpi	r25, 0x09	; 9
     afc:	09 f4       	brne	.+2      	; 0xb00 <USB_Device_ProcessControlRequest+0x5a>
     afe:	f1 c0       	rjmp	.+482    	; 0xce2 <USB_Device_ProcessControlRequest+0x23c>
     b00:	96 30       	cpi	r25, 0x06	; 6
     b02:	09 f0       	breq	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0x60>
     b04:	0f c1       	rjmp	.+542    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
     b06:	89 c0       	rjmp	.+274    	; 0xc1a <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b08:	80 38       	cpi	r24, 0x80	; 128
     b0a:	81 f0       	breq	.+32     	; 0xb2c <USB_Device_ProcessControlRequest+0x86>
     b0c:	82 38       	cpi	r24, 0x82	; 130
     b0e:	09 f0       	breq	.+2      	; 0xb12 <USB_Device_ProcessControlRequest+0x6c>
     b10:	09 c1       	rjmp	.+530    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b12:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b1c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     b20:	85 fb       	bst	r24, 5
     b22:	88 27       	eor	r24, r24
     b24:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b26:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b2c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b30:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <USB_Device_RemoteWakeupEnabled>
     b34:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b36:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b38:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b3c:	97 7f       	andi	r25, 0xF7	; 247
     b3e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b42:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     b46:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     b4a:	c4 c0       	rjmp	.+392    	; 0xcd4 <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b4c:	28 2f       	mov	r18, r24
     b4e:	2d 7f       	andi	r18, 0xFD	; 253
     b50:	09 f0       	breq	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0xae>
     b52:	e8 c0       	rjmp	.+464    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b54:	88 23       	and	r24, r24
     b56:	19 f0       	breq	.+6      	; 0xb5e <USB_Device_ProcessControlRequest+0xb8>
     b58:	82 30       	cpi	r24, 0x02	; 2
     b5a:	61 f0       	breq	.+24     	; 0xb74 <USB_Device_ProcessControlRequest+0xce>
     b5c:	e3 c0       	rjmp	.+454    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b5e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0xc2>
     b66:	de c0       	rjmp	.+444    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b68:	93 30       	cpi	r25, 0x03	; 3
     b6a:	09 f0       	breq	.+2      	; 0xb6e <USB_Device_ProcessControlRequest+0xc8>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <USB_Device_RemoteWakeupEnabled>
     b72:	2b c0       	rjmp	.+86     	; 0xbca <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b74:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     b78:	81 11       	cpse	r24, r1
     b7a:	27 c0       	rjmp	.+78     	; 0xbca <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b7c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     b80:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b82:	09 f4       	brne	.+2      	; 0xb86 <USB_Device_ProcessControlRequest+0xe0>
     b84:	cf c0       	rjmp	.+414    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b86:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b8a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b8e:	20 ff       	sbrs	r18, 0
     b90:	1c c0       	rjmp	.+56     	; 0xbca <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b92:	93 30       	cpi	r25, 0x03	; 3
     b94:	21 f4       	brne	.+8      	; 0xb9e <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b96:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b9a:	80 62       	ori	r24, 0x20	; 32
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b9e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ba2:	90 61       	ori	r25, 0x10	; 16
     ba4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <USB_Device_ProcessControlRequest+0x10e>
     bb0:	44 0f       	add	r20, r20
     bb2:	55 1f       	adc	r21, r21
     bb4:	8a 95       	dec	r24
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <USB_Device_ProcessControlRequest+0x10a>
     bb8:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     bbc:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bc0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     bc4:	88 60       	ori	r24, 0x08	; 8
     bc6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bd2:	87 7f       	andi	r24, 0xF7	; 247
     bd4:	82 c0       	rjmp	.+260    	; 0xcda <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bd6:	81 11       	cpse	r24, r1
     bd8:	a5 c0       	rjmp	.+330    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bda:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     bde:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     be0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     be4:	80 78       	andi	r24, 0x80	; 128
     be6:	81 2b       	or	r24, r17
     be8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     bec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bf0:	87 7f       	andi	r24, 0xF7	; 247
     bf2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bf6:	d1 dd       	rcall	.-1118   	; 0x79a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
     bfc:	80 ff       	sbrs	r24, 0
     bfe:	fc cf       	rjmp	.-8      	; 0xbf8 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     c00:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     c04:	80 68       	ori	r24, 0x80	; 128
     c06:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c0a:	11 11       	cpse	r17, r1
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <USB_Device_ProcessControlRequest+0x16c>
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0x16e>
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>
     c18:	85 c0       	rjmp	.+266    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c1a:	80 58       	subi	r24, 0x80	; 128
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <USB_Device_ProcessControlRequest+0x17c>
     c20:	81 c0       	rjmp	.+258    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c22:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     c26:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x3>
     c2a:	8c 3d       	cpi	r24, 0xDC	; 220
     c2c:	53 e0       	ldi	r21, 0x03	; 3
     c2e:	95 07       	cpc	r25, r21
     c30:	71 f5       	brne	.+92     	; 0xc8e <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c36:	8a e2       	ldi	r24, 0x2A	; 42
     c38:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c3a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c3c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c3e:	de 01       	movw	r26, r28
     c40:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c42:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c44:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c46:	51 e2       	ldi	r21, 0x21	; 33
     c48:	e3 2f       	mov	r30, r19
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     c50:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     c52:	20 ff       	sbrs	r18, 0
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
     c56:	e2 95       	swap	r30
     c58:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c5a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c5c:	ef 70       	andi	r30, 0x0F	; 15
     c5e:	8e 2f       	mov	r24, r30
     c60:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c62:	ea 30       	cpi	r30, 0x0A	; 10
     c64:	10 f0       	brcs	.+4      	; 0xc6a <USB_Device_ProcessControlRequest+0x1c4>
     c66:	c7 96       	adiw	r24, 0x37	; 55
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0x1c6>
     c6a:	c0 96       	adiw	r24, 0x30	; 48
     c6c:	8d 93       	st	X+, r24
     c6e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c70:	2f 5f       	subi	r18, 0xFF	; 255
     c72:	24 31       	cpi	r18, 0x14	; 20
     c74:	49 f7       	brne	.-46     	; 0xc48 <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c76:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c82:	6a e2       	ldi	r22, 0x2A	; 42
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	5c dc       	rcall	.-1864   	; 0x544 <Endpoint_Write_Control_Stream_LE>
     c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c8e:	ae 01       	movw	r20, r28
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     c98:	25 dc       	rcall	.-1974   	; 0x4e4 <CALLBACK_USB_GetDescriptor>
     c9a:	bc 01       	movw	r22, r24
     c9c:	89 2b       	or	r24, r25
     c9e:	09 f4       	brne	.+2      	; 0xca2 <USB_Device_ProcessControlRequest+0x1fc>
     ca0:	41 c0       	rjmp	.+130    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
     ca2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ca6:	97 7f       	andi	r25, 0xF7	; 247
     ca8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	a4 dc       	rcall	.-1720   	; 0x5fa <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cb6:	8b 77       	andi	r24, 0x7B	; 123
     cb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cbc:	33 c0       	rjmp	.+102    	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     cbe:	80 38       	cpi	r24, 0x80	; 128
     cc0:	89 f5       	brne	.+98     	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cc6:	87 7f       	andi	r24, 0xF7	; 247
     cc8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     ccc:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cd0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cd8:	8e 77       	andi	r24, 0x7E	; 126
     cda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cde:	5d dd       	rcall	.-1350   	; 0x79a <Endpoint_ClearStatusStage>
     ce0:	21 c0       	rjmp	.+66     	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ce2:	81 11       	cpse	r24, r1
     ce4:	1f c0       	rjmp	.+62     	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ce6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     cea:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x3>
     cee:	99 27       	eor	r25, r25
     cf0:	02 97       	sbiw	r24, 0x02	; 2
     cf2:	c4 f4       	brge	.+48     	; 0xd24 <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cfe:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     d02:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     d06:	49 dd       	rcall	.-1390   	; 0x79a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     d08:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_Device_ConfigurationNumber>
     d0c:	81 11       	cpse	r24, r1
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <USB_Device_ProcessControlRequest+0x276>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d10:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d14:	87 fd       	sbrc	r24, 7
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <USB_Device_ProcessControlRequest+0x276>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <USB_Device_ProcessControlRequest+0x278>
     d1c:	84 e0       	ldi	r24, 0x04	; 4
     d1e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     d22:	da db       	rcall	.-2124   	; 0x4d8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d28:	83 ff       	sbrs	r24, 3
     d2a:	0a c0       	rjmp	.+20     	; 0xd40 <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d30:	87 7f       	andi	r24, 0xF7	; 247
     d32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d36:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     d3a:	80 62       	ori	r24, 0x20	; 32
     d3c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d40:	aa 96       	adiw	r28, 0x2a	; 42
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	08 95       	ret

00000d54 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     d54:	08 95       	ret

00000d56 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d56:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d58:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     d5c:	88 23       	and	r24, r24
     d5e:	99 f0       	breq	.+38     	; 0xd86 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d60:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     d64:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d66:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     d6a:	89 2f       	mov	r24, r25
     d6c:	81 70       	andi	r24, 0x01	; 1
     d6e:	90 fd       	sbrc	r25, 0
     d70:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d72:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d74:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d7c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d7e:	93 de       	rcall	.-730    	; 0xaa6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d80:	cf 70       	andi	r28, 0x0F	; 15
     d82:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	fc 01       	movw	r30, r24
     d92:	70 96       	adiw	r30, 0x10	; 16
     d94:	8b e0       	ldi	r24, 0x0B	; 11
     d96:	df 01       	movw	r26, r30
     d98:	1d 92       	st	X+, r1
     d9a:	8a 95       	dec	r24
     d9c:	e9 f7       	brne	.-6      	; 0xd98 <CDC_Device_ConfigureEndpoints+0xe>
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	8c 83       	std	Y+4, r24	; 0x04
     da2:	89 87       	std	Y+9, r24	; 0x09
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	8e 87       	std	Y+14, r24	; 0x0e
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	b8 dc       	rcall	.-1680   	; 0x720 <Endpoint_ConfigureEndpointTable>
     db0:	88 23       	and	r24, r24
     db2:	61 f0       	breq	.+24     	; 0xdcc <CDC_Device_ConfigureEndpoints+0x42>
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	ce 01       	movw	r24, r28
     db8:	06 96       	adiw	r24, 0x06	; 6
     dba:	b2 dc       	rcall	.-1692   	; 0x720 <Endpoint_ConfigureEndpointTable>
     dbc:	88 23       	and	r24, r24
     dbe:	31 f0       	breq	.+12     	; 0xdcc <CDC_Device_ConfigureEndpoints+0x42>
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	ce 01       	movw	r24, r28
     dc4:	0b 96       	adiw	r24, 0x0b	; 11
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	aa cc       	rjmp	.-1708   	; 0x720 <Endpoint_ConfigureEndpointTable>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <CDC_Device_SendByte>:
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     dde:	24 30       	cpi	r18, 0x04	; 4
     de0:	f9 f4       	brne	.+62     	; 0xe20 <CDC_Device_SendByte+0x4c>
     de2:	fc 01       	movw	r30, r24
     de4:	04 89       	ldd	r16, Z+20	; 0x14
     de6:	15 89       	ldd	r17, Z+21	; 0x15
     de8:	26 89       	ldd	r18, Z+22	; 0x16
     dea:	37 89       	ldd	r19, Z+23	; 0x17
     dec:	01 2b       	or	r16, r17
     dee:	02 2b       	or	r16, r18
     df0:	03 2b       	or	r16, r19
     df2:	b1 f0       	breq	.+44     	; 0xe20 <CDC_Device_SendByte+0x4c>
     df4:	c6 2f       	mov	r28, r22
     df6:	81 81       	ldd	r24, Z+1	; 0x01
     df8:	8f 70       	andi	r24, 0x0F	; 15
     dfa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     dfe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e02:	85 ff       	sbrs	r24, 5
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <CDC_Device_SendByte+0x3a>
     e06:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0a c0       	rjmp	.+20     	; 0xe22 <CDC_Device_SendByte+0x4e>
     e0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e12:	8e 77       	andi	r24, 0x7E	; 126
     e14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e18:	df dc       	rcall	.-1602   	; 0x7d8 <Endpoint_WaitUntilReady>
     e1a:	88 23       	and	r24, r24
     e1c:	a1 f3       	breq	.-24     	; 0xe06 <CDC_Device_SendByte+0x32>
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <CDC_Device_SendByte+0x4e>
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <CDC_Device_putchar>:
     e2a:	fb 01       	movw	r30, r22
     e2c:	68 2f       	mov	r22, r24
     e2e:	84 85       	ldd	r24, Z+12	; 0x0c
     e30:	95 85       	ldd	r25, Z+13	; 0x0d
     e32:	d0 df       	rcall	.-96     	; 0xdd4 <CDC_Device_SendByte>
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 11       	cpse	r24, r1
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <CDC_Device_putchar+0x16>
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	88 27       	eor	r24, r24
     e42:	99 27       	eor	r25, r25
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	08 95       	ret

00000e4a <CDC_Device_Flush>:
     e4a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     e4e:	24 30       	cpi	r18, 0x04	; 4
     e50:	21 f5       	brne	.+72     	; 0xe9a <CDC_Device_Flush+0x50>
     e52:	fc 01       	movw	r30, r24
     e54:	44 89       	ldd	r20, Z+20	; 0x14
     e56:	55 89       	ldd	r21, Z+21	; 0x15
     e58:	66 89       	ldd	r22, Z+22	; 0x16
     e5a:	77 89       	ldd	r23, Z+23	; 0x17
     e5c:	45 2b       	or	r20, r21
     e5e:	46 2b       	or	r20, r22
     e60:	47 2b       	or	r20, r23
     e62:	d9 f0       	breq	.+54     	; 0xe9a <CDC_Device_Flush+0x50>
     e64:	81 81       	ldd	r24, Z+1	; 0x01
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     e6c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     e70:	88 23       	and	r24, r24
     e72:	89 f0       	breq	.+34     	; 0xe96 <CDC_Device_Flush+0x4c>
     e74:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e7c:	8e 77       	andi	r24, 0x7E	; 126
     e7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e82:	95 fd       	sbrc	r25, 5
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <CDC_Device_Flush+0x4c>
     e86:	a8 dc       	rcall	.-1712   	; 0x7d8 <Endpoint_WaitUntilReady>
     e88:	81 11       	cpse	r24, r1
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <CDC_Device_Flush+0x52>
     e8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e90:	8e 77       	andi	r24, 0x7E	; 126
     e92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	08 95       	ret
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	08 95       	ret

00000e9e <CDC_Device_USBTask>:
     e9e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     ea2:	24 30       	cpi	r18, 0x04	; 4
     ea4:	89 f4       	brne	.+34     	; 0xec8 <CDC_Device_USBTask+0x2a>
     ea6:	fc 01       	movw	r30, r24
     ea8:	44 89       	ldd	r20, Z+20	; 0x14
     eaa:	55 89       	ldd	r21, Z+21	; 0x15
     eac:	66 89       	ldd	r22, Z+22	; 0x16
     eae:	77 89       	ldd	r23, Z+23	; 0x17
     eb0:	45 2b       	or	r20, r21
     eb2:	46 2b       	or	r20, r22
     eb4:	47 2b       	or	r20, r23
     eb6:	41 f0       	breq	.+16     	; 0xec8 <CDC_Device_USBTask+0x2a>
     eb8:	21 81       	ldd	r18, Z+1	; 0x01
     eba:	2f 70       	andi	r18, 0x0F	; 15
     ebc:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     ec0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ec4:	20 fd       	sbrc	r18, 0
     ec6:	c1 cf       	rjmp	.-126    	; 0xe4a <CDC_Device_Flush>
     ec8:	08 95       	ret

00000eca <CDC_Device_ReceiveByte>:
     eca:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     ece:	24 30       	cpi	r18, 0x04	; 4
     ed0:	19 f0       	breq	.+6      	; 0xed8 <CDC_Device_ReceiveByte+0xe>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	9f ef       	ldi	r25, 0xFF	; 255
     ed6:	08 95       	ret
     ed8:	fc 01       	movw	r30, r24
     eda:	44 89       	ldd	r20, Z+20	; 0x14
     edc:	55 89       	ldd	r21, Z+21	; 0x15
     ede:	66 89       	ldd	r22, Z+22	; 0x16
     ee0:	77 89       	ldd	r23, Z+23	; 0x17
     ee2:	45 2b       	or	r20, r21
     ee4:	46 2b       	or	r20, r22
     ee6:	47 2b       	or	r20, r23
     ee8:	a1 f3       	breq	.-24     	; 0xed2 <CDC_Device_ReceiveByte+0x8>
     eea:	86 81       	ldd	r24, Z+6	; 0x06
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     ef2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ef6:	82 ff       	sbrs	r24, 2
     ef8:	ec cf       	rjmp	.-40     	; 0xed2 <CDC_Device_ReceiveByte+0x8>
     efa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     efe:	88 23       	and	r24, r24
     f00:	21 f0       	breq	.+8      	; 0xf0a <CDC_Device_ReceiveByte+0x40>
     f02:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <CDC_Device_ReceiveByte+0x44>
     f0a:	2f ef       	ldi	r18, 0xFF	; 255
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     f12:	81 11       	cpse	r24, r1
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <CDC_Device_ReceiveByte+0x56>
     f16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f1a:	8b 77       	andi	r24, 0x7B	; 123
     f1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f20:	c9 01       	movw	r24, r18
     f22:	08 95       	ret

00000f24 <CDC_Device_getchar>:
     f24:	fc 01       	movw	r30, r24
     f26:	84 85       	ldd	r24, Z+12	; 0x0c
     f28:	95 85       	ldd	r25, Z+13	; 0x0d
     f2a:	cf df       	rcall	.-98     	; 0xeca <CDC_Device_ReceiveByte>
     f2c:	97 ff       	sbrs	r25, 7
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <CDC_Device_getchar+0x10>
     f30:	8e ef       	ldi	r24, 0xFE	; 254
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	08 95       	ret

00000f36 <CDC_Device_CreateStream>:
     f36:	fb 01       	movw	r30, r22
     f38:	2e e0       	ldi	r18, 0x0E	; 14
     f3a:	db 01       	movw	r26, r22
     f3c:	1d 92       	st	X+, r1
     f3e:	2a 95       	dec	r18
     f40:	e9 f7       	brne	.-6      	; 0xf3c <CDC_Device_CreateStream+0x6>
     f42:	23 e0       	ldi	r18, 0x03	; 3
     f44:	23 83       	std	Z+3, r18	; 0x03
     f46:	25 e1       	ldi	r18, 0x15	; 21
     f48:	37 e0       	ldi	r19, 0x07	; 7
     f4a:	31 87       	std	Z+9, r19	; 0x09
     f4c:	20 87       	std	Z+8, r18	; 0x08
     f4e:	22 e9       	ldi	r18, 0x92	; 146
     f50:	37 e0       	ldi	r19, 0x07	; 7
     f52:	33 87       	std	Z+11, r19	; 0x0b
     f54:	22 87       	std	Z+10, r18	; 0x0a
     f56:	95 87       	std	Z+13, r25	; 0x0d
     f58:	84 87       	std	Z+12, r24	; 0x0c
     f5a:	08 95       	ret

00000f5c <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     f5c:	08 95       	ret

00000f5e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     f68:	83 ff       	sbrs	r24, 3
     f6a:	a6 c0       	rjmp	.+332    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f6c:	88 81       	ld	r24, Y
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     f74:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x5>
     f78:	28 17       	cp	r18, r24
     f7a:	39 07       	cpc	r19, r25
     f7c:	09 f0       	breq	.+2      	; 0xf80 <CDC_Device_ProcessControlRequest+0x22>
     f7e:	9c c0       	rjmp	.+312    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     f80:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest+0x1>
     f84:	81 32       	cpi	r24, 0x21	; 33
     f86:	61 f0       	breq	.+24     	; 0xfa0 <CDC_Device_ProcessControlRequest+0x42>
     f88:	20 f4       	brcc	.+8      	; 0xf92 <CDC_Device_ProcessControlRequest+0x34>
     f8a:	80 32       	cpi	r24, 0x20	; 32
     f8c:	09 f4       	brne	.+2      	; 0xf90 <CDC_Device_ProcessControlRequest+0x32>
     f8e:	3e c0       	rjmp	.+124    	; 0x100c <CDC_Device_ProcessControlRequest+0xae>
     f90:	93 c0       	rjmp	.+294    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
     f92:	82 32       	cpi	r24, 0x22	; 34
     f94:	09 f4       	brne	.+2      	; 0xf98 <CDC_Device_ProcessControlRequest+0x3a>
     f96:	6c c0       	rjmp	.+216    	; 0x1070 <CDC_Device_ProcessControlRequest+0x112>
     f98:	83 32       	cpi	r24, 0x23	; 35
     f9a:	09 f4       	brne	.+2      	; 0xf9e <CDC_Device_ProcessControlRequest+0x40>
     f9c:	7d c0       	rjmp	.+250    	; 0x1098 <CDC_Device_ProcessControlRequest+0x13a>
     f9e:	8c c0       	rjmp	.+280    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fa0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
     fa4:	81 3a       	cpi	r24, 0xA1	; 161
     fa6:	09 f0       	breq	.+2      	; 0xfaa <CDC_Device_ProcessControlRequest+0x4c>
     fa8:	87 c0       	rjmp	.+270    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     faa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fae:	87 7f       	andi	r24, 0xF7	; 247
     fb0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     fb8:	80 ff       	sbrs	r24, 0
     fba:	fc cf       	rjmp	.-8      	; 0xfb4 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     fbc:	8c 89       	ldd	r24, Y+20	; 0x14
     fbe:	9d 89       	ldd	r25, Y+21	; 0x15
     fc0:	ae 89       	ldd	r26, Y+22	; 0x16
     fc2:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     fc4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     fc8:	49 2f       	mov	r20, r25
     fca:	5a 2f       	mov	r21, r26
     fcc:	6b 2f       	mov	r22, r27
     fce:	77 27       	eor	r23, r23
     fd0:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
     fd4:	ad 01       	movw	r20, r26
     fd6:	66 27       	eor	r22, r22
     fd8:	77 27       	eor	r23, r23
     fda:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
     fde:	8b 2f       	mov	r24, r27
     fe0:	99 27       	eor	r25, r25
     fe2:	aa 27       	eor	r26, r26
     fe4:	bb 27       	eor	r27, r27
     fe6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     fea:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ff0:	89 8d       	ldd	r24, Y+25	; 0x19
     ff2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     ff6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ff8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ffc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1000:	8e 77       	andi	r24, 0x7E	; 126
    1002:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    100a:	c7 cb       	rjmp	.-2162   	; 0x79a <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    100c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
    1010:	81 32       	cpi	r24, 0x21	; 33
    1012:	09 f0       	breq	.+2      	; 0x1016 <CDC_Device_ProcessControlRequest+0xb8>
    1014:	51 c0       	rjmp	.+162    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1016:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    101a:	87 7f       	andi	r24, 0xF7	; 247
    101c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1020:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1024:	82 fd       	sbrc	r24, 2
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1028:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
    102c:	81 11       	cpse	r24, r1
    102e:	f8 cf       	rjmp	.-16     	; 0x1020 <CDC_Device_ProcessControlRequest+0xc2>
    1030:	43 c0       	rjmp	.+134    	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1032:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
    1036:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
    103a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
    103e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1042:	3c 8b       	std	Y+20, r19	; 0x14
    1044:	2d 8b       	std	Y+21, r18	; 0x15
    1046:	9e 8b       	std	Y+22, r25	; 0x16
    1048:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    104a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    104e:	88 8f       	std	Y+24, r24	; 0x18
    1050:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1054:	89 8f       	std	Y+25, r24	; 0x19
    1056:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    105a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    105c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1060:	8b 77       	andi	r24, 0x7B	; 123
    1062:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1066:	99 db       	rcall	.-2254   	; 0x79a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1068:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    106a:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    106c:	cf 91       	pop	r28
    106e:	76 cf       	rjmp	.-276    	; 0xf5c <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1070:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
    1074:	81 32       	cpi	r24, 0x21	; 33
    1076:	01 f5       	brne	.+64     	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1078:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1082:	8b db       	rcall	.-2282   	; 0x79a <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1084:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
    1088:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x3>
    108c:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    108e:	88 8b       	std	Y+16, r24	; 0x10
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1090:	ce 01       	movw	r24, r28
    1092:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1094:	cf 91       	pop	r28
    1096:	62 cf       	rjmp	.-316    	; 0xf5c <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1098:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
    109c:	81 32       	cpi	r24, 0x21	; 33
    109e:	61 f4       	brne	.+24     	; 0x10b8 <CDC_Device_ProcessControlRequest+0x15a>
    10a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    10aa:	77 db       	rcall	.-2322   	; 0x79a <Endpoint_ClearStatusStage>
    10ac:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
			}

			break;
	}
}
    10b0:	ce 01       	movw	r24, r28
    10b2:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    10b4:	cf 91       	pop	r28
    10b6:	52 cf       	rjmp	.-348    	; 0xf5c <CDC_Device_Event_Stub>
			}

			break;
	}
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <__divmodhi4>:
    10be:	97 fb       	bst	r25, 7
    10c0:	07 2e       	mov	r0, r23
    10c2:	16 f4       	brtc	.+4      	; 0x10c8 <__divmodhi4+0xa>
    10c4:	00 94       	com	r0
    10c6:	06 d0       	rcall	.+12     	; 0x10d4 <__divmodhi4_neg1>
    10c8:	77 fd       	sbrc	r23, 7
    10ca:	08 d0       	rcall	.+16     	; 0x10dc <__divmodhi4_neg2>
    10cc:	0b d0       	rcall	.+22     	; 0x10e4 <__udivmodhi4>
    10ce:	07 fc       	sbrc	r0, 7
    10d0:	05 d0       	rcall	.+10     	; 0x10dc <__divmodhi4_neg2>
    10d2:	3e f4       	brtc	.+14     	; 0x10e2 <__divmodhi4_exit>

000010d4 <__divmodhi4_neg1>:
    10d4:	90 95       	com	r25
    10d6:	81 95       	neg	r24
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	08 95       	ret

000010dc <__divmodhi4_neg2>:
    10dc:	70 95       	com	r23
    10de:	61 95       	neg	r22
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255

000010e2 <__divmodhi4_exit>:
    10e2:	08 95       	ret

000010e4 <__udivmodhi4>:
    10e4:	aa 1b       	sub	r26, r26
    10e6:	bb 1b       	sub	r27, r27
    10e8:	51 e1       	ldi	r21, 0x11	; 17
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <__udivmodhi4_ep>

000010ec <__udivmodhi4_loop>:
    10ec:	aa 1f       	adc	r26, r26
    10ee:	bb 1f       	adc	r27, r27
    10f0:	a6 17       	cp	r26, r22
    10f2:	b7 07       	cpc	r27, r23
    10f4:	10 f0       	brcs	.+4      	; 0x10fa <__udivmodhi4_ep>
    10f6:	a6 1b       	sub	r26, r22
    10f8:	b7 0b       	sbc	r27, r23

000010fa <__udivmodhi4_ep>:
    10fa:	88 1f       	adc	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	5a 95       	dec	r21
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__udivmodhi4_loop>
    1102:	80 95       	com	r24
    1104:	90 95       	com	r25
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	08 95       	ret

0000110c <strtol>:
    110c:	a3 e0       	ldi	r26, 0x03	; 3
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e8       	ldi	r30, 0x8B	; 139
    1112:	f8 e0       	ldi	r31, 0x08	; 8
    1114:	a6 c4       	rjmp	.+2380   	; 0x1a62 <__prologue_saves__>
    1116:	5c 01       	movw	r10, r24
    1118:	6b 01       	movw	r12, r22
    111a:	7a 01       	movw	r14, r20
    111c:	61 15       	cp	r22, r1
    111e:	71 05       	cpc	r23, r1
    1120:	19 f0       	breq	.+6      	; 0x1128 <strtol+0x1c>
    1122:	fb 01       	movw	r30, r22
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24
    1128:	e1 14       	cp	r14, r1
    112a:	f1 04       	cpc	r15, r1
    112c:	29 f0       	breq	.+10     	; 0x1138 <strtol+0x2c>
    112e:	c7 01       	movw	r24, r14
    1130:	02 97       	sbiw	r24, 0x02	; 2
    1132:	83 97       	sbiw	r24, 0x23	; 35
    1134:	08 f0       	brcs	.+2      	; 0x1138 <strtol+0x2c>
    1136:	fd c0       	rjmp	.+506    	; 0x1332 <strtol+0x226>
    1138:	85 01       	movw	r16, r10
    113a:	0f 5f       	subi	r16, 0xFF	; 255
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	f5 01       	movw	r30, r10
    1140:	f0 81       	ld	r31, Z
    1142:	fa 83       	std	Y+2, r31	; 0x02
    1144:	8f 2f       	mov	r24, r31
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	09 d1       	rcall	.+530    	; 0x135c <isspace>
    114a:	89 2b       	or	r24, r25
    114c:	11 f0       	breq	.+4      	; 0x1152 <strtol+0x46>
    114e:	58 01       	movw	r10, r16
    1150:	f3 cf       	rjmp	.-26     	; 0x1138 <strtol+0x2c>
    1152:	2a 81       	ldd	r18, Y+2	; 0x02
    1154:	2d 32       	cpi	r18, 0x2D	; 45
    1156:	41 f4       	brne	.+16     	; 0x1168 <strtol+0x5c>
    1158:	0f 5f       	subi	r16, 0xFF	; 255
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	f5 01       	movw	r30, r10
    115e:	f1 81       	ldd	r31, Z+1	; 0x01
    1160:	fa 83       	std	Y+2, r31	; 0x02
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	2b 83       	std	Y+3, r18	; 0x03
    1166:	0a c0       	rjmp	.+20     	; 0x117c <strtol+0x70>
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	8b 32       	cpi	r24, 0x2B	; 43
    116c:	31 f4       	brne	.+12     	; 0x117a <strtol+0x6e>
    116e:	85 01       	movw	r16, r10
    1170:	0e 5f       	subi	r16, 0xFE	; 254
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	f5 01       	movw	r30, r10
    1176:	f1 81       	ldd	r31, Z+1	; 0x01
    1178:	fa 83       	std	Y+2, r31	; 0x02
    117a:	1b 82       	std	Y+3, r1	; 0x03
    117c:	e1 14       	cp	r14, r1
    117e:	f1 04       	cpc	r15, r1
    1180:	f9 f0       	breq	.+62     	; 0x11c0 <strtol+0xb4>
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	e2 16       	cp	r14, r18
    1186:	f1 04       	cpc	r15, r1
    1188:	19 f4       	brne	.+6      	; 0x1190 <strtol+0x84>
    118a:	42 c0       	rjmp	.+132    	; 0x1210 <strtol+0x104>
    118c:	f0 e3       	ldi	r31, 0x30	; 48
    118e:	fa 83       	std	Y+2, r31	; 0x02
    1190:	88 e0       	ldi	r24, 0x08	; 8
    1192:	e8 16       	cp	r14, r24
    1194:	f1 04       	cpc	r15, r1
    1196:	31 f1       	breq	.+76     	; 0x11e4 <strtol+0xd8>
    1198:	54 f4       	brge	.+20     	; 0x11ae <strtol+0xa2>
    119a:	e2 e0       	ldi	r30, 0x02	; 2
    119c:	ee 16       	cp	r14, r30
    119e:	f1 04       	cpc	r15, r1
    11a0:	51 f5       	brne	.+84     	; 0x11f6 <strtol+0xea>
    11a2:	81 2c       	mov	r8, r1
    11a4:	91 2c       	mov	r9, r1
    11a6:	a1 2c       	mov	r10, r1
    11a8:	50 e4       	ldi	r21, 0x40	; 64
    11aa:	b5 2e       	mov	r11, r21
    11ac:	48 c0       	rjmp	.+144    	; 0x123e <strtol+0x132>
    11ae:	fa e0       	ldi	r31, 0x0A	; 10
    11b0:	ef 16       	cp	r14, r31
    11b2:	f1 04       	cpc	r15, r1
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <strtol+0xba>
    11b6:	20 e1       	ldi	r18, 0x10	; 16
    11b8:	e2 16       	cp	r14, r18
    11ba:	f1 04       	cpc	r15, r1
    11bc:	e1 f4       	brne	.+56     	; 0x11f6 <strtol+0xea>
    11be:	3a c0       	rjmp	.+116    	; 0x1234 <strtol+0x128>
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 33       	cpi	r24, 0x30	; 48
    11c4:	41 f1       	breq	.+80     	; 0x1216 <strtol+0x10a>
    11c6:	3a e0       	ldi	r19, 0x0A	; 10
    11c8:	e3 2e       	mov	r14, r19
    11ca:	f1 2c       	mov	r15, r1
    11cc:	4c ec       	ldi	r20, 0xCC	; 204
    11ce:	84 2e       	mov	r8, r20
    11d0:	98 2c       	mov	r9, r8
    11d2:	a8 2c       	mov	r10, r8
    11d4:	4c e0       	ldi	r20, 0x0C	; 12
    11d6:	b4 2e       	mov	r11, r20
    11d8:	32 c0       	rjmp	.+100    	; 0x123e <strtol+0x132>
    11da:	e1 14       	cp	r14, r1
    11dc:	f1 04       	cpc	r15, r1
    11de:	b1 f6       	brne	.-84     	; 0x118c <strtol+0x80>
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	8a 83       	std	Y+2, r24	; 0x02
    11e4:	98 e0       	ldi	r25, 0x08	; 8
    11e6:	e9 2e       	mov	r14, r25
    11e8:	f1 2c       	mov	r15, r1
    11ea:	81 2c       	mov	r8, r1
    11ec:	91 2c       	mov	r9, r1
    11ee:	a1 2c       	mov	r10, r1
    11f0:	20 e1       	ldi	r18, 0x10	; 16
    11f2:	b2 2e       	mov	r11, r18
    11f4:	24 c0       	rjmp	.+72     	; 0x123e <strtol+0x132>
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e8       	ldi	r25, 0x80	; 128
    11fe:	97 01       	movw	r18, r14
    1200:	0f 2c       	mov	r0, r15
    1202:	00 0c       	add	r0, r0
    1204:	44 0b       	sbc	r20, r20
    1206:	55 0b       	sbc	r21, r21
    1208:	0a d4       	rcall	.+2068   	; 0x1a1e <__udivmodsi4>
    120a:	49 01       	movw	r8, r18
    120c:	5a 01       	movw	r10, r20
    120e:	17 c0       	rjmp	.+46     	; 0x123e <strtol+0x132>
    1210:	2a 81       	ldd	r18, Y+2	; 0x02
    1212:	20 33       	cpi	r18, 0x30	; 48
    1214:	79 f4       	brne	.+30     	; 0x1234 <strtol+0x128>
    1216:	f8 01       	movw	r30, r16
    1218:	80 81       	ld	r24, Z
    121a:	8f 7d       	andi	r24, 0xDF	; 223
    121c:	88 35       	cpi	r24, 0x58	; 88
    121e:	e9 f6       	brne	.-70     	; 0x11da <strtol+0xce>
    1220:	f1 81       	ldd	r31, Z+1	; 0x01
    1222:	fa 83       	std	Y+2, r31	; 0x02
    1224:	0e 5f       	subi	r16, 0xFE	; 254
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	22 60       	ori	r18, 0x02	; 2
    122c:	2b 83       	std	Y+3, r18	; 0x03
    122e:	60 e1       	ldi	r22, 0x10	; 16
    1230:	e6 2e       	mov	r14, r22
    1232:	f1 2c       	mov	r15, r1
    1234:	81 2c       	mov	r8, r1
    1236:	91 2c       	mov	r9, r1
    1238:	a1 2c       	mov	r10, r1
    123a:	88 e0       	ldi	r24, 0x08	; 8
    123c:	b8 2e       	mov	r11, r24
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	a9 01       	movw	r20, r18
    1246:	27 01       	movw	r4, r14
    1248:	0f 2c       	mov	r0, r15
    124a:	00 0c       	add	r0, r0
    124c:	66 08       	sbc	r6, r6
    124e:	77 08       	sbc	r7, r7
    1250:	18 01       	movw	r2, r16
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	90 53       	subi	r25, 0x30	; 48
    1256:	99 83       	std	Y+1, r25	; 0x01
    1258:	9a 30       	cpi	r25, 0x0A	; 10
    125a:	78 f0       	brcs	.+30     	; 0x127a <strtol+0x16e>
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	91 54       	subi	r25, 0x41	; 65
    1260:	9a 31       	cpi	r25, 0x1A	; 26
    1262:	20 f4       	brcc	.+8      	; 0x126c <strtol+0x160>
    1264:	ea 81       	ldd	r30, Y+2	; 0x02
    1266:	e7 53       	subi	r30, 0x37	; 55
    1268:	e9 83       	std	Y+1, r30	; 0x01
    126a:	07 c0       	rjmp	.+14     	; 0x127a <strtol+0x16e>
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	91 56       	subi	r25, 0x61	; 97
    1270:	9a 31       	cpi	r25, 0x1A	; 26
    1272:	48 f5       	brcc	.+82     	; 0x12c6 <strtol+0x1ba>
    1274:	fa 81       	ldd	r31, Y+2	; 0x02
    1276:	f7 55       	subi	r31, 0x57	; 87
    1278:	f9 83       	std	Y+1, r31	; 0x01
    127a:	99 81       	ldd	r25, Y+1	; 0x01
    127c:	69 2f       	mov	r22, r25
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	6e 15       	cp	r22, r14
    1282:	7f 05       	cpc	r23, r15
    1284:	04 f5       	brge	.+64     	; 0x12c6 <strtol+0x1ba>
    1286:	87 fd       	sbrc	r24, 7
    1288:	18 c0       	rjmp	.+48     	; 0x12ba <strtol+0x1ae>
    128a:	82 16       	cp	r8, r18
    128c:	93 06       	cpc	r9, r19
    128e:	a4 06       	cpc	r10, r20
    1290:	b5 06       	cpc	r11, r21
    1292:	80 f0       	brcs	.+32     	; 0x12b4 <strtol+0x1a8>
    1294:	c3 01       	movw	r24, r6
    1296:	b2 01       	movw	r22, r4
    1298:	a9 d3       	rcall	.+1874   	; 0x19ec <__mulsi3>
    129a:	9b 01       	movw	r18, r22
    129c:	ac 01       	movw	r20, r24
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	2e 0f       	add	r18, r30
    12a2:	31 1d       	adc	r19, r1
    12a4:	41 1d       	adc	r20, r1
    12a6:	51 1d       	adc	r21, r1
    12a8:	21 30       	cpi	r18, 0x01	; 1
    12aa:	31 05       	cpc	r19, r1
    12ac:	41 05       	cpc	r20, r1
    12ae:	f0 e8       	ldi	r31, 0x80	; 128
    12b0:	5f 07       	cpc	r21, r31
    12b2:	10 f0       	brcs	.+4      	; 0x12b8 <strtol+0x1ac>
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <strtol+0x1ae>
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0f 5f       	subi	r16, 0xFF	; 255
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	f1 01       	movw	r30, r2
    12c0:	f0 81       	ld	r31, Z
    12c2:	fa 83       	std	Y+2, r31	; 0x02
    12c4:	c5 cf       	rjmp	.-118    	; 0x1250 <strtol+0x144>
    12c6:	9b 81       	ldd	r25, Y+3	; 0x03
    12c8:	91 70       	andi	r25, 0x01	; 1
    12ca:	c1 14       	cp	r12, r1
    12cc:	d1 04       	cpc	r13, r1
    12ce:	89 f0       	breq	.+34     	; 0x12f2 <strtol+0x1e6>
    12d0:	88 23       	and	r24, r24
    12d2:	31 f0       	breq	.+12     	; 0x12e0 <strtol+0x1d4>
    12d4:	01 50       	subi	r16, 0x01	; 1
    12d6:	11 09       	sbc	r17, r1
    12d8:	f6 01       	movw	r30, r12
    12da:	11 83       	std	Z+1, r17	; 0x01
    12dc:	00 83       	st	Z, r16
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <strtol+0x1e6>
    12e0:	fb 81       	ldd	r31, Y+3	; 0x03
    12e2:	f1 ff       	sbrs	r31, 1
    12e4:	1a c0       	rjmp	.+52     	; 0x131a <strtol+0x20e>
    12e6:	02 50       	subi	r16, 0x02	; 2
    12e8:	11 09       	sbc	r17, r1
    12ea:	f6 01       	movw	r30, r12
    12ec:	11 83       	std	Z+1, r17	; 0x01
    12ee:	00 83       	st	Z, r16
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <strtol+0x20e>
    12f2:	87 ff       	sbrs	r24, 7
    12f4:	12 c0       	rjmp	.+36     	; 0x131a <strtol+0x20e>
    12f6:	99 23       	and	r25, r25
    12f8:	29 f0       	breq	.+10     	; 0x1304 <strtol+0x1f8>
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e8       	ldi	r21, 0x80	; 128
    1302:	04 c0       	rjmp	.+8      	; 0x130c <strtol+0x200>
    1304:	2f ef       	ldi	r18, 0xFF	; 255
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f ef       	ldi	r20, 0xFF	; 255
    130a:	5f e7       	ldi	r21, 0x7F	; 127
    130c:	82 e2       	ldi	r24, 0x22	; 34
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <errno+0x1>
    1314:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <errno>
    1318:	09 c0       	rjmp	.+18     	; 0x132c <strtol+0x220>
    131a:	99 23       	and	r25, r25
    131c:	79 f0       	breq	.+30     	; 0x133c <strtol+0x230>
    131e:	50 95       	com	r21
    1320:	40 95       	com	r20
    1322:	30 95       	com	r19
    1324:	21 95       	neg	r18
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	4f 4f       	sbci	r20, 0xFF	; 255
    132a:	5f 4f       	sbci	r21, 0xFF	; 255
    132c:	b9 01       	movw	r22, r18
    132e:	ca 01       	movw	r24, r20
    1330:	12 c0       	rjmp	.+36     	; 0x1356 <strtol+0x24a>
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0d c0       	rjmp	.+26     	; 0x1356 <strtol+0x24a>
    133c:	57 ff       	sbrs	r21, 7
    133e:	f6 cf       	rjmp	.-20     	; 0x132c <strtol+0x220>
    1340:	82 e2       	ldi	r24, 0x22	; 34
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <errno+0x1>
    1348:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <errno>
    134c:	2f ef       	ldi	r18, 0xFF	; 255
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f ef       	ldi	r20, 0xFF	; 255
    1352:	5f e7       	ldi	r21, 0x7F	; 127
    1354:	eb cf       	rjmp	.-42     	; 0x132c <strtol+0x220>
    1356:	23 96       	adiw	r28, 0x03	; 3
    1358:	e2 e1       	ldi	r30, 0x12	; 18
    135a:	9f c3       	rjmp	.+1854   	; 0x1a9a <__epilogue_restores__>

0000135c <isspace>:
    135c:	91 11       	cpse	r25, r1
    135e:	4a c2       	rjmp	.+1172   	; 0x17f4 <__ctype_isfalse>
    1360:	80 32       	cpi	r24, 0x20	; 32
    1362:	19 f0       	breq	.+6      	; 0x136a <isspace+0xe>
    1364:	89 50       	subi	r24, 0x09	; 9
    1366:	85 50       	subi	r24, 0x05	; 5
    1368:	d0 f7       	brcc	.-12     	; 0x135e <isspace+0x2>
    136a:	08 95       	ret

0000136c <fgets>:
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb eb       	ldi	r30, 0xBB	; 187
    1372:	f9 e0       	ldi	r31, 0x09	; 9
    1374:	80 c3       	rjmp	.+1792   	; 0x1a76 <__prologue_saves__+0x14>
    1376:	fa 01       	movw	r30, r20
    1378:	23 81       	ldd	r18, Z+3	; 0x03
    137a:	20 fd       	sbrc	r18, 0
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <fgets+0x18>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	19 c0       	rjmp	.+50     	; 0x13b6 <fgets+0x4a>
    1384:	16 16       	cp	r1, r22
    1386:	17 06       	cpc	r1, r23
    1388:	d4 f7       	brge	.-12     	; 0x137e <fgets+0x12>
    138a:	7a 01       	movw	r14, r20
    138c:	8c 01       	movw	r16, r24
    138e:	eb 01       	movw	r28, r22
    1390:	6c 01       	movw	r12, r24
    1392:	c1 30       	cpi	r28, 0x01	; 1
    1394:	d1 05       	cpc	r29, r1
    1396:	61 f0       	breq	.+24     	; 0x13b0 <fgets+0x44>
    1398:	c7 01       	movw	r24, r14
    139a:	45 d2       	rcall	.+1162   	; 0x1826 <fgetc>
    139c:	8f 3f       	cpi	r24, 0xFF	; 255
    139e:	ff ef       	ldi	r31, 0xFF	; 255
    13a0:	9f 07       	cpc	r25, r31
    13a2:	69 f3       	breq	.-38     	; 0x137e <fgets+0x12>
    13a4:	f6 01       	movw	r30, r12
    13a6:	81 93       	st	Z+, r24
    13a8:	6f 01       	movw	r12, r30
    13aa:	21 97       	sbiw	r28, 0x01	; 1
    13ac:	0a 97       	sbiw	r24, 0x0a	; 10
    13ae:	89 f7       	brne	.-30     	; 0x1392 <fgets+0x26>
    13b0:	f6 01       	movw	r30, r12
    13b2:	10 82       	st	Z, r1
    13b4:	c8 01       	movw	r24, r16
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	e8 e0       	ldi	r30, 0x08	; 8
    13bc:	78 c3       	rjmp	.+1776   	; 0x1aae <__epilogue_restores__+0x14>

000013be <fputs>:
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	db 01       	movw	r26, r22
    13cc:	13 96       	adiw	r26, 0x03	; 3
    13ce:	2c 91       	ld	r18, X
    13d0:	21 ff       	sbrs	r18, 1
    13d2:	18 c0       	rjmp	.+48     	; 0x1404 <fputs+0x46>
    13d4:	8b 01       	movw	r16, r22
    13d6:	7c 01       	movw	r14, r24
    13d8:	d0 e0       	ldi	r29, 0x00	; 0
    13da:	c0 e0       	ldi	r28, 0x00	; 0
    13dc:	f7 01       	movw	r30, r14
    13de:	81 91       	ld	r24, Z+
    13e0:	7f 01       	movw	r14, r30
    13e2:	88 23       	and	r24, r24
    13e4:	61 f0       	breq	.+24     	; 0x13fe <fputs+0x40>
    13e6:	d8 01       	movw	r26, r16
    13e8:	18 96       	adiw	r26, 0x08	; 8
    13ea:	ed 91       	ld	r30, X+
    13ec:	fc 91       	ld	r31, X
    13ee:	19 97       	sbiw	r26, 0x09	; 9
    13f0:	b8 01       	movw	r22, r16
    13f2:	09 95       	icall
    13f4:	89 2b       	or	r24, r25
    13f6:	91 f3       	breq	.-28     	; 0x13dc <fputs+0x1e>
    13f8:	df ef       	ldi	r29, 0xFF	; 255
    13fa:	cf ef       	ldi	r28, 0xFF	; 255
    13fc:	ef cf       	rjmp	.-34     	; 0x13dc <fputs+0x1e>
    13fe:	8d 2f       	mov	r24, r29
    1400:	9c 2f       	mov	r25, r28
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <fputs+0x4a>
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	9f ef       	ldi	r25, 0xFF	; 255
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	e6 e0       	ldi	r30, 0x06	; 6
    140e:	51 c3       	rjmp	.+1698   	; 0x1ab2 <__epilogue_restores__+0x18>

00001410 <sprintf>:
    1410:	ae e0       	ldi	r26, 0x0E	; 14
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ed e0       	ldi	r30, 0x0D	; 13
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	32 c3       	rjmp	.+1636   	; 0x1a7e <__prologue_saves__+0x1c>
    141a:	0d 89       	ldd	r16, Y+21	; 0x15
    141c:	1e 89       	ldd	r17, Y+22	; 0x16
    141e:	86 e0       	ldi	r24, 0x06	; 6
    1420:	8c 83       	std	Y+4, r24	; 0x04
    1422:	1a 83       	std	Y+2, r17	; 0x02
    1424:	09 83       	std	Y+1, r16	; 0x01
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f e7       	ldi	r25, 0x7F	; 127
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	ae 01       	movw	r20, r28
    1430:	47 5e       	subi	r20, 0xE7	; 231
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	6f 89       	ldd	r22, Y+23	; 0x17
    1436:	78 8d       	ldd	r23, Y+24	; 0x18
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	08 d0       	rcall	.+16     	; 0x144e <vfprintf>
    143e:	ef 81       	ldd	r30, Y+7	; 0x07
    1440:	f8 85       	ldd	r31, Y+8	; 0x08
    1442:	e0 0f       	add	r30, r16
    1444:	f1 1f       	adc	r31, r17
    1446:	10 82       	st	Z, r1
    1448:	2e 96       	adiw	r28, 0x0e	; 14
    144a:	e4 e0       	ldi	r30, 0x04	; 4
    144c:	34 c3       	rjmp	.+1640   	; 0x1ab6 <__epilogue_restores__+0x1c>

0000144e <vfprintf>:
    144e:	ab e0       	ldi	r26, 0x0B	; 11
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ec e2       	ldi	r30, 0x2C	; 44
    1454:	fa e0       	ldi	r31, 0x0A	; 10
    1456:	05 c3       	rjmp	.+1546   	; 0x1a62 <__prologue_saves__>
    1458:	6c 01       	movw	r12, r24
    145a:	7b 01       	movw	r14, r22
    145c:	8a 01       	movw	r16, r20
    145e:	fc 01       	movw	r30, r24
    1460:	17 82       	std	Z+7, r1	; 0x07
    1462:	16 82       	std	Z+6, r1	; 0x06
    1464:	83 81       	ldd	r24, Z+3	; 0x03
    1466:	81 ff       	sbrs	r24, 1
    1468:	c0 c1       	rjmp	.+896    	; 0x17ea <vfprintf+0x39c>
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	3c 01       	movw	r6, r24
    1470:	f6 01       	movw	r30, r12
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	f7 01       	movw	r30, r14
    1476:	93 fd       	sbrc	r25, 3
    1478:	85 91       	lpm	r24, Z+
    147a:	93 ff       	sbrs	r25, 3
    147c:	81 91       	ld	r24, Z+
    147e:	7f 01       	movw	r14, r30
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <vfprintf+0x38>
    1484:	ae c1       	rjmp	.+860    	; 0x17e2 <vfprintf+0x394>
    1486:	85 32       	cpi	r24, 0x25	; 37
    1488:	39 f4       	brne	.+14     	; 0x1498 <vfprintf+0x4a>
    148a:	93 fd       	sbrc	r25, 3
    148c:	85 91       	lpm	r24, Z+
    148e:	93 ff       	sbrs	r25, 3
    1490:	81 91       	ld	r24, Z+
    1492:	7f 01       	movw	r14, r30
    1494:	85 32       	cpi	r24, 0x25	; 37
    1496:	21 f4       	brne	.+8      	; 0x14a0 <vfprintf+0x52>
    1498:	b6 01       	movw	r22, r12
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 d2       	rcall	.+1028   	; 0x18a2 <fputc>
    149e:	e8 cf       	rjmp	.-48     	; 0x1470 <vfprintf+0x22>
    14a0:	91 2c       	mov	r9, r1
    14a2:	21 2c       	mov	r2, r1
    14a4:	31 2c       	mov	r3, r1
    14a6:	ff e1       	ldi	r31, 0x1F	; 31
    14a8:	f3 15       	cp	r31, r3
    14aa:	e0 f0       	brcs	.+56     	; 0x14e4 <vfprintf+0x96>
    14ac:	8b 32       	cpi	r24, 0x2B	; 43
    14ae:	79 f0       	breq	.+30     	; 0x14ce <vfprintf+0x80>
    14b0:	38 f4       	brcc	.+14     	; 0x14c0 <vfprintf+0x72>
    14b2:	80 32       	cpi	r24, 0x20	; 32
    14b4:	79 f0       	breq	.+30     	; 0x14d4 <vfprintf+0x86>
    14b6:	83 32       	cpi	r24, 0x23	; 35
    14b8:	a9 f4       	brne	.+42     	; 0x14e4 <vfprintf+0x96>
    14ba:	23 2d       	mov	r18, r3
    14bc:	20 61       	ori	r18, 0x10	; 16
    14be:	10 c0       	rjmp	.+32     	; 0x14e0 <vfprintf+0x92>
    14c0:	8d 32       	cpi	r24, 0x2D	; 45
    14c2:	59 f0       	breq	.+22     	; 0x14da <vfprintf+0x8c>
    14c4:	80 33       	cpi	r24, 0x30	; 48
    14c6:	71 f4       	brne	.+28     	; 0x14e4 <vfprintf+0x96>
    14c8:	23 2d       	mov	r18, r3
    14ca:	21 60       	ori	r18, 0x01	; 1
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x92>
    14ce:	83 2d       	mov	r24, r3
    14d0:	82 60       	ori	r24, 0x02	; 2
    14d2:	38 2e       	mov	r3, r24
    14d4:	e3 2d       	mov	r30, r3
    14d6:	e4 60       	ori	r30, 0x04	; 4
    14d8:	22 c0       	rjmp	.+68     	; 0x151e <vfprintf+0xd0>
    14da:	f3 2d       	mov	r31, r3
    14dc:	f8 60       	ori	r31, 0x08	; 8
    14de:	25 c0       	rjmp	.+74     	; 0x152a <vfprintf+0xdc>
    14e0:	32 2e       	mov	r3, r18
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <vfprintf+0xe4>
    14e4:	37 fc       	sbrc	r3, 7
    14e6:	2d c0       	rjmp	.+90     	; 0x1542 <vfprintf+0xf4>
    14e8:	20 ed       	ldi	r18, 0xD0	; 208
    14ea:	28 0f       	add	r18, r24
    14ec:	2a 30       	cpi	r18, 0x0A	; 10
    14ee:	88 f4       	brcc	.+34     	; 0x1512 <vfprintf+0xc4>
    14f0:	36 fe       	sbrs	r3, 6
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <vfprintf+0xb2>
    14f4:	89 2d       	mov	r24, r9
    14f6:	6a e0       	ldi	r22, 0x0A	; 10
    14f8:	70 d2       	rcall	.+1248   	; 0x19da <__mulqi3>
    14fa:	92 2e       	mov	r9, r18
    14fc:	98 0e       	add	r9, r24
    14fe:	19 c0       	rjmp	.+50     	; 0x1532 <vfprintf+0xe4>
    1500:	82 2d       	mov	r24, r2
    1502:	6a e0       	ldi	r22, 0x0A	; 10
    1504:	6a d2       	rcall	.+1236   	; 0x19da <__mulqi3>
    1506:	22 2e       	mov	r2, r18
    1508:	28 0e       	add	r2, r24
    150a:	83 2d       	mov	r24, r3
    150c:	80 62       	ori	r24, 0x20	; 32
    150e:	38 2e       	mov	r3, r24
    1510:	10 c0       	rjmp	.+32     	; 0x1532 <vfprintf+0xe4>
    1512:	8e 32       	cpi	r24, 0x2E	; 46
    1514:	31 f4       	brne	.+12     	; 0x1522 <vfprintf+0xd4>
    1516:	36 fc       	sbrc	r3, 6
    1518:	64 c1       	rjmp	.+712    	; 0x17e2 <vfprintf+0x394>
    151a:	e3 2d       	mov	r30, r3
    151c:	e0 64       	ori	r30, 0x40	; 64
    151e:	3e 2e       	mov	r3, r30
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <vfprintf+0xe4>
    1522:	8c 36       	cpi	r24, 0x6C	; 108
    1524:	21 f4       	brne	.+8      	; 0x152e <vfprintf+0xe0>
    1526:	f3 2d       	mov	r31, r3
    1528:	f0 68       	ori	r31, 0x80	; 128
    152a:	3f 2e       	mov	r3, r31
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0xe4>
    152e:	88 36       	cpi	r24, 0x68	; 104
    1530:	41 f4       	brne	.+16     	; 0x1542 <vfprintf+0xf4>
    1532:	f7 01       	movw	r30, r14
    1534:	93 fd       	sbrc	r25, 3
    1536:	85 91       	lpm	r24, Z+
    1538:	93 ff       	sbrs	r25, 3
    153a:	81 91       	ld	r24, Z+
    153c:	7f 01       	movw	r14, r30
    153e:	81 11       	cpse	r24, r1
    1540:	b2 cf       	rjmp	.-156    	; 0x14a6 <vfprintf+0x58>
    1542:	98 2f       	mov	r25, r24
    1544:	9f 7d       	andi	r25, 0xDF	; 223
    1546:	95 54       	subi	r25, 0x45	; 69
    1548:	93 30       	cpi	r25, 0x03	; 3
    154a:	28 f4       	brcc	.+10     	; 0x1556 <vfprintf+0x108>
    154c:	0c 5f       	subi	r16, 0xFC	; 252
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	2f e3       	ldi	r18, 0x3F	; 63
    1552:	29 83       	std	Y+1, r18	; 0x01
    1554:	0d c0       	rjmp	.+26     	; 0x1570 <vfprintf+0x122>
    1556:	83 36       	cpi	r24, 0x63	; 99
    1558:	31 f0       	breq	.+12     	; 0x1566 <vfprintf+0x118>
    155a:	83 37       	cpi	r24, 0x73	; 115
    155c:	71 f0       	breq	.+28     	; 0x157a <vfprintf+0x12c>
    155e:	83 35       	cpi	r24, 0x53	; 83
    1560:	09 f0       	breq	.+2      	; 0x1564 <vfprintf+0x116>
    1562:	55 c0       	rjmp	.+170    	; 0x160e <vfprintf+0x1c0>
    1564:	20 c0       	rjmp	.+64     	; 0x15a6 <vfprintf+0x158>
    1566:	f8 01       	movw	r30, r16
    1568:	80 81       	ld	r24, Z
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	0e 5f       	subi	r16, 0xFE	; 254
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	88 24       	eor	r8, r8
    1572:	83 94       	inc	r8
    1574:	91 2c       	mov	r9, r1
    1576:	53 01       	movw	r10, r6
    1578:	12 c0       	rjmp	.+36     	; 0x159e <vfprintf+0x150>
    157a:	28 01       	movw	r4, r16
    157c:	f2 e0       	ldi	r31, 0x02	; 2
    157e:	4f 0e       	add	r4, r31
    1580:	51 1c       	adc	r5, r1
    1582:	f8 01       	movw	r30, r16
    1584:	a0 80       	ld	r10, Z
    1586:	b1 80       	ldd	r11, Z+1	; 0x01
    1588:	36 fe       	sbrs	r3, 6
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <vfprintf+0x144>
    158c:	69 2d       	mov	r22, r9
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0x148>
    1592:	6f ef       	ldi	r22, 0xFF	; 255
    1594:	7f ef       	ldi	r23, 0xFF	; 255
    1596:	c5 01       	movw	r24, r10
    1598:	3b d1       	rcall	.+630    	; 0x1810 <strnlen>
    159a:	4c 01       	movw	r8, r24
    159c:	82 01       	movw	r16, r4
    159e:	f3 2d       	mov	r31, r3
    15a0:	ff 77       	andi	r31, 0x7F	; 127
    15a2:	3f 2e       	mov	r3, r31
    15a4:	15 c0       	rjmp	.+42     	; 0x15d0 <vfprintf+0x182>
    15a6:	28 01       	movw	r4, r16
    15a8:	22 e0       	ldi	r18, 0x02	; 2
    15aa:	42 0e       	add	r4, r18
    15ac:	51 1c       	adc	r5, r1
    15ae:	f8 01       	movw	r30, r16
    15b0:	a0 80       	ld	r10, Z
    15b2:	b1 80       	ldd	r11, Z+1	; 0x01
    15b4:	36 fe       	sbrs	r3, 6
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <vfprintf+0x170>
    15b8:	69 2d       	mov	r22, r9
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <vfprintf+0x174>
    15be:	6f ef       	ldi	r22, 0xFF	; 255
    15c0:	7f ef       	ldi	r23, 0xFF	; 255
    15c2:	c5 01       	movw	r24, r10
    15c4:	1a d1       	rcall	.+564    	; 0x17fa <strnlen_P>
    15c6:	4c 01       	movw	r8, r24
    15c8:	f3 2d       	mov	r31, r3
    15ca:	f0 68       	ori	r31, 0x80	; 128
    15cc:	3f 2e       	mov	r3, r31
    15ce:	82 01       	movw	r16, r4
    15d0:	33 fc       	sbrc	r3, 3
    15d2:	19 c0       	rjmp	.+50     	; 0x1606 <vfprintf+0x1b8>
    15d4:	82 2d       	mov	r24, r2
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	88 16       	cp	r8, r24
    15da:	99 06       	cpc	r9, r25
    15dc:	a0 f4       	brcc	.+40     	; 0x1606 <vfprintf+0x1b8>
    15de:	b6 01       	movw	r22, r12
    15e0:	80 e2       	ldi	r24, 0x20	; 32
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	5e d1       	rcall	.+700    	; 0x18a2 <fputc>
    15e6:	2a 94       	dec	r2
    15e8:	f5 cf       	rjmp	.-22     	; 0x15d4 <vfprintf+0x186>
    15ea:	f5 01       	movw	r30, r10
    15ec:	37 fc       	sbrc	r3, 7
    15ee:	85 91       	lpm	r24, Z+
    15f0:	37 fe       	sbrs	r3, 7
    15f2:	81 91       	ld	r24, Z+
    15f4:	5f 01       	movw	r10, r30
    15f6:	b6 01       	movw	r22, r12
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	53 d1       	rcall	.+678    	; 0x18a2 <fputc>
    15fc:	21 10       	cpse	r2, r1
    15fe:	2a 94       	dec	r2
    1600:	21 e0       	ldi	r18, 0x01	; 1
    1602:	82 1a       	sub	r8, r18
    1604:	91 08       	sbc	r9, r1
    1606:	81 14       	cp	r8, r1
    1608:	91 04       	cpc	r9, r1
    160a:	79 f7       	brne	.-34     	; 0x15ea <vfprintf+0x19c>
    160c:	e1 c0       	rjmp	.+450    	; 0x17d0 <vfprintf+0x382>
    160e:	84 36       	cpi	r24, 0x64	; 100
    1610:	11 f0       	breq	.+4      	; 0x1616 <vfprintf+0x1c8>
    1612:	89 36       	cpi	r24, 0x69	; 105
    1614:	39 f5       	brne	.+78     	; 0x1664 <vfprintf+0x216>
    1616:	f8 01       	movw	r30, r16
    1618:	37 fe       	sbrs	r3, 7
    161a:	07 c0       	rjmp	.+14     	; 0x162a <vfprintf+0x1dc>
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	0c 5f       	subi	r16, 0xFC	; 252
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	08 c0       	rjmp	.+16     	; 0x163a <vfprintf+0x1ec>
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	07 2e       	mov	r0, r23
    1630:	00 0c       	add	r0, r0
    1632:	88 0b       	sbc	r24, r24
    1634:	99 0b       	sbc	r25, r25
    1636:	0e 5f       	subi	r16, 0xFE	; 254
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	f3 2d       	mov	r31, r3
    163c:	ff 76       	andi	r31, 0x6F	; 111
    163e:	3f 2e       	mov	r3, r31
    1640:	97 ff       	sbrs	r25, 7
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <vfprintf+0x208>
    1644:	90 95       	com	r25
    1646:	80 95       	com	r24
    1648:	70 95       	com	r23
    164a:	61 95       	neg	r22
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	8f 4f       	sbci	r24, 0xFF	; 255
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	f0 68       	ori	r31, 0x80	; 128
    1654:	3f 2e       	mov	r3, r31
    1656:	2a e0       	ldi	r18, 0x0A	; 10
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	a3 01       	movw	r20, r6
    165c:	5e d1       	rcall	.+700    	; 0x191a <__ultoa_invert>
    165e:	88 2e       	mov	r8, r24
    1660:	86 18       	sub	r8, r6
    1662:	44 c0       	rjmp	.+136    	; 0x16ec <vfprintf+0x29e>
    1664:	85 37       	cpi	r24, 0x75	; 117
    1666:	31 f4       	brne	.+12     	; 0x1674 <vfprintf+0x226>
    1668:	23 2d       	mov	r18, r3
    166a:	2f 7e       	andi	r18, 0xEF	; 239
    166c:	b2 2e       	mov	r11, r18
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	25 c0       	rjmp	.+74     	; 0x16be <vfprintf+0x270>
    1674:	93 2d       	mov	r25, r3
    1676:	99 7f       	andi	r25, 0xF9	; 249
    1678:	b9 2e       	mov	r11, r25
    167a:	8f 36       	cpi	r24, 0x6F	; 111
    167c:	c1 f0       	breq	.+48     	; 0x16ae <vfprintf+0x260>
    167e:	18 f4       	brcc	.+6      	; 0x1686 <vfprintf+0x238>
    1680:	88 35       	cpi	r24, 0x58	; 88
    1682:	79 f0       	breq	.+30     	; 0x16a2 <vfprintf+0x254>
    1684:	ae c0       	rjmp	.+348    	; 0x17e2 <vfprintf+0x394>
    1686:	80 37       	cpi	r24, 0x70	; 112
    1688:	19 f0       	breq	.+6      	; 0x1690 <vfprintf+0x242>
    168a:	88 37       	cpi	r24, 0x78	; 120
    168c:	21 f0       	breq	.+8      	; 0x1696 <vfprintf+0x248>
    168e:	a9 c0       	rjmp	.+338    	; 0x17e2 <vfprintf+0x394>
    1690:	e9 2f       	mov	r30, r25
    1692:	e0 61       	ori	r30, 0x10	; 16
    1694:	be 2e       	mov	r11, r30
    1696:	b4 fe       	sbrs	r11, 4
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <vfprintf+0x266>
    169a:	fb 2d       	mov	r31, r11
    169c:	f4 60       	ori	r31, 0x04	; 4
    169e:	bf 2e       	mov	r11, r31
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <vfprintf+0x266>
    16a2:	34 fe       	sbrs	r3, 4
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <vfprintf+0x26c>
    16a6:	29 2f       	mov	r18, r25
    16a8:	26 60       	ori	r18, 0x06	; 6
    16aa:	b2 2e       	mov	r11, r18
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x26c>
    16ae:	28 e0       	ldi	r18, 0x08	; 8
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x270>
    16b4:	20 e1       	ldi	r18, 0x10	; 16
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x270>
    16ba:	20 e1       	ldi	r18, 0x10	; 16
    16bc:	32 e0       	ldi	r19, 0x02	; 2
    16be:	f8 01       	movw	r30, r16
    16c0:	b7 fe       	sbrs	r11, 7
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <vfprintf+0x284>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0c 5f       	subi	r16, 0xFC	; 252
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <vfprintf+0x290>
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 5f       	subi	r16, 0xFE	; 254
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	a3 01       	movw	r20, r6
    16e0:	1c d1       	rcall	.+568    	; 0x191a <__ultoa_invert>
    16e2:	88 2e       	mov	r8, r24
    16e4:	86 18       	sub	r8, r6
    16e6:	fb 2d       	mov	r31, r11
    16e8:	ff 77       	andi	r31, 0x7F	; 127
    16ea:	3f 2e       	mov	r3, r31
    16ec:	36 fe       	sbrs	r3, 6
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <vfprintf+0x2bc>
    16f0:	23 2d       	mov	r18, r3
    16f2:	2e 7f       	andi	r18, 0xFE	; 254
    16f4:	a2 2e       	mov	r10, r18
    16f6:	89 14       	cp	r8, r9
    16f8:	58 f4       	brcc	.+22     	; 0x1710 <vfprintf+0x2c2>
    16fa:	34 fe       	sbrs	r3, 4
    16fc:	0b c0       	rjmp	.+22     	; 0x1714 <vfprintf+0x2c6>
    16fe:	32 fc       	sbrc	r3, 2
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x2c6>
    1702:	83 2d       	mov	r24, r3
    1704:	8e 7e       	andi	r24, 0xEE	; 238
    1706:	a8 2e       	mov	r10, r24
    1708:	05 c0       	rjmp	.+10     	; 0x1714 <vfprintf+0x2c6>
    170a:	b8 2c       	mov	r11, r8
    170c:	a3 2c       	mov	r10, r3
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <vfprintf+0x2c8>
    1710:	b8 2c       	mov	r11, r8
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <vfprintf+0x2c8>
    1714:	b9 2c       	mov	r11, r9
    1716:	a4 fe       	sbrs	r10, 4
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <vfprintf+0x2ea>
    171a:	fe 01       	movw	r30, r28
    171c:	e8 0d       	add	r30, r8
    171e:	f1 1d       	adc	r31, r1
    1720:	80 81       	ld	r24, Z
    1722:	80 33       	cpi	r24, 0x30	; 48
    1724:	21 f4       	brne	.+8      	; 0x172e <vfprintf+0x2e0>
    1726:	9a 2d       	mov	r25, r10
    1728:	99 7e       	andi	r25, 0xE9	; 233
    172a:	a9 2e       	mov	r10, r25
    172c:	09 c0       	rjmp	.+18     	; 0x1740 <vfprintf+0x2f2>
    172e:	a2 fe       	sbrs	r10, 2
    1730:	06 c0       	rjmp	.+12     	; 0x173e <vfprintf+0x2f0>
    1732:	b3 94       	inc	r11
    1734:	b3 94       	inc	r11
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <vfprintf+0x2f2>
    1738:	8a 2d       	mov	r24, r10
    173a:	86 78       	andi	r24, 0x86	; 134
    173c:	09 f0       	breq	.+2      	; 0x1740 <vfprintf+0x2f2>
    173e:	b3 94       	inc	r11
    1740:	a3 fc       	sbrc	r10, 3
    1742:	10 c0       	rjmp	.+32     	; 0x1764 <vfprintf+0x316>
    1744:	a0 fe       	sbrs	r10, 0
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <vfprintf+0x306>
    1748:	b2 14       	cp	r11, r2
    174a:	80 f4       	brcc	.+32     	; 0x176c <vfprintf+0x31e>
    174c:	28 0c       	add	r2, r8
    174e:	92 2c       	mov	r9, r2
    1750:	9b 18       	sub	r9, r11
    1752:	0d c0       	rjmp	.+26     	; 0x176e <vfprintf+0x320>
    1754:	b2 14       	cp	r11, r2
    1756:	58 f4       	brcc	.+22     	; 0x176e <vfprintf+0x320>
    1758:	b6 01       	movw	r22, r12
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a1 d0       	rcall	.+322    	; 0x18a2 <fputc>
    1760:	b3 94       	inc	r11
    1762:	f8 cf       	rjmp	.-16     	; 0x1754 <vfprintf+0x306>
    1764:	b2 14       	cp	r11, r2
    1766:	18 f4       	brcc	.+6      	; 0x176e <vfprintf+0x320>
    1768:	2b 18       	sub	r2, r11
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <vfprintf+0x322>
    176c:	98 2c       	mov	r9, r8
    176e:	21 2c       	mov	r2, r1
    1770:	a4 fe       	sbrs	r10, 4
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <vfprintf+0x344>
    1774:	b6 01       	movw	r22, r12
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	93 d0       	rcall	.+294    	; 0x18a2 <fputc>
    177c:	a2 fe       	sbrs	r10, 2
    177e:	16 c0       	rjmp	.+44     	; 0x17ac <vfprintf+0x35e>
    1780:	a1 fc       	sbrc	r10, 1
    1782:	03 c0       	rjmp	.+6      	; 0x178a <vfprintf+0x33c>
    1784:	88 e7       	ldi	r24, 0x78	; 120
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x340>
    178a:	88 e5       	ldi	r24, 0x58	; 88
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b6 01       	movw	r22, r12
    1790:	0c c0       	rjmp	.+24     	; 0x17aa <vfprintf+0x35c>
    1792:	8a 2d       	mov	r24, r10
    1794:	86 78       	andi	r24, 0x86	; 134
    1796:	51 f0       	breq	.+20     	; 0x17ac <vfprintf+0x35e>
    1798:	a1 fe       	sbrs	r10, 1
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0x352>
    179c:	8b e2       	ldi	r24, 0x2B	; 43
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <vfprintf+0x354>
    17a0:	80 e2       	ldi	r24, 0x20	; 32
    17a2:	a7 fc       	sbrc	r10, 7
    17a4:	8d e2       	ldi	r24, 0x2D	; 45
    17a6:	b6 01       	movw	r22, r12
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	7b d0       	rcall	.+246    	; 0x18a2 <fputc>
    17ac:	89 14       	cp	r8, r9
    17ae:	30 f4       	brcc	.+12     	; 0x17bc <vfprintf+0x36e>
    17b0:	b6 01       	movw	r22, r12
    17b2:	80 e3       	ldi	r24, 0x30	; 48
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	75 d0       	rcall	.+234    	; 0x18a2 <fputc>
    17b8:	9a 94       	dec	r9
    17ba:	f8 cf       	rjmp	.-16     	; 0x17ac <vfprintf+0x35e>
    17bc:	8a 94       	dec	r8
    17be:	f3 01       	movw	r30, r6
    17c0:	e8 0d       	add	r30, r8
    17c2:	f1 1d       	adc	r31, r1
    17c4:	80 81       	ld	r24, Z
    17c6:	b6 01       	movw	r22, r12
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	6b d0       	rcall	.+214    	; 0x18a2 <fputc>
    17cc:	81 10       	cpse	r8, r1
    17ce:	f6 cf       	rjmp	.-20     	; 0x17bc <vfprintf+0x36e>
    17d0:	22 20       	and	r2, r2
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <vfprintf+0x388>
    17d4:	4d ce       	rjmp	.-870    	; 0x1470 <vfprintf+0x22>
    17d6:	b6 01       	movw	r22, r12
    17d8:	80 e2       	ldi	r24, 0x20	; 32
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	62 d0       	rcall	.+196    	; 0x18a2 <fputc>
    17de:	2a 94       	dec	r2
    17e0:	f7 cf       	rjmp	.-18     	; 0x17d0 <vfprintf+0x382>
    17e2:	f6 01       	movw	r30, r12
    17e4:	86 81       	ldd	r24, Z+6	; 0x06
    17e6:	97 81       	ldd	r25, Z+7	; 0x07
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <vfprintf+0x3a0>
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	9f ef       	ldi	r25, 0xFF	; 255
    17ee:	2b 96       	adiw	r28, 0x0b	; 11
    17f0:	e2 e1       	ldi	r30, 0x12	; 18
    17f2:	53 c1       	rjmp	.+678    	; 0x1a9a <__epilogue_restores__>

000017f4 <__ctype_isfalse>:
    17f4:	99 27       	eor	r25, r25
    17f6:	88 27       	eor	r24, r24

000017f8 <__ctype_istrue>:
    17f8:	08 95       	ret

000017fa <strnlen_P>:
    17fa:	fc 01       	movw	r30, r24
    17fc:	05 90       	lpm	r0, Z+
    17fe:	61 50       	subi	r22, 0x01	; 1
    1800:	70 40       	sbci	r23, 0x00	; 0
    1802:	01 10       	cpse	r0, r1
    1804:	d8 f7       	brcc	.-10     	; 0x17fc <strnlen_P+0x2>
    1806:	80 95       	com	r24
    1808:	90 95       	com	r25
    180a:	8e 0f       	add	r24, r30
    180c:	9f 1f       	adc	r25, r31
    180e:	08 95       	ret

00001810 <strnlen>:
    1810:	fc 01       	movw	r30, r24
    1812:	61 50       	subi	r22, 0x01	; 1
    1814:	70 40       	sbci	r23, 0x00	; 0
    1816:	01 90       	ld	r0, Z+
    1818:	01 10       	cpse	r0, r1
    181a:	d8 f7       	brcc	.-10     	; 0x1812 <strnlen+0x2>
    181c:	80 95       	com	r24
    181e:	90 95       	com	r25
    1820:	8e 0f       	add	r24, r30
    1822:	9f 1f       	adc	r25, r31
    1824:	08 95       	ret

00001826 <fgetc>:
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	ec 01       	movw	r28, r24
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	20 ff       	sbrs	r18, 0
    1830:	33 c0       	rjmp	.+102    	; 0x1898 <fgetc+0x72>
    1832:	26 ff       	sbrs	r18, 6
    1834:	0a c0       	rjmp	.+20     	; 0x184a <fgetc+0x24>
    1836:	2f 7b       	andi	r18, 0xBF	; 191
    1838:	2b 83       	std	Y+3, r18	; 0x03
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	9f 81       	ldd	r25, Y+7	; 0x07
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	29 c0       	rjmp	.+82     	; 0x189c <fgetc+0x76>
    184a:	22 ff       	sbrs	r18, 2
    184c:	0f c0       	rjmp	.+30     	; 0x186c <fgetc+0x46>
    184e:	e8 81       	ld	r30, Y
    1850:	f9 81       	ldd	r31, Y+1	; 0x01
    1852:	80 81       	ld	r24, Z
    1854:	08 2e       	mov	r0, r24
    1856:	00 0c       	add	r0, r0
    1858:	99 0b       	sbc	r25, r25
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	19 f4       	brne	.+6      	; 0x1864 <fgetc+0x3e>
    185e:	20 62       	ori	r18, 0x20	; 32
    1860:	2b 83       	std	Y+3, r18	; 0x03
    1862:	1a c0       	rjmp	.+52     	; 0x1898 <fgetc+0x72>
    1864:	31 96       	adiw	r30, 0x01	; 1
    1866:	f9 83       	std	Y+1, r31	; 0x01
    1868:	e8 83       	st	Y, r30
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <fgetc+0x62>
    186c:	ea 85       	ldd	r30, Y+10	; 0x0a
    186e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1870:	09 95       	icall
    1872:	97 ff       	sbrs	r25, 7
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <fgetc+0x62>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	11 f0       	breq	.+4      	; 0x1880 <fgetc+0x5a>
    187c:	80 e2       	ldi	r24, 0x20	; 32
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <fgetc+0x5c>
    1880:	80 e1       	ldi	r24, 0x10	; 16
    1882:	82 2b       	or	r24, r18
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <fgetc+0x72>
    1888:	2e 81       	ldd	r18, Y+6	; 0x06
    188a:	3f 81       	ldd	r19, Y+7	; 0x07
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	3f 83       	std	Y+7, r19	; 0x07
    1892:	2e 83       	std	Y+6, r18	; 0x06
    1894:	99 27       	eor	r25, r25
    1896:	02 c0       	rjmp	.+4      	; 0x189c <fgetc+0x76>
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	9f ef       	ldi	r25, 0xFF	; 255
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <fputc>:
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	fb 01       	movw	r30, r22
    18ac:	23 81       	ldd	r18, Z+3	; 0x03
    18ae:	21 fd       	sbrc	r18, 1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <fputc+0x16>
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	9f ef       	ldi	r25, 0xFF	; 255
    18b6:	2c c0       	rjmp	.+88     	; 0x1910 <fputc+0x6e>
    18b8:	22 ff       	sbrs	r18, 2
    18ba:	16 c0       	rjmp	.+44     	; 0x18e8 <fputc+0x46>
    18bc:	46 81       	ldd	r20, Z+6	; 0x06
    18be:	57 81       	ldd	r21, Z+7	; 0x07
    18c0:	24 81       	ldd	r18, Z+4	; 0x04
    18c2:	35 81       	ldd	r19, Z+5	; 0x05
    18c4:	42 17       	cp	r20, r18
    18c6:	53 07       	cpc	r21, r19
    18c8:	44 f4       	brge	.+16     	; 0x18da <fputc+0x38>
    18ca:	a0 81       	ld	r26, Z
    18cc:	b1 81       	ldd	r27, Z+1	; 0x01
    18ce:	9d 01       	movw	r18, r26
    18d0:	2f 5f       	subi	r18, 0xFF	; 255
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	31 83       	std	Z+1, r19	; 0x01
    18d6:	20 83       	st	Z, r18
    18d8:	8c 93       	st	X, r24
    18da:	26 81       	ldd	r18, Z+6	; 0x06
    18dc:	37 81       	ldd	r19, Z+7	; 0x07
    18de:	2f 5f       	subi	r18, 0xFF	; 255
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	37 83       	std	Z+7, r19	; 0x07
    18e4:	26 83       	std	Z+6, r18	; 0x06
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <fputc+0x6e>
    18e8:	8b 01       	movw	r16, r22
    18ea:	ec 01       	movw	r28, r24
    18ec:	fb 01       	movw	r30, r22
    18ee:	00 84       	ldd	r0, Z+8	; 0x08
    18f0:	f1 85       	ldd	r31, Z+9	; 0x09
    18f2:	e0 2d       	mov	r30, r0
    18f4:	09 95       	icall
    18f6:	89 2b       	or	r24, r25
    18f8:	e1 f6       	brne	.-72     	; 0x18b2 <fputc+0x10>
    18fa:	d8 01       	movw	r26, r16
    18fc:	16 96       	adiw	r26, 0x06	; 6
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	17 97       	sbiw	r26, 0x07	; 7
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	17 96       	adiw	r26, 0x07	; 7
    1908:	9c 93       	st	X, r25
    190a:	8e 93       	st	-X, r24
    190c:	16 97       	sbiw	r26, 0x06	; 6
    190e:	ce 01       	movw	r24, r28
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <__ultoa_invert>:
    191a:	fa 01       	movw	r30, r20
    191c:	aa 27       	eor	r26, r26
    191e:	28 30       	cpi	r18, 0x08	; 8
    1920:	61 f1       	breq	.+88     	; 0x197a <__ultoa_invert+0x60>
    1922:	20 31       	cpi	r18, 0x10	; 16
    1924:	91 f1       	breq	.+100    	; 0x198a <__ultoa_invert+0x70>
    1926:	e8 94       	clt
    1928:	6f 93       	push	r22
    192a:	6e 7f       	andi	r22, 0xFE	; 254
    192c:	6e 5f       	subi	r22, 0xFE	; 254
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	8f 4f       	sbci	r24, 0xFF	; 255
    1932:	9f 4f       	sbci	r25, 0xFF	; 255
    1934:	af 4f       	sbci	r26, 0xFF	; 255
    1936:	b1 e0       	ldi	r27, 0x01	; 1
    1938:	40 d0       	rcall	.+128    	; 0x19ba <__ultoa_invert+0xa0>
    193a:	b4 e0       	ldi	r27, 0x04	; 4
    193c:	3e d0       	rcall	.+124    	; 0x19ba <__ultoa_invert+0xa0>
    193e:	67 0f       	add	r22, r23
    1940:	78 1f       	adc	r23, r24
    1942:	89 1f       	adc	r24, r25
    1944:	9a 1f       	adc	r25, r26
    1946:	a1 1d       	adc	r26, r1
    1948:	68 0f       	add	r22, r24
    194a:	79 1f       	adc	r23, r25
    194c:	8a 1f       	adc	r24, r26
    194e:	91 1d       	adc	r25, r1
    1950:	a1 1d       	adc	r26, r1
    1952:	6a 0f       	add	r22, r26
    1954:	71 1d       	adc	r23, r1
    1956:	81 1d       	adc	r24, r1
    1958:	91 1d       	adc	r25, r1
    195a:	a1 1d       	adc	r26, r1
    195c:	22 d0       	rcall	.+68     	; 0x19a2 <__ultoa_invert+0x88>
    195e:	09 f4       	brne	.+2      	; 0x1962 <__ultoa_invert+0x48>
    1960:	68 94       	set
    1962:	3f 91       	pop	r19
    1964:	06 2e       	mov	r0, r22
    1966:	00 0c       	add	r0, r0
    1968:	30 19       	sub	r19, r0
    196a:	00 0c       	add	r0, r0
    196c:	00 0c       	add	r0, r0
    196e:	30 19       	sub	r19, r0
    1970:	30 5d       	subi	r19, 0xD0	; 208
    1972:	31 93       	st	Z+, r19
    1974:	ce f6       	brtc	.-78     	; 0x1928 <__ultoa_invert+0xe>
    1976:	cf 01       	movw	r24, r30
    1978:	08 95       	ret
    197a:	46 2f       	mov	r20, r22
    197c:	47 70       	andi	r20, 0x07	; 7
    197e:	40 5d       	subi	r20, 0xD0	; 208
    1980:	41 93       	st	Z+, r20
    1982:	b3 e0       	ldi	r27, 0x03	; 3
    1984:	0f d0       	rcall	.+30     	; 0x19a4 <__ultoa_invert+0x8a>
    1986:	c9 f7       	brne	.-14     	; 0x197a <__ultoa_invert+0x60>
    1988:	f6 cf       	rjmp	.-20     	; 0x1976 <__ultoa_invert+0x5c>
    198a:	46 2f       	mov	r20, r22
    198c:	4f 70       	andi	r20, 0x0F	; 15
    198e:	40 5d       	subi	r20, 0xD0	; 208
    1990:	4a 33       	cpi	r20, 0x3A	; 58
    1992:	18 f0       	brcs	.+6      	; 0x199a <__ultoa_invert+0x80>
    1994:	49 5d       	subi	r20, 0xD9	; 217
    1996:	31 fd       	sbrc	r19, 1
    1998:	40 52       	subi	r20, 0x20	; 32
    199a:	41 93       	st	Z+, r20
    199c:	02 d0       	rcall	.+4      	; 0x19a2 <__ultoa_invert+0x88>
    199e:	a9 f7       	brne	.-22     	; 0x198a <__ultoa_invert+0x70>
    19a0:	ea cf       	rjmp	.-44     	; 0x1976 <__ultoa_invert+0x5c>
    19a2:	b4 e0       	ldi	r27, 0x04	; 4
    19a4:	a6 95       	lsr	r26
    19a6:	97 95       	ror	r25
    19a8:	87 95       	ror	r24
    19aa:	77 95       	ror	r23
    19ac:	67 95       	ror	r22
    19ae:	ba 95       	dec	r27
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <__ultoa_invert+0x8a>
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	61 05       	cpc	r22, r1
    19b6:	71 05       	cpc	r23, r1
    19b8:	08 95       	ret
    19ba:	9b 01       	movw	r18, r22
    19bc:	ac 01       	movw	r20, r24
    19be:	0a 2e       	mov	r0, r26
    19c0:	06 94       	lsr	r0
    19c2:	57 95       	ror	r21
    19c4:	47 95       	ror	r20
    19c6:	37 95       	ror	r19
    19c8:	27 95       	ror	r18
    19ca:	ba 95       	dec	r27
    19cc:	c9 f7       	brne	.-14     	; 0x19c0 <__ultoa_invert+0xa6>
    19ce:	62 0f       	add	r22, r18
    19d0:	73 1f       	adc	r23, r19
    19d2:	84 1f       	adc	r24, r20
    19d4:	95 1f       	adc	r25, r21
    19d6:	a0 1d       	adc	r26, r0
    19d8:	08 95       	ret

000019da <__mulqi3>:
    19da:	00 24       	eor	r0, r0

000019dc <__mulqi3_loop>:
    19dc:	80 fd       	sbrc	r24, 0
    19de:	06 0e       	add	r0, r22
    19e0:	66 0f       	add	r22, r22
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <__mulqi3_exit>
    19e4:	86 95       	lsr	r24
    19e6:	d1 f7       	brne	.-12     	; 0x19dc <__mulqi3_loop>

000019e8 <__mulqi3_exit>:
    19e8:	80 2d       	mov	r24, r0
    19ea:	08 95       	ret

000019ec <__mulsi3>:
    19ec:	ee 27       	eor	r30, r30
    19ee:	ff 27       	eor	r31, r31

000019f0 <__mulsi3_helper>:
    19f0:	aa 27       	eor	r26, r26
    19f2:	bb 27       	eor	r27, r27
    19f4:	08 c0       	rjmp	.+16     	; 0x1a06 <__mulsi3_helper+0x16>
    19f6:	a2 0f       	add	r26, r18
    19f8:	b3 1f       	adc	r27, r19
    19fa:	e4 1f       	adc	r30, r20
    19fc:	f5 1f       	adc	r31, r21
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	44 1f       	adc	r20, r20
    1a04:	55 1f       	adc	r21, r21
    1a06:	96 95       	lsr	r25
    1a08:	87 95       	ror	r24
    1a0a:	77 95       	ror	r23
    1a0c:	67 95       	ror	r22
    1a0e:	98 f3       	brcs	.-26     	; 0x19f6 <__mulsi3_helper+0x6>
    1a10:	70 40       	sbci	r23, 0x00	; 0
    1a12:	a9 f7       	brne	.-22     	; 0x19fe <__mulsi3_helper+0xe>
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	99 f7       	brne	.-26     	; 0x19fe <__mulsi3_helper+0xe>
    1a18:	bd 01       	movw	r22, r26
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	08 95       	ret

00001a1e <__udivmodsi4>:
    1a1e:	a1 e2       	ldi	r26, 0x21	; 33
    1a20:	1a 2e       	mov	r1, r26
    1a22:	aa 1b       	sub	r26, r26
    1a24:	bb 1b       	sub	r27, r27
    1a26:	fd 01       	movw	r30, r26
    1a28:	0d c0       	rjmp	.+26     	; 0x1a44 <__udivmodsi4_ep>

00001a2a <__udivmodsi4_loop>:
    1a2a:	aa 1f       	adc	r26, r26
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	ee 1f       	adc	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	a2 17       	cp	r26, r18
    1a34:	b3 07       	cpc	r27, r19
    1a36:	e4 07       	cpc	r30, r20
    1a38:	f5 07       	cpc	r31, r21
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <__udivmodsi4_ep>
    1a3c:	a2 1b       	sub	r26, r18
    1a3e:	b3 0b       	sbc	r27, r19
    1a40:	e4 0b       	sbc	r30, r20
    1a42:	f5 0b       	sbc	r31, r21

00001a44 <__udivmodsi4_ep>:
    1a44:	66 1f       	adc	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	1a 94       	dec	r1
    1a4e:	69 f7       	brne	.-38     	; 0x1a2a <__udivmodsi4_loop>
    1a50:	60 95       	com	r22
    1a52:	70 95       	com	r23
    1a54:	80 95       	com	r24
    1a56:	90 95       	com	r25
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	bd 01       	movw	r22, r26
    1a5e:	cf 01       	movw	r24, r30
    1a60:	08 95       	ret

00001a62 <__prologue_saves__>:
    1a62:	2f 92       	push	r2
    1a64:	3f 92       	push	r3
    1a66:	4f 92       	push	r4
    1a68:	5f 92       	push	r5
    1a6a:	6f 92       	push	r6
    1a6c:	7f 92       	push	r7
    1a6e:	8f 92       	push	r8
    1a70:	9f 92       	push	r9
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	ca 1b       	sub	r28, r26
    1a8c:	db 0b       	sbc	r29, r27
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	09 94       	ijmp

00001a9a <__epilogue_restores__>:
    1a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a9c:	39 88       	ldd	r3, Y+17	; 0x11
    1a9e:	48 88       	ldd	r4, Y+16	; 0x10
    1aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aac:	b9 84       	ldd	r11, Y+9	; 0x09
    1aae:	c8 84       	ldd	r12, Y+8	; 0x08
    1ab0:	df 80       	ldd	r13, Y+7	; 0x07
    1ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    1aba:	aa 81       	ldd	r26, Y+2	; 0x02
    1abc:	b9 81       	ldd	r27, Y+1	; 0x01
    1abe:	ce 0f       	add	r28, r30
    1ac0:	d1 1d       	adc	r29, r1
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	ed 01       	movw	r28, r26
    1ace:	08 95       	ret

00001ad0 <_exit>:
    1ad0:	f8 94       	cli

00001ad2 <__stop_program>:
    1ad2:	ff cf       	rjmp	.-2      	; 0x1ad2 <__stop_program>
