
AntennaCtrl70.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00001a94  00001b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800188  00800188  00001bb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000063bb  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c24  00000000  00000000  00008337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038c8  00000000  00000000  00009f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  0000d824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002631  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e65  00000000  00000000  00010765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  000145ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
       6:	00 00       	nop
       8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
       a:	00 00       	nop
       c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
       e:	00 00       	nop
      10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
      12:	00 00       	nop
      14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
      16:	00 00       	nop
      18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
      1e:	00 00       	nop
      20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
      22:	00 00       	nop
      24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	30 c4       	rjmp	.+2144   	; 0x88e <__vector_11>
      2e:	00 00       	nop
      30:	d7 c4       	rjmp	.+2478   	; 0x9e0 <__vector_12>
      32:	00 00       	nop
      34:	8d c0       	rjmp	.+282    	; 0x150 <__bad_interrupt>
      36:	00 00       	nop
      38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
      3e:	00 00       	nop
      40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
      42:	00 00       	nop
      44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
      46:	00 00       	nop
      48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
      52:	00 00       	nop
      54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
      56:	00 00       	nop
      58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
      5e:	00 00       	nop
      60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
      62:	00 00       	nop
      64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
      66:	00 00       	nop
      68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
      84:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
      94:	6c 00 65 00 72 00 00 00                             l.e.r...

0000009c <ManufacturerString>:
      9c:	26 03 41 00 6e 00 74 00 65 00 6e 00 6e 00 61 00     &.A.n.t.e.n.n.a.
      ac:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
      bc:	6c 00 65 00 72 00 00 00                             l.e.r...

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
      c8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      d8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      e8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      f8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d4 e0       	ldi	r29, 0x04	; 4
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e4 e9       	ldi	r30, 0x94	; 148
     12c:	fa e1       	ldi	r31, 0x1A	; 26
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
     130:	05 90       	lpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	a8 38       	cpi	r26, 0x88	; 136
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	a8 e8       	ldi	r26, 0x88	; 136
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	a7 3a       	cpi	r26, 0xA7	; 167
     146:	b2 07       	cpc	r27, r18
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	86 d1       	rcall	.+780    	; 0x458 <main>
     14c:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <_exit>

00000150 <__bad_interrupt>:
     150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <set_mux>:
	_delay_ms(1);
	SPI_MasterTransmit(cmd_hi);
	SPI_MasterTransmit(cmd_lo);
	PORTB |= 0b00000001;
	return 0;
}
     152:	cf 93       	push	r28
     154:	f8 2f       	mov	r31, r24
     156:	e9 2f       	mov	r30, r25
     158:	c6 2f       	mov	r28, r22
     15a:	88 b1       	in	r24, 0x08	; 8
     15c:	8f 73       	andi	r24, 0x3F	; 63
     15e:	88 b9       	out	0x08, r24	; 8
     160:	3b b1       	in	r19, 0x0b	; 11
     162:	8f 2f       	mov	r24, r31
     164:	60 e1       	ldi	r22, 0x10	; 16
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	8a d7       	rcall	.+3860   	; 0x107e <__divmodhi4>
     16a:	28 2f       	mov	r18, r24
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	30 78       	andi	r19, 0x80	; 128
     170:	82 2f       	mov	r24, r18
     172:	83 2b       	or	r24, r19
     174:	2f 2f       	mov	r18, r31
     176:	3e 2f       	mov	r19, r30
     178:	37 ff       	sbrs	r19, 7
     17a:	02 c0       	rjmp	.+4      	; 0x180 <set_mux+0x2e>
     17c:	21 5f       	subi	r18, 0xF1	; 241
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	94 e0       	ldi	r25, 0x04	; 4
     182:	35 95       	asr	r19
     184:	27 95       	ror	r18
     186:	9a 95       	dec	r25
     188:	e1 f7       	brne	.-8      	; 0x182 <set_mux+0x30>
     18a:	27 70       	andi	r18, 0x07	; 7
     18c:	22 95       	swap	r18
     18e:	20 7f       	andi	r18, 0xF0	; 240
     190:	28 2b       	or	r18, r24
     192:	2b b9       	out	0x0b, r18	; 11
     194:	cc 23       	and	r28, r28
     196:	49 f0       	breq	.+18     	; 0x1aa <set_mux+0x58>
     198:	41 11       	cpse	r20, r1
     19a:	16 c0       	rjmp	.+44     	; 0x1c8 <set_mux+0x76>
     19c:	47 98       	cbi	0x08, 7	; 8
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	8a 95       	dec	r24
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <set_mux+0x4e>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <set_mux+0x54>
     1a6:	46 9a       	sbi	0x08, 6	; 8
     1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <set_mux+0x76>
     1aa:	44 23       	and	r20, r20
     1ac:	39 f0       	breq	.+14     	; 0x1bc <set_mux+0x6a>
     1ae:	46 98       	cbi	0x08, 6	; 8
     1b0:	8a e0       	ldi	r24, 0x0A	; 10
     1b2:	8a 95       	dec	r24
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <set_mux+0x60>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <set_mux+0x66>
     1b8:	47 9a       	sbi	0x08, 7	; 8
     1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <set_mux+0x76>
     1bc:	47 98       	cbi	0x08, 7	; 8
     1be:	8a e1       	ldi	r24, 0x1A	; 26
     1c0:	8a 95       	dec	r24
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <set_mux+0x6e>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <set_mux+0x74>
     1c6:	46 98       	cbi	0x08, 6	; 8
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <set_COM>:
     1cc:	88 23       	and	r24, r24
     1ce:	19 f0       	breq	.+6      	; 0x1d6 <set_COM+0xa>
     1d0:	66 23       	and	r22, r22
     1d2:	51 f0       	breq	.+20     	; 0x1e8 <set_COM+0x1c>
     1d4:	08 95       	ret
     1d6:	66 23       	and	r22, r22
     1d8:	71 f0       	breq	.+28     	; 0x1f6 <set_COM+0x2a>
     1da:	44 98       	cbi	0x08, 4	; 8
     1dc:	8a e0       	ldi	r24, 0x0A	; 10
     1de:	8a 95       	dec	r24
     1e0:	f1 f7       	brne	.-4      	; 0x1de <set_COM+0x12>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <set_COM+0x18>
     1e4:	45 9a       	sbi	0x08, 5	; 8
     1e6:	08 95       	ret
     1e8:	45 98       	cbi	0x08, 5	; 8
     1ea:	8a e0       	ldi	r24, 0x0A	; 10
     1ec:	8a 95       	dec	r24
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <set_COM+0x20>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <set_COM+0x26>
     1f2:	44 9a       	sbi	0x08, 4	; 8
     1f4:	08 95       	ret
     1f6:	45 98       	cbi	0x08, 5	; 8
     1f8:	8a e1       	ldi	r24, 0x1A	; 26
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <set_COM+0x2e>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <set_COM+0x34>
     200:	44 98       	cbi	0x08, 4	; 8
     202:	08 95       	ret

00000204 <SendPulse>:
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	66 34       	cpi	r22, 0x46	; 70
     20a:	71 05       	cpc	r23, r1
     20c:	08 f0       	brcs	.+2      	; 0x210 <SendPulse+0xc>
     20e:	4e c0       	rjmp	.+156    	; 0x2ac <SendPulse+0xa8>
     210:	eb 01       	movw	r28, r22
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	88 23       	and	r24, r24
     218:	09 f1       	breq	.+66     	; 0x25c <SendPulse+0x58>
     21a:	ce 01       	movw	r24, r28
     21c:	9a df       	rcall	.-204    	; 0x152 <set_mux>
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	d4 df       	rcall	.-88     	; 0x1cc <set_COM>
     224:	8f e9       	ldi	r24, 0x9F	; 159
     226:	9f e0       	ldi	r25, 0x0F	; 15
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <SendPulse+0x24>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <SendPulse+0x2a>
     22e:	00 00       	nop
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	cb df       	rcall	.-106    	; 0x1cc <set_COM>
     236:	41 e0       	ldi	r20, 0x01	; 1
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	89 df       	rcall	.-238    	; 0x152 <set_mux>
     240:	8f e8       	ldi	r24, 0x8F	; 143
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <SendPulse+0x40>
     248:	00 c0       	rjmp	.+0      	; 0x24a <SendPulse+0x46>
     24a:	00 00       	nop
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	bd df       	rcall	.-134    	; 0x1cc <set_COM>
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	ce 01       	movw	r24, r28
     258:	7c df       	rcall	.-264    	; 0x152 <set_mux>
     25a:	1f c0       	rjmp	.+62     	; 0x29a <SendPulse+0x96>
     25c:	ce 01       	movw	r24, r28
     25e:	79 df       	rcall	.-270    	; 0x152 <set_mux>
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	b3 df       	rcall	.-154    	; 0x1cc <set_COM>
     266:	8f e9       	ldi	r24, 0x9F	; 159
     268:	9f e0       	ldi	r25, 0x0F	; 15
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <SendPulse+0x66>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <SendPulse+0x6c>
     270:	00 00       	nop
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	ce 01       	movw	r24, r28
     278:	6c df       	rcall	.-296    	; 0x152 <set_mux>
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	a6 df       	rcall	.-180    	; 0x1cc <set_COM>
     280:	8f e8       	ldi	r24, 0x8F	; 143
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <SendPulse+0x80>
     288:	00 c0       	rjmp	.+0      	; 0x28a <SendPulse+0x86>
     28a:	00 00       	nop
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	ce 01       	movw	r24, r28
     292:	5f df       	rcall	.-322    	; 0x152 <set_mux>
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	99 df       	rcall	.-206    	; 0x1cc <set_COM>
     29a:	8f e9       	ldi	r24, 0x9F	; 159
     29c:	9f e0       	ldi	r25, 0x0F	; 15
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <SendPulse+0x9a>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <SendPulse+0xa0>
     2a4:	00 00       	nop
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <SendPulse+0xac>
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	9f ef       	ldi	r25, 0xFF	; 255
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <usb_rx>:
     2b6:	cf 92       	push	r12
     2b8:	df 92       	push	r13
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	6e 97       	sbiw	r28, 0x1e	; 30
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	4a e8       	ldi	r20, 0x8A	; 138
     2d8:	51 e0       	ldi	r21, 0x01	; 1
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	ce 01       	movw	r24, r28
     2e0:	45 96       	adiw	r24, 0x15	; 21
     2e2:	0e 94 96 09 	call	0x132c	; 0x132c <fgets>
     2e6:	89 2b       	or	r24, r25
     2e8:	09 f4       	brne	.+2      	; 0x2ec <usb_rx+0x36>
     2ea:	84 c0       	rjmp	.+264    	; 0x3f4 <usb_rx+0x13e>
     2ec:	8d 89       	ldd	r24, Y+21	; 0x15
     2ee:	8b 32       	cpi	r24, 0x2B	; 43
     2f0:	39 f0       	breq	.+14     	; 0x300 <usb_rx+0x4a>
     2f2:	8d 32       	cpi	r24, 0x2D	; 45
     2f4:	29 f0       	breq	.+10     	; 0x300 <usb_rx+0x4a>
     2f6:	6a e8       	ldi	r22, 0x8A	; 138
     2f8:	71 e0       	ldi	r23, 0x01	; 1
     2fa:	8b e1       	ldi	r24, 0x1B	; 27
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	32 c0       	rjmp	.+100    	; 0x364 <usb_rx+0xae>
     300:	de 01       	movw	r26, r28
     302:	56 96       	adiw	r26, 0x16	; 22
     304:	fe 01       	movw	r30, r28
     306:	3b 96       	adiw	r30, 0x0b	; 11
     308:	be 01       	movw	r22, r28
     30a:	6c 5e       	subi	r22, 0xEC	; 236
     30c:	7f 4f       	sbci	r23, 0xFF	; 255
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	cf 01       	movw	r24, r30
     314:	4d 91       	ld	r20, X+
     316:	4c 35       	cpi	r20, 0x5C	; 92
     318:	29 f0       	breq	.+10     	; 0x324 <usb_rx+0x6e>
     31a:	21 15       	cp	r18, r1
     31c:	31 05       	cpc	r19, r1
     31e:	11 f4       	brne	.+4      	; 0x324 <usb_rx+0x6e>
     320:	40 83       	st	Z, r20
     322:	02 c0       	rjmp	.+4      	; 0x328 <usb_rx+0x72>
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	31 96       	adiw	r30, 0x01	; 1
     32a:	e6 17       	cp	r30, r22
     32c:	f7 07       	cpc	r31, r23
     32e:	91 f7       	brne	.-28     	; 0x314 <usb_rx+0x5e>
     330:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <errno+0x1>
     334:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <errno>
     338:	4a e0       	ldi	r20, 0x0A	; 10
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	c5 d6       	rcall	.+3466   	; 0x10cc <strtol>
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <errno>
     34a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <errno+0x1>
     34e:	89 2b       	or	r24, r25
     350:	29 f4       	brne	.+10     	; 0x35c <usb_rx+0xa6>
     352:	c1 14       	cp	r12, r1
     354:	d1 04       	cpc	r13, r1
     356:	e1 04       	cpc	r14, r1
     358:	f1 04       	cpc	r15, r1
     35a:	39 f4       	brne	.+14     	; 0x36a <usb_rx+0xb4>
     35c:	6a e8       	ldi	r22, 0x8A	; 138
     35e:	71 e0       	ldi	r23, 0x01	; 1
     360:	8c e3       	ldi	r24, 0x3C	; 60
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 bf 09 	call	0x137e	; 0x137e <fputs>
     368:	45 c0       	rjmp	.+138    	; 0x3f4 <usb_rx+0x13e>
     36a:	8d 89       	ldd	r24, Y+21	; 0x15
     36c:	8b 32       	cpi	r24, 0x2B	; 43
     36e:	f1 f4       	brne	.+60     	; 0x3ac <usb_rx+0xf6>
     370:	b6 01       	movw	r22, r12
     372:	61 50       	subi	r22, 0x01	; 1
     374:	71 09       	sbc	r23, r1
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	45 df       	rcall	.-374    	; 0x204 <SendPulse>
     37a:	97 ff       	sbrs	r25, 7
     37c:	05 c0       	rjmp	.+10     	; 0x388 <usb_rx+0xd2>
     37e:	6a e8       	ldi	r22, 0x8A	; 138
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	88 e4       	ldi	r24, 0x48	; 72
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	ee cf       	rjmp	.-36     	; 0x364 <usb_rx+0xae>
     388:	df 92       	push	r13
     38a:	cf 92       	push	r12
     38c:	85 e5       	ldi	r24, 0x55	; 85
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	9f 93       	push	r25
     392:	8f 93       	push	r24
     394:	8e 01       	movw	r16, r28
     396:	0f 5f       	subi	r16, 0xFF	; 255
     398:	1f 4f       	sbci	r17, 0xFF	; 255
     39a:	1f 93       	push	r17
     39c:	0f 93       	push	r16
     39e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <sprintf>
     3a2:	6a e8       	ldi	r22, 0x8A	; 138
     3a4:	71 e0       	ldi	r23, 0x01	; 1
     3a6:	88 e5       	ldi	r24, 0x58	; 88
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	19 c0       	rjmp	.+50     	; 0x3de <usb_rx+0x128>
     3ac:	8d 32       	cpi	r24, 0x2D	; 45
     3ae:	11 f5       	brne	.+68     	; 0x3f4 <usb_rx+0x13e>
     3b0:	b6 01       	movw	r22, r12
     3b2:	61 50       	subi	r22, 0x01	; 1
     3b4:	71 09       	sbc	r23, r1
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	25 df       	rcall	.-438    	; 0x204 <SendPulse>
     3ba:	97 fd       	sbrc	r25, 7
     3bc:	e0 cf       	rjmp	.-64     	; 0x37e <usb_rx+0xc8>
     3be:	df 92       	push	r13
     3c0:	cf 92       	push	r12
     3c2:	85 e5       	ldi	r24, 0x55	; 85
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	8e 01       	movw	r16, r28
     3cc:	0f 5f       	subi	r16, 0xFF	; 255
     3ce:	1f 4f       	sbci	r17, 0xFF	; 255
     3d0:	1f 93       	push	r17
     3d2:	0f 93       	push	r16
     3d4:	fd d7       	rcall	.+4090   	; 0x13d0 <sprintf>
     3d6:	6a e8       	ldi	r22, 0x8A	; 138
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	80 e7       	ldi	r24, 0x70	; 112
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	cf d7       	rcall	.+3998   	; 0x137e <fputs>
     3e0:	6a e8       	ldi	r22, 0x8A	; 138
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	c8 01       	movw	r24, r16
     3e6:	cb d7       	rcall	.+3990   	; 0x137e <fputs>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	6e 96       	adiw	r28, 0x1e	; 30
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <SPI_MasterInit>:
     412:	8f e4       	ldi	r24, 0x4F	; 79
     414:	84 b9       	out	0x04, r24	; 4
     416:	83 e5       	ldi	r24, 0x53	; 83
     418:	8c bd       	out	0x2c, r24	; 44
     41a:	28 9a       	sbi	0x05, 0	; 5
     41c:	08 95       	ret

0000041e <setupHardware>:
     41e:	84 b7       	in	r24, 0x34	; 52
     420:	87 7f       	andi	r24, 0xF7	; 247
     422:	84 bf       	out	0x34, r24	; 52
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	a8 95       	wdr
     42a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     42e:	88 61       	ori	r24, 0x18	; 24
     430:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     434:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     438:	0f be       	out	0x3f, r0	; 63
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     446:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	11 d2       	rcall	.+1058   	; 0x870 <USB_Init>
     44e:	8f e7       	ldi	r24, 0x7F	; 127
     450:	8a b9       	out	0x0a, r24	; 10
     452:	80 ef       	ldi	r24, 0xF0	; 240
     454:	87 b9       	out	0x07, r24	; 7
     456:	dd cf       	rjmp	.-70     	; 0x412 <SPI_MasterInit>

00000458 <main>:
     458:	e2 df       	rcall	.-60     	; 0x41e <setupHardware>
     45a:	6a e8       	ldi	r22, 0x8A	; 138
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	49 d5       	rcall	.+2706   	; 0xef6 <CDC_Device_CreateStream>
     464:	78 94       	sei
     466:	78 94       	sei
     468:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     46c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
     470:	89 2b       	or	r24, r25
     472:	d1 f3       	breq	.-12     	; 0x468 <main+0x10>
     474:	20 df       	rcall	.-448    	; 0x2b6 <usb_rx>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	f1 d4       	rcall	.+2530   	; 0xe5e <CDC_Device_USBTask>
     47c:	4c d4       	rcall	.+2200   	; 0xd16 <USB_USBTask>
     47e:	f4 cf       	rjmp	.-24     	; 0x468 <main+0x10>

00000480 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    usb_connected = 1;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x1>
     488:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
     48c:	08 95       	ret

0000048e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    usb_connected = 0;
     48e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__data_end+0x1>
     492:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__data_end>
     496:	08 95       	ret

00000498 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	56 c4       	rjmp	.+2220   	; 0xd4a <CDC_Device_ConfigureEndpoints>

0000049e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	3d c5       	rjmp	.+2682   	; 0xf1e <CDC_Device_ProcessControlRequest>

000004a4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4a4:	29 2f       	mov	r18, r25
     4a6:	33 27       	eor	r19, r19
     4a8:	22 30       	cpi	r18, 0x02	; 2
     4aa:	31 05       	cpc	r19, r1
     4ac:	59 f0       	breq	.+22     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x20>
     4ae:	23 30       	cpi	r18, 0x03	; 3
     4b0:	31 05       	cpc	r19, r1
     4b2:	69 f0       	breq	.+26     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x2a>
     4b4:	21 30       	cpi	r18, 0x01	; 1
     4b6:	31 05       	cpc	r19, r1
     4b8:	e9 f4       	brne	.+58     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4ba:	82 e1       	ldi	r24, 0x12	; 18
     4bc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4be:	26 e0       	ldi	r18, 0x06	; 6
     4c0:	31 e0       	ldi	r19, 0x01	; 1
     4c2:	1c c0       	rjmp	.+56     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4c4:	8e e3       	ldi	r24, 0x3E	; 62
     4c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     4c8:	28 ec       	ldi	r18, 0xC8	; 200
     4ca:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     4cc:	17 c0       	rjmp	.+46     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     4ce:	99 27       	eor	r25, r25
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	91 05       	cpc	r25, r1
     4d4:	49 f0       	breq	.+18     	; 0x4e8 <CALLBACK_USB_GetDescriptor+0x44>
     4d6:	28 f0       	brcs	.+10     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x3e>
     4d8:	02 97       	sbiw	r24, 0x02	; 2
     4da:	61 f4       	brne	.+24     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4dc:	e4 e7       	ldi	r30, 0x74	; 116
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4e2:	e4 ec       	ldi	r30, 0xC4	; 196
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4e8:	ec e9       	ldi	r30, 0x9C	; 156
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4ec:	84 91       	lpm	r24, Z
     4ee:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     4f0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4fc:	fa 01       	movw	r30, r20
     4fe:	31 83       	std	Z+1, r19	; 0x01
     500:	20 83       	st	Z, r18
	return Size;
}
     502:	08 95       	ret

00000504 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     504:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x6>
     508:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x7>
     50c:	26 17       	cp	r18, r22
     50e:	37 07       	cpc	r19, r23
     510:	48 f0       	brcs	.+18     	; 0x524 <Endpoint_Write_Control_Stream_LE+0x20>
     512:	61 15       	cp	r22, r1
     514:	71 05       	cpc	r23, r1
     516:	39 f4       	brne	.+14     	; 0x526 <Endpoint_Write_Control_Stream_LE+0x22>
     518:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     51c:	2e 77       	andi	r18, 0x7E	; 126
     51e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     522:	01 c0       	rjmp	.+2      	; 0x526 <Endpoint_Write_Control_Stream_LE+0x22>
     524:	b9 01       	movw	r22, r18
     526:	fc 01       	movw	r30, r24
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	61 15       	cp	r22, r1
     52c:	71 05       	cpc	r23, r1
     52e:	61 f1       	breq	.+88     	; 0x588 <Endpoint_Write_Control_Stream_LE+0x84>
     530:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     534:	88 23       	and	r24, r24
     536:	d9 f1       	breq	.+118    	; 0x5ae <Endpoint_Write_Control_Stream_LE+0xaa>
     538:	85 30       	cpi	r24, 0x05	; 5
     53a:	d9 f1       	breq	.+118    	; 0x5b2 <Endpoint_Write_Control_Stream_LE+0xae>
     53c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     540:	83 fd       	sbrc	r24, 3
     542:	39 c0       	rjmp	.+114    	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0xb2>
     544:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     548:	82 fd       	sbrc	r24, 2
     54a:	2b c0       	rjmp	.+86     	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0x9e>
     54c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     550:	80 ff       	sbrs	r24, 0
     552:	eb cf       	rjmp	.-42     	; 0x52a <Endpoint_Write_Control_Stream_LE+0x26>
     554:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	61 15       	cp	r22, r1
     55c:	71 05       	cpc	r23, r1
     55e:	51 f0       	breq	.+20     	; 0x574 <Endpoint_Write_Control_Stream_LE+0x70>
     560:	88 30       	cpi	r24, 0x08	; 8
     562:	91 05       	cpc	r25, r1
     564:	38 f4       	brcc	.+14     	; 0x574 <Endpoint_Write_Control_Stream_LE+0x70>
     566:	21 91       	ld	r18, Z+
     568:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     56c:	61 50       	subi	r22, 0x01	; 1
     56e:	71 09       	sbc	r23, r1
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	f3 cf       	rjmp	.-26     	; 0x55a <Endpoint_Write_Control_Stream_LE+0x56>
     574:	21 e0       	ldi	r18, 0x01	; 1
     576:	08 97       	sbiw	r24, 0x08	; 8
     578:	09 f0       	breq	.+2      	; 0x57c <Endpoint_Write_Control_Stream_LE+0x78>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     580:	8e 77       	andi	r24, 0x7E	; 126
     582:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     586:	d1 cf       	rjmp	.-94     	; 0x52a <Endpoint_Write_Control_Stream_LE+0x26>
     588:	21 11       	cpse	r18, r1
     58a:	d2 cf       	rjmp	.-92     	; 0x530 <Endpoint_Write_Control_Stream_LE+0x2c>
     58c:	0a c0       	rjmp	.+20     	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0x9e>
     58e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     592:	88 23       	and	r24, r24
     594:	61 f0       	breq	.+24     	; 0x5ae <Endpoint_Write_Control_Stream_LE+0xaa>
     596:	85 30       	cpi	r24, 0x05	; 5
     598:	61 f0       	breq	.+24     	; 0x5b2 <Endpoint_Write_Control_Stream_LE+0xae>
     59a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     59e:	83 fd       	sbrc	r24, 3
     5a0:	0a c0       	rjmp	.+20     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0xb2>
     5a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5a6:	82 ff       	sbrs	r24, 2
     5a8:	f2 cf       	rjmp	.-28     	; 0x58e <Endpoint_Write_Control_Stream_LE+0x8a>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	08 95       	ret
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	08 95       	ret
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret

000005ba <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5ba:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x6>
     5be:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x7>
     5c2:	26 17       	cp	r18, r22
     5c4:	37 07       	cpc	r19, r23
     5c6:	48 f0       	brcs	.+18     	; 0x5da <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5c8:	61 15       	cp	r22, r1
     5ca:	71 05       	cpc	r23, r1
     5cc:	39 f4       	brne	.+14     	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ce:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5d2:	2e 77       	andi	r18, 0x7E	; 126
     5d4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x22>
     5da:	b9 01       	movw	r22, r18
     5dc:	fc 01       	movw	r30, r24
     5de:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5e0:	61 15       	cp	r22, r1
     5e2:	71 05       	cpc	r23, r1
     5e4:	79 f1       	breq	.+94     	; 0x644 <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ea:	88 23       	and	r24, r24
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0x36>
     5ee:	3d c0       	rjmp	.+122    	; 0x66a <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5f0:	85 30       	cpi	r24, 0x05	; 5
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0x3c>
     5f4:	3c c0       	rjmp	.+120    	; 0x66e <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5fa:	83 fd       	sbrc	r24, 3
     5fc:	3a c0       	rjmp	.+116    	; 0x672 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     602:	82 fd       	sbrc	r24, 2
     604:	2c c0       	rjmp	.+88     	; 0x65e <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     606:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
     60a:	80 ff       	sbrs	r24, 0
     60c:	e9 cf       	rjmp	.-46     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     60e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     612:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     614:	61 15       	cp	r22, r1
     616:	71 05       	cpc	r23, r1
     618:	59 f0       	breq	.+22     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x76>
     61a:	88 30       	cpi	r24, 0x08	; 8
     61c:	91 05       	cpc	r25, r1
     61e:	40 f4       	brcc	.+16     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     620:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     622:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     626:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     628:	61 50       	subi	r22, 0x01	; 1
     62a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	f2 cf       	rjmp	.-28     	; 0x614 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	08 97       	sbiw	r24, 0x08	; 8
     634:	09 f0       	breq	.+2      	; 0x638 <Endpoint_Write_Control_PStream_LE+0x7e>
     636:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     63c:	8e 77       	andi	r24, 0x7E	; 126
     63e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     642:	ce cf       	rjmp	.-100    	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     644:	21 11       	cpse	r18, r1
     646:	cf cf       	rjmp	.-98     	; 0x5e6 <Endpoint_Write_Control_PStream_LE+0x2c>
     648:	0a c0       	rjmp	.+20     	; 0x65e <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     64a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     64e:	88 23       	and	r24, r24
     650:	61 f0       	breq	.+24     	; 0x66a <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     652:	85 30       	cpi	r24, 0x05	; 5
     654:	61 f0       	breq	.+24     	; 0x66e <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     656:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     65a:	83 fd       	sbrc	r24, 3
     65c:	0a c0       	rjmp	.+20     	; 0x672 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     65e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     662:	82 ff       	sbrs	r24, 2
     664:	f2 cf       	rjmp	.-28     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     672:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     674:	08 95       	ret

00000676 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     676:	98 2f       	mov	r25, r24
     678:	95 30       	cpi	r25, 0x05	; 5
     67a:	68 f5       	brcc	.+90     	; 0x6d6 <Endpoint_ConfigureEndpoint_Prv+0x60>
     67c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     680:	98 17       	cp	r25, r24
     682:	39 f0       	breq	.+14     	; 0x692 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     684:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     688:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     68c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     690:	03 c0       	rjmp	.+6      	; 0x698 <Endpoint_ConfigureEndpoint_Prv+0x22>
     692:	24 2f       	mov	r18, r20
     694:	76 2f       	mov	r23, r22
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	21 fd       	sbrc	r18, 1
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     69c:	9f 5f       	subi	r25, 0xFF	; 255
     69e:	ec cf       	rjmp	.-40     	; 0x678 <Endpoint_ConfigureEndpoint_Prv+0x2>
     6a0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6a4:	3e 7f       	andi	r19, 0xFE	; 254
     6a6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6aa:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     6ae:	3d 7f       	andi	r19, 0xFD	; 253
     6b0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     6b4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6b8:	31 60       	ori	r19, 0x01	; 1
     6ba:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     6be:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     6c2:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     6c6:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     6ca:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     6ce:	27 fd       	sbrc	r18, 7
     6d0:	e5 cf       	rjmp	.-54     	; 0x69c <Endpoint_ConfigureEndpoint_Prv+0x26>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	08 95       	ret
     6d6:	8f 70       	andi	r24, 0x0F	; 15
     6d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	08 95       	ret

000006e0 <Endpoint_ConfigureEndpointTable>:
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	06 2f       	mov	r16, r22
     6ea:	ec 01       	movw	r28, r24
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	10 17       	cp	r17, r16
     6f0:	71 f1       	breq	.+92     	; 0x74e <Endpoint_ConfigureEndpointTable+0x6e>
     6f2:	98 81       	ld	r25, Y
     6f4:	91 11       	cpse	r25, r1
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <Endpoint_ConfigureEndpointTable+0x1e>
     6f8:	1f 5f       	subi	r17, 0xFF	; 255
     6fa:	25 96       	adiw	r28, 0x05	; 5
     6fc:	f8 cf       	rjmp	.-16     	; 0x6ee <Endpoint_ConfigureEndpointTable+0xe>
     6fe:	2c 81       	ldd	r18, Y+4	; 0x04
     700:	a9 81       	ldd	r26, Y+1	; 0x01
     702:	ba 81       	ldd	r27, Y+2	; 0x02
     704:	6b 81       	ldd	r22, Y+3	; 0x03
     706:	89 2f       	mov	r24, r25
     708:	8f 70       	andi	r24, 0x0F	; 15
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	10 f0       	brcs	.+4      	; 0x712 <Endpoint_ConfigureEndpointTable+0x32>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	1f c0       	rjmp	.+62     	; 0x750 <Endpoint_ConfigureEndpointTable+0x70>
     712:	22 30       	cpi	r18, 0x02	; 2
     714:	10 f4       	brcc	.+4      	; 0x71a <Endpoint_ConfigureEndpointTable+0x3a>
     716:	42 e0       	ldi	r20, 0x02	; 2
     718:	01 c0       	rjmp	.+2      	; 0x71c <Endpoint_ConfigureEndpointTable+0x3c>
     71a:	46 e0       	ldi	r20, 0x06	; 6
     71c:	e8 e0       	ldi	r30, 0x08	; 8
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	ea 17       	cp	r30, r26
     724:	fb 07       	cpc	r31, r27
     726:	20 f4       	brcc	.+8      	; 0x730 <Endpoint_ConfigureEndpointTable+0x50>
     728:	2f 5f       	subi	r18, 0xFF	; 255
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	f9 cf       	rjmp	.-14     	; 0x722 <Endpoint_ConfigureEndpointTable+0x42>
     730:	22 95       	swap	r18
     732:	20 7f       	andi	r18, 0xF0	; 240
     734:	42 2b       	or	r20, r18
     736:	62 95       	swap	r22
     738:	66 0f       	add	r22, r22
     73a:	66 0f       	add	r22, r22
     73c:	60 7c       	andi	r22, 0xC0	; 192
     73e:	99 1f       	adc	r25, r25
     740:	99 27       	eor	r25, r25
     742:	99 1f       	adc	r25, r25
     744:	69 2b       	or	r22, r25
     746:	97 df       	rcall	.-210    	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
     748:	81 11       	cpse	r24, r1
     74a:	d6 cf       	rjmp	.-84     	; 0x6f8 <Endpoint_ConfigureEndpointTable+0x18>
     74c:	e0 cf       	rjmp	.-64     	; 0x70e <Endpoint_ConfigureEndpointTable+0x2e>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     75a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
     75e:	87 ff       	sbrs	r24, 7
     760:	11 c0       	rjmp	.+34     	; 0x784 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     766:	82 fd       	sbrc	r24, 2
     768:	05 c0       	rjmp	.+10     	; 0x774 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     76a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     76e:	81 11       	cpse	r24, r1
     770:	f8 cf       	rjmp	.-16     	; 0x762 <Endpoint_ClearStatusStage+0x8>
     772:	11 c0       	rjmp	.+34     	; 0x796 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     778:	8b 77       	andi	r24, 0x7B	; 123
     77a:	0b c0       	rjmp	.+22     	; 0x792 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     77c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     780:	88 23       	and	r24, r24
     782:	49 f0       	breq	.+18     	; 0x796 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     784:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     788:	80 ff       	sbrs	r24, 0
     78a:	f8 cf       	rjmp	.-16     	; 0x77c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     78c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     790:	8e 77       	andi	r24, 0x7E	; 126
     792:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     796:	08 95       	ret

00000798 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     798:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     79c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     7a0:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7a2:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     7a6:	84 2f       	mov	r24, r20
     7a8:	81 70       	andi	r24, 0x01	; 1
     7aa:	40 ff       	sbrs	r20, 0
     7ac:	23 c0       	rjmp	.+70     	; 0x7f4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7b2:	80 fd       	sbrc	r24, 0
     7b4:	1d c0       	rjmp	.+58     	; 0x7f0 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7b6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7ba:	88 23       	and	r24, r24
     7bc:	99 f0       	breq	.+38     	; 0x7e4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7be:	85 30       	cpi	r24, 0x05	; 5
     7c0:	99 f0       	breq	.+38     	; 0x7e8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7c6:	85 fd       	sbrc	r24, 5
     7c8:	11 c0       	rjmp	.+34     	; 0x7ec <Endpoint_WaitUntilReady+0x54>
     7ca:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     7ce:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7d2:	24 17       	cp	r18, r20
     7d4:	35 07       	cpc	r19, r21
     7d6:	29 f3       	breq	.-54     	; 0x7a2 <Endpoint_WaitUntilReady+0xa>
     7d8:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7da:	11 f0       	breq	.+4      	; 0x7e0 <Endpoint_WaitUntilReady+0x48>
     7dc:	9a 01       	movw	r18, r20
     7de:	e1 cf       	rjmp	.-62     	; 0x7a2 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7f4:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7f8:	42 ff       	sbrs	r20, 2
     7fa:	dd cf       	rjmp	.-70     	; 0x7b6 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     7fc:	08 95       	ret

000007fe <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7fe:	41 d0       	rcall	.+130    	; 0x882 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     800:	43 d0       	rcall	.+134    	; 0x888 <USB_INT_ClearAllInterrupts>
     802:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     806:	8f 77       	andi	r24, 0x7F	; 127
     808:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     80c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     810:	80 68       	ori	r24, 0x80	; 128
     812:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     816:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     81a:	8f 7d       	andi	r24, 0xDF	; 223
     81c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     820:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     822:	89 bd       	out	0x29, r24	; 41
     824:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     826:	89 bd       	out	0x29, r24	; 41
     828:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     82a:	00 fe       	sbrs	r0, 0
     82c:	fd cf       	rjmp	.-6      	; 0x828 <USB_ResetInterface+0x2a>
     82e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     832:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     836:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     83a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     83e:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	18 df       	rcall	.-464    	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
     846:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     84a:	8e 7f       	andi	r24, 0xFE	; 254
     84c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     850:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     854:	81 60       	ori	r24, 0x01	; 1
     856:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     85a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     85e:	88 60       	ori	r24, 0x08	; 8
     860:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     864:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     868:	8e 7f       	andi	r24, 0xFE	; 254
     86a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     86e:	08 95       	ret

00000870 <USB_Init>:
     870:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	8e 7f       	andi	r24, 0xFE	; 254
     878:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USB_IsInitialized>

	USB_ResetInterface();
     880:	be cf       	rjmp	.-132    	; 0x7fe <USB_ResetInterface>

00000882 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     882:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     886:	08 95       	ret

00000888 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     888:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     88c:	08 95       	ret

0000088e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	2f 93       	push	r18
     89a:	3f 93       	push	r19
     89c:	4f 93       	push	r20
     89e:	5f 93       	push	r21
     8a0:	6f 93       	push	r22
     8a2:	7f 93       	push	r23
     8a4:	8f 93       	push	r24
     8a6:	9f 93       	push	r25
     8a8:	af 93       	push	r26
     8aa:	bf 93       	push	r27
     8ac:	ef 93       	push	r30
     8ae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8b4:	82 ff       	sbrs	r24, 2
     8b6:	0a c0       	rjmp	.+20     	; 0x8cc <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8bc:	82 ff       	sbrs	r24, 2
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     8c4:	8b 7f       	andi	r24, 0xFB	; 251
     8c6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8ca:	24 d2       	rcall	.+1096   	; 0xd14 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8d0:	80 ff       	sbrs	r24, 0
     8d2:	17 c0       	rjmp	.+46     	; 0x902 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8d8:	80 ff       	sbrs	r24, 0
     8da:	13 c0       	rjmp	.+38     	; 0x902 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8dc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8e0:	8e 7f       	andi	r24, 0xFE	; 254
     8e2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8e6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8ea:	80 61       	ori	r24, 0x10	; 16
     8ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8f0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     8f4:	80 62       	ori	r24, 0x20	; 32
     8f6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8fa:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     8fc:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     900:	c6 dd       	rcall	.-1140   	; 0x48e <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     902:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     906:	84 ff       	sbrs	r24, 4
     908:	2f c0       	rjmp	.+94     	; 0x968 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     90a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     90e:	84 ff       	sbrs	r24, 4
     910:	2b c0       	rjmp	.+86     	; 0x968 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     91a:	09 b4       	in	r0, 0x29	; 41
     91c:	00 fe       	sbrs	r0, 0
     91e:	fd cf       	rjmp	.-6      	; 0x91a <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     920:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     924:	8f 7d       	andi	r24, 0xDF	; 223
     926:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     92a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     92e:	8f 7e       	andi	r24, 0xEF	; 239
     930:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     934:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     938:	8f 7e       	andi	r24, 0xEF	; 239
     93a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     93e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     942:	81 60       	ori	r24, 0x01	; 1
     944:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     948:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_Device_ConfigurationNumber>
     94c:	88 23       	and	r24, r24
     94e:	11 f0       	breq	.+4      	; 0x954 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	07 c0       	rjmp	.+14     	; 0x962 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     954:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     958:	87 fd       	sbrc	r24, 7
     95a:	02 c0       	rjmp	.+4      	; 0x960 <__vector_11+0xd2>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__vector_11+0xd4>
     960:	83 e0       	ldi	r24, 0x03	; 3
     962:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     966:	8c dd       	rcall	.-1256   	; 0x480 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     968:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     96c:	83 ff       	sbrs	r24, 3
     96e:	27 c0       	rjmp	.+78     	; 0x9be <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     970:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     974:	83 ff       	sbrs	r24, 3
     976:	23 c0       	rjmp	.+70     	; 0x9be <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     978:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     988:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     98c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     990:	8e 7f       	andi	r24, 0xFE	; 254
     992:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     996:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     99a:	8e 7f       	andi	r24, 0xFE	; 254
     99c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     9a4:	80 61       	ori	r24, 0x10	; 16
     9a6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9aa:	42 e0       	ldi	r20, 0x02	; 2
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	62 de       	rcall	.-828    	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9b2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     9b6:	88 60       	ori	r24, 0x08	; 8
     9b8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9bc:	ab d1       	rcall	.+854    	; 0xd14 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a06:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     a0a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a0c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     a10:	d8 2f       	mov	r29, r24
     a12:	d1 70       	andi	r29, 0x01	; 1
     a14:	80 fd       	sbrc	r24, 0
     a16:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a18:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a1c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     a20:	87 7f       	andi	r24, 0xF7	; 247
     a22:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a26:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a28:	1e d0       	rcall	.+60     	; 0xa66 <USB_Device_ProcessControlRequest>
     a2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a2e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     a32:	88 60       	ori	r24, 0x08	; 8
     a34:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     a38:	cd 2b       	or	r28, r29
     a3a:	cf 70       	andi	r28, 0x0F	; 15
     a3c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	bf 91       	pop	r27
     a4a:	af 91       	pop	r26
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	7f 91       	pop	r23
     a52:	6f 91       	pop	r22
     a54:	5f 91       	pop	r21
     a56:	4f 91       	pop	r20
     a58:	3f 91       	pop	r19
     a5a:	2f 91       	pop	r18
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	aa 97       	sbiw	r28, 0x2a	; 42
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	ed e9       	ldi	r30, 0x9D	; 157
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a80:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a84:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	e5 3a       	cpi	r30, 0xA5	; 165
     a8a:	f2 07       	cpc	r31, r18
     a8c:	c9 f7       	brne	.-14     	; 0xa80 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a8e:	07 dd       	rcall	.-1522   	; 0x49e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     a94:	83 ff       	sbrs	r24, 3
     a96:	26 c1       	rjmp	.+588    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a98:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     a9c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <USB_ControlRequest+0x1>
     aa0:	95 30       	cpi	r25, 0x05	; 5
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x40>
     aa4:	78 c0       	rjmp	.+240    	; 0xb96 <USB_Device_ProcessControlRequest+0x130>
     aa6:	30 f4       	brcc	.+12     	; 0xab4 <USB_Device_ProcessControlRequest+0x4e>
     aa8:	91 30       	cpi	r25, 0x01	; 1
     aaa:	81 f1       	breq	.+96     	; 0xb0c <USB_Device_ProcessControlRequest+0xa6>
     aac:	68 f0       	brcs	.+26     	; 0xac8 <USB_Device_ProcessControlRequest+0x62>
     aae:	93 30       	cpi	r25, 0x03	; 3
     ab0:	69 f1       	breq	.+90     	; 0xb0c <USB_Device_ProcessControlRequest+0xa6>
     ab2:	18 c1       	rjmp	.+560    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
     ab4:	98 30       	cpi	r25, 0x08	; 8
     ab6:	09 f4       	brne	.+2      	; 0xaba <USB_Device_ProcessControlRequest+0x54>
     ab8:	e2 c0       	rjmp	.+452    	; 0xc7e <USB_Device_ProcessControlRequest+0x218>
     aba:	99 30       	cpi	r25, 0x09	; 9
     abc:	09 f4       	brne	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x5a>
     abe:	f1 c0       	rjmp	.+482    	; 0xca2 <USB_Device_ProcessControlRequest+0x23c>
     ac0:	96 30       	cpi	r25, 0x06	; 6
     ac2:	09 f0       	breq	.+2      	; 0xac6 <USB_Device_ProcessControlRequest+0x60>
     ac4:	0f c1       	rjmp	.+542    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
     ac6:	89 c0       	rjmp	.+274    	; 0xbda <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ac8:	80 38       	cpi	r24, 0x80	; 128
     aca:	81 f0       	breq	.+32     	; 0xaec <USB_Device_ProcessControlRequest+0x86>
     acc:	82 38       	cpi	r24, 0x82	; 130
     ace:	09 f0       	breq	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0x6c>
     ad0:	09 c1       	rjmp	.+530    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad2:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     ad6:	8f 70       	andi	r24, 0x0F	; 15
     ad8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     adc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     ae0:	85 fb       	bst	r24, 5
     ae2:	88 27       	eor	r24, r24
     ae4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ae6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     aea:	06 c0       	rjmp	.+12     	; 0xaf8 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     aec:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     af0:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <USB_Device_RemoteWakeupEnabled>
     af4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     af6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     af8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     afc:	97 7f       	andi	r25, 0xF7	; 247
     afe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b02:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     b06:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     b0a:	c4 c0       	rjmp	.+392    	; 0xc94 <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b0c:	28 2f       	mov	r18, r24
     b0e:	2d 7f       	andi	r18, 0xFD	; 253
     b10:	09 f0       	breq	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0xae>
     b12:	e8 c0       	rjmp	.+464    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b14:	88 23       	and	r24, r24
     b16:	19 f0       	breq	.+6      	; 0xb1e <USB_Device_ProcessControlRequest+0xb8>
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	61 f0       	breq	.+24     	; 0xb34 <USB_Device_ProcessControlRequest+0xce>
     b1c:	e3 c0       	rjmp	.+454    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b1e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	09 f0       	breq	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0xc2>
     b26:	de c0       	rjmp	.+444    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b28:	93 30       	cpi	r25, 0x03	; 3
     b2a:	09 f0       	breq	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0xc8>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <USB_Device_RemoteWakeupEnabled>
     b32:	2b c0       	rjmp	.+86     	; 0xb8a <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b34:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     b38:	81 11       	cpse	r24, r1
     b3a:	27 c0       	rjmp	.+78     	; 0xb8a <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b3c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     b40:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b42:	09 f4       	brne	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0xe0>
     b44:	cf c0       	rjmp	.+414    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b46:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b4a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b4e:	20 ff       	sbrs	r18, 0
     b50:	1c c0       	rjmp	.+56     	; 0xb8a <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b52:	93 30       	cpi	r25, 0x03	; 3
     b54:	21 f4       	brne	.+8      	; 0xb5e <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b5a:	80 62       	ori	r24, 0x20	; 32
     b5c:	14 c0       	rjmp	.+40     	; 0xb86 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b5e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b62:	90 61       	ori	r25, 0x10	; 16
     b64:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <USB_Device_ProcessControlRequest+0x10e>
     b70:	44 0f       	add	r20, r20
     b72:	55 1f       	adc	r21, r21
     b74:	8a 95       	dec	r24
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <USB_Device_ProcessControlRequest+0x10a>
     b78:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     b7c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b84:	88 60       	ori	r24, 0x08	; 8
     b86:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b8a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b92:	87 7f       	andi	r24, 0xF7	; 247
     b94:	82 c0       	rjmp	.+260    	; 0xc9a <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b96:	81 11       	cpse	r24, r1
     b98:	a5 c0       	rjmp	.+330    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b9a:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     b9e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ba0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     ba4:	80 78       	andi	r24, 0x80	; 128
     ba6:	81 2b       	or	r24, r17
     ba8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     bac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bb0:	87 7f       	andi	r24, 0xF7	; 247
     bb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bb6:	d1 dd       	rcall	.-1118   	; 0x75a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
     bbc:	80 ff       	sbrs	r24, 0
     bbe:	fc cf       	rjmp	.-8      	; 0xbb8 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     bc0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bca:	11 11       	cpse	r17, r1
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <USB_Device_ProcessControlRequest+0x16c>
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x16e>
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>
     bd8:	85 c0       	rjmp	.+266    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bda:	80 58       	subi	r24, 0x80	; 128
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	08 f0       	brcs	.+2      	; 0xbe2 <USB_Device_ProcessControlRequest+0x17c>
     be0:	81 c0       	rjmp	.+258    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     be2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     be6:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x3>
     bea:	8c 3d       	cpi	r24, 0xDC	; 220
     bec:	53 e0       	ldi	r21, 0x03	; 3
     bee:	95 07       	cpc	r25, r21
     bf0:	71 f5       	brne	.+92     	; 0xc4e <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bf6:	8a e2       	ldi	r24, 0x2A	; 42
     bf8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bfa:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bfc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bfe:	de 01       	movw	r26, r28
     c00:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c02:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c04:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c06:	51 e2       	ldi	r21, 0x21	; 33
     c08:	e3 2f       	mov	r30, r19
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     c10:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     c12:	20 ff       	sbrs	r18, 0
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
     c16:	e2 95       	swap	r30
     c18:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c1a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c1c:	ef 70       	andi	r30, 0x0F	; 15
     c1e:	8e 2f       	mov	r24, r30
     c20:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c22:	ea 30       	cpi	r30, 0x0A	; 10
     c24:	10 f0       	brcs	.+4      	; 0xc2a <USB_Device_ProcessControlRequest+0x1c4>
     c26:	c7 96       	adiw	r24, 0x37	; 55
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <USB_Device_ProcessControlRequest+0x1c6>
     c2a:	c0 96       	adiw	r24, 0x30	; 48
     c2c:	8d 93       	st	X+, r24
     c2e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c30:	2f 5f       	subi	r18, 0xFF	; 255
     c32:	24 31       	cpi	r18, 0x14	; 20
     c34:	49 f7       	brne	.-46     	; 0xc08 <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c36:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c42:	6a e2       	ldi	r22, 0x2A	; 42
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	5c dc       	rcall	.-1864   	; 0x504 <Endpoint_Write_Control_Stream_LE>
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c4e:	ae 01       	movw	r20, r28
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     c58:	25 dc       	rcall	.-1974   	; 0x4a4 <CALLBACK_USB_GetDescriptor>
     c5a:	bc 01       	movw	r22, r24
     c5c:	89 2b       	or	r24, r25
     c5e:	09 f4       	brne	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0x1fc>
     c60:	41 c0       	rjmp	.+130    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
     c62:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c66:	97 7f       	andi	r25, 0xF7	; 247
     c68:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	a4 dc       	rcall	.-1720   	; 0x5ba <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c76:	8b 77       	andi	r24, 0x7B	; 123
     c78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c7c:	33 c0       	rjmp	.+102    	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c7e:	80 38       	cpi	r24, 0x80	; 128
     c80:	89 f5       	brne	.+98     	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c86:	87 7f       	andi	r24, 0xF7	; 247
     c88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c8c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c90:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c98:	8e 77       	andi	r24, 0x7E	; 126
     c9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c9e:	5d dd       	rcall	.-1350   	; 0x75a <Endpoint_ClearStatusStage>
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ca2:	81 11       	cpse	r24, r1
     ca4:	1f c0       	rjmp	.+62     	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ca6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     caa:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x3>
     cae:	99 27       	eor	r25, r25
     cb0:	02 97       	sbiw	r24, 0x02	; 2
     cb2:	c4 f4       	brge	.+48     	; 0xce4 <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cb8:	87 7f       	andi	r24, 0xF7	; 247
     cba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cbe:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
     cc2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     cc6:	49 dd       	rcall	.-1390   	; 0x75a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     cc8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_Device_ConfigurationNumber>
     ccc:	81 11       	cpse	r24, r1
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <USB_Device_ProcessControlRequest+0x276>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cd0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cd4:	87 fd       	sbrc	r24, 7
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <USB_Device_ProcessControlRequest+0x276>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <USB_Device_ProcessControlRequest+0x278>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     ce2:	da db       	rcall	.-2124   	; 0x498 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ce4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ce8:	83 ff       	sbrs	r24, 3
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cf0:	87 7f       	andi	r24, 0xF7	; 247
     cf2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cf6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     cfa:	80 62       	ori	r24, 0x20	; 32
     cfc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d00:	aa 96       	adiw	r28, 0x2a	; 42
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	08 95       	ret

00000d14 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     d14:	08 95       	ret

00000d16 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d16:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d18:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     d1c:	88 23       	and	r24, r24
     d1e:	99 f0       	breq	.+38     	; 0xd46 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d20:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     d24:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d26:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     d2a:	89 2f       	mov	r24, r25
     d2c:	81 70       	andi	r24, 0x01	; 1
     d2e:	90 fd       	sbrc	r25, 0
     d30:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d32:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d34:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d3c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d3e:	93 de       	rcall	.-730    	; 0xa66 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d40:	cf 70       	andi	r28, 0x0F	; 15
     d42:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
     d50:	fc 01       	movw	r30, r24
     d52:	70 96       	adiw	r30, 0x10	; 16
     d54:	8b e0       	ldi	r24, 0x0B	; 11
     d56:	df 01       	movw	r26, r30
     d58:	1d 92       	st	X+, r1
     d5a:	8a 95       	dec	r24
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <CDC_Device_ConfigureEndpoints+0xe>
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	8c 83       	std	Y+4, r24	; 0x04
     d62:	89 87       	std	Y+9, r24	; 0x09
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	8e 87       	std	Y+14, r24	; 0x0e
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	b8 dc       	rcall	.-1680   	; 0x6e0 <Endpoint_ConfigureEndpointTable>
     d70:	88 23       	and	r24, r24
     d72:	61 f0       	breq	.+24     	; 0xd8c <CDC_Device_ConfigureEndpoints+0x42>
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	ce 01       	movw	r24, r28
     d78:	06 96       	adiw	r24, 0x06	; 6
     d7a:	b2 dc       	rcall	.-1692   	; 0x6e0 <Endpoint_ConfigureEndpointTable>
     d7c:	88 23       	and	r24, r24
     d7e:	31 f0       	breq	.+12     	; 0xd8c <CDC_Device_ConfigureEndpoints+0x42>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	ce 01       	movw	r24, r28
     d84:	0b 96       	adiw	r24, 0x0b	; 11
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	aa cc       	rjmp	.-1708   	; 0x6e0 <Endpoint_ConfigureEndpointTable>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <CDC_Device_SendByte>:
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     d9e:	24 30       	cpi	r18, 0x04	; 4
     da0:	f9 f4       	brne	.+62     	; 0xde0 <CDC_Device_SendByte+0x4c>
     da2:	fc 01       	movw	r30, r24
     da4:	04 89       	ldd	r16, Z+20	; 0x14
     da6:	15 89       	ldd	r17, Z+21	; 0x15
     da8:	26 89       	ldd	r18, Z+22	; 0x16
     daa:	37 89       	ldd	r19, Z+23	; 0x17
     dac:	01 2b       	or	r16, r17
     dae:	02 2b       	or	r16, r18
     db0:	03 2b       	or	r16, r19
     db2:	b1 f0       	breq	.+44     	; 0xde0 <CDC_Device_SendByte+0x4c>
     db4:	c6 2f       	mov	r28, r22
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	8f 70       	andi	r24, 0x0F	; 15
     dba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     dbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     dc2:	85 ff       	sbrs	r24, 5
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <CDC_Device_SendByte+0x3a>
     dc6:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <CDC_Device_SendByte+0x4e>
     dce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     dd2:	8e 77       	andi	r24, 0x7E	; 126
     dd4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     dd8:	df dc       	rcall	.-1602   	; 0x798 <Endpoint_WaitUntilReady>
     dda:	88 23       	and	r24, r24
     ddc:	a1 f3       	breq	.-24     	; 0xdc6 <CDC_Device_SendByte+0x32>
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <CDC_Device_SendByte+0x4e>
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <CDC_Device_putchar>:
     dea:	fb 01       	movw	r30, r22
     dec:	68 2f       	mov	r22, r24
     dee:	84 85       	ldd	r24, Z+12	; 0x0c
     df0:	95 85       	ldd	r25, Z+13	; 0x0d
     df2:	d0 df       	rcall	.-96     	; 0xd94 <CDC_Device_SendByte>
     df4:	21 e0       	ldi	r18, 0x01	; 1
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 11       	cpse	r24, r1
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <CDC_Device_putchar+0x16>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	88 27       	eor	r24, r24
     e02:	99 27       	eor	r25, r25
     e04:	82 1b       	sub	r24, r18
     e06:	93 0b       	sbc	r25, r19
     e08:	08 95       	ret

00000e0a <CDC_Device_Flush>:
     e0a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     e0e:	24 30       	cpi	r18, 0x04	; 4
     e10:	21 f5       	brne	.+72     	; 0xe5a <CDC_Device_Flush+0x50>
     e12:	fc 01       	movw	r30, r24
     e14:	44 89       	ldd	r20, Z+20	; 0x14
     e16:	55 89       	ldd	r21, Z+21	; 0x15
     e18:	66 89       	ldd	r22, Z+22	; 0x16
     e1a:	77 89       	ldd	r23, Z+23	; 0x17
     e1c:	45 2b       	or	r20, r21
     e1e:	46 2b       	or	r20, r22
     e20:	47 2b       	or	r20, r23
     e22:	d9 f0       	breq	.+54     	; 0xe5a <CDC_Device_Flush+0x50>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	8f 70       	andi	r24, 0x0F	; 15
     e28:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     e2c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     e30:	88 23       	and	r24, r24
     e32:	89 f0       	breq	.+34     	; 0xe56 <CDC_Device_Flush+0x4c>
     e34:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e3c:	8e 77       	andi	r24, 0x7E	; 126
     e3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e42:	95 fd       	sbrc	r25, 5
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <CDC_Device_Flush+0x4c>
     e46:	a8 dc       	rcall	.-1712   	; 0x798 <Endpoint_WaitUntilReady>
     e48:	81 11       	cpse	r24, r1
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <CDC_Device_Flush+0x52>
     e4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e50:	8e 77       	andi	r24, 0x7E	; 126
     e52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	08 95       	ret
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	08 95       	ret

00000e5e <CDC_Device_USBTask>:
     e5e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     e62:	24 30       	cpi	r18, 0x04	; 4
     e64:	89 f4       	brne	.+34     	; 0xe88 <CDC_Device_USBTask+0x2a>
     e66:	fc 01       	movw	r30, r24
     e68:	44 89       	ldd	r20, Z+20	; 0x14
     e6a:	55 89       	ldd	r21, Z+21	; 0x15
     e6c:	66 89       	ldd	r22, Z+22	; 0x16
     e6e:	77 89       	ldd	r23, Z+23	; 0x17
     e70:	45 2b       	or	r20, r21
     e72:	46 2b       	or	r20, r22
     e74:	47 2b       	or	r20, r23
     e76:	41 f0       	breq	.+16     	; 0xe88 <CDC_Device_USBTask+0x2a>
     e78:	21 81       	ldd	r18, Z+1	; 0x01
     e7a:	2f 70       	andi	r18, 0x0F	; 15
     e7c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     e80:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e84:	20 fd       	sbrc	r18, 0
     e86:	c1 cf       	rjmp	.-126    	; 0xe0a <CDC_Device_Flush>
     e88:	08 95       	ret

00000e8a <CDC_Device_ReceiveByte>:
     e8a:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <USB_DeviceState>
     e8e:	24 30       	cpi	r18, 0x04	; 4
     e90:	19 f0       	breq	.+6      	; 0xe98 <CDC_Device_ReceiveByte+0xe>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f ef       	ldi	r25, 0xFF	; 255
     e96:	08 95       	ret
     e98:	fc 01       	movw	r30, r24
     e9a:	44 89       	ldd	r20, Z+20	; 0x14
     e9c:	55 89       	ldd	r21, Z+21	; 0x15
     e9e:	66 89       	ldd	r22, Z+22	; 0x16
     ea0:	77 89       	ldd	r23, Z+23	; 0x17
     ea2:	45 2b       	or	r20, r21
     ea4:	46 2b       	or	r20, r22
     ea6:	47 2b       	or	r20, r23
     ea8:	a1 f3       	breq	.-24     	; 0xe92 <CDC_Device_ReceiveByte+0x8>
     eaa:	86 81       	ldd	r24, Z+6	; 0x06
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     eb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     eb6:	82 ff       	sbrs	r24, 2
     eb8:	ec cf       	rjmp	.-40     	; 0xe92 <CDC_Device_ReceiveByte+0x8>
     eba:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     ebe:	88 23       	and	r24, r24
     ec0:	21 f0       	breq	.+8      	; 0xeca <CDC_Device_ReceiveByte+0x40>
     ec2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <CDC_Device_ReceiveByte+0x44>
     eca:	2f ef       	ldi	r18, 0xFF	; 255
     ecc:	3f ef       	ldi	r19, 0xFF	; 255
     ece:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     ed2:	81 11       	cpse	r24, r1
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <CDC_Device_ReceiveByte+0x56>
     ed6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     eda:	8b 77       	andi	r24, 0x7B	; 123
     edc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ee0:	c9 01       	movw	r24, r18
     ee2:	08 95       	ret

00000ee4 <CDC_Device_getchar>:
     ee4:	fc 01       	movw	r30, r24
     ee6:	84 85       	ldd	r24, Z+12	; 0x0c
     ee8:	95 85       	ldd	r25, Z+13	; 0x0d
     eea:	cf df       	rcall	.-98     	; 0xe8a <CDC_Device_ReceiveByte>
     eec:	97 ff       	sbrs	r25, 7
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <CDC_Device_getchar+0x10>
     ef0:	8e ef       	ldi	r24, 0xFE	; 254
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	08 95       	ret

00000ef6 <CDC_Device_CreateStream>:
     ef6:	fb 01       	movw	r30, r22
     ef8:	2e e0       	ldi	r18, 0x0E	; 14
     efa:	db 01       	movw	r26, r22
     efc:	1d 92       	st	X+, r1
     efe:	2a 95       	dec	r18
     f00:	e9 f7       	brne	.-6      	; 0xefc <CDC_Device_CreateStream+0x6>
     f02:	23 e0       	ldi	r18, 0x03	; 3
     f04:	23 83       	std	Z+3, r18	; 0x03
     f06:	25 ef       	ldi	r18, 0xF5	; 245
     f08:	36 e0       	ldi	r19, 0x06	; 6
     f0a:	31 87       	std	Z+9, r19	; 0x09
     f0c:	20 87       	std	Z+8, r18	; 0x08
     f0e:	22 e7       	ldi	r18, 0x72	; 114
     f10:	37 e0       	ldi	r19, 0x07	; 7
     f12:	33 87       	std	Z+11, r19	; 0x0b
     f14:	22 87       	std	Z+10, r18	; 0x0a
     f16:	95 87       	std	Z+13, r25	; 0x0d
     f18:	84 87       	std	Z+12, r24	; 0x0c
     f1a:	08 95       	ret

00000f1c <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     f1c:	08 95       	ret

00000f1e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     f28:	83 ff       	sbrs	r24, 3
     f2a:	a6 c0       	rjmp	.+332    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f2c:	88 81       	ld	r24, Y
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x4>
     f34:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x5>
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	09 f0       	breq	.+2      	; 0xf40 <CDC_Device_ProcessControlRequest+0x22>
     f3e:	9c c0       	rjmp	.+312    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     f40:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest+0x1>
     f44:	81 32       	cpi	r24, 0x21	; 33
     f46:	61 f0       	breq	.+24     	; 0xf60 <CDC_Device_ProcessControlRequest+0x42>
     f48:	20 f4       	brcc	.+8      	; 0xf52 <CDC_Device_ProcessControlRequest+0x34>
     f4a:	80 32       	cpi	r24, 0x20	; 32
     f4c:	09 f4       	brne	.+2      	; 0xf50 <CDC_Device_ProcessControlRequest+0x32>
     f4e:	3e c0       	rjmp	.+124    	; 0xfcc <CDC_Device_ProcessControlRequest+0xae>
     f50:	93 c0       	rjmp	.+294    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
     f52:	82 32       	cpi	r24, 0x22	; 34
     f54:	09 f4       	brne	.+2      	; 0xf58 <CDC_Device_ProcessControlRequest+0x3a>
     f56:	6c c0       	rjmp	.+216    	; 0x1030 <CDC_Device_ProcessControlRequest+0x112>
     f58:	83 32       	cpi	r24, 0x23	; 35
     f5a:	09 f4       	brne	.+2      	; 0xf5e <CDC_Device_ProcessControlRequest+0x40>
     f5c:	7d c0       	rjmp	.+250    	; 0x1058 <CDC_Device_ProcessControlRequest+0x13a>
     f5e:	8c c0       	rjmp	.+280    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f60:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
     f64:	81 3a       	cpi	r24, 0xA1	; 161
     f66:	09 f0       	breq	.+2      	; 0xf6a <CDC_Device_ProcessControlRequest+0x4c>
     f68:	87 c0       	rjmp	.+270    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f6e:	87 7f       	andi	r24, 0xF7	; 247
     f70:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f78:	80 ff       	sbrs	r24, 0
     f7a:	fc cf       	rjmp	.-8      	; 0xf74 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f7c:	8c 89       	ldd	r24, Y+20	; 0x14
     f7e:	9d 89       	ldd	r25, Y+21	; 0x15
     f80:	ae 89       	ldd	r26, Y+22	; 0x16
     f82:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f84:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     f88:	49 2f       	mov	r20, r25
     f8a:	5a 2f       	mov	r21, r26
     f8c:	6b 2f       	mov	r22, r27
     f8e:	77 27       	eor	r23, r23
     f90:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
     f94:	ad 01       	movw	r20, r26
     f96:	66 27       	eor	r22, r22
     f98:	77 27       	eor	r23, r23
     f9a:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
     f9e:	8b 2f       	mov	r24, r27
     fa0:	99 27       	eor	r25, r25
     fa2:	aa 27       	eor	r26, r26
     fa4:	bb 27       	eor	r27, r27
     fa6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     faa:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     fb0:	89 8d       	ldd	r24, Y+25	; 0x19
     fb2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     fb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fc0:	8e 77       	andi	r24, 0x7E	; 126
     fc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     fca:	c7 cb       	rjmp	.-2162   	; 0x75a <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fcc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
     fd0:	81 32       	cpi	r24, 0x21	; 33
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <CDC_Device_ProcessControlRequest+0xb8>
     fd4:	51 c0       	rjmp	.+162    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fe0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     fe4:	82 fd       	sbrc	r24, 2
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     fe8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_DeviceState>
     fec:	81 11       	cpse	r24, r1
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <CDC_Device_ProcessControlRequest+0xc2>
     ff0:	43 c0       	rjmp	.+134    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ff2:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
     ff6:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
     ffa:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
     ffe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1002:	3c 8b       	std	Y+20, r19	; 0x14
    1004:	2d 8b       	std	Y+21, r18	; 0x15
    1006:	9e 8b       	std	Y+22, r25	; 0x16
    1008:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    100a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    100e:	88 8f       	std	Y+24, r24	; 0x18
    1010:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1014:	89 8f       	std	Y+25, r24	; 0x19
    1016:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    101a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1020:	8b 77       	andi	r24, 0x7B	; 123
    1022:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1026:	99 db       	rcall	.-2254   	; 0x75a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1028:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    102a:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    102c:	cf 91       	pop	r28
    102e:	76 cf       	rjmp	.-276    	; 0xf1c <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1030:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
    1034:	81 32       	cpi	r24, 0x21	; 33
    1036:	01 f5       	brne	.+64     	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1038:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    103c:	87 7f       	andi	r24, 0xF7	; 247
    103e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1042:	8b db       	rcall	.-2282   	; 0x75a <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1044:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
    1048:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x3>
    104c:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    104e:	88 8b       	std	Y+16, r24	; 0x10
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1050:	ce 01       	movw	r24, r28
    1052:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1054:	cf 91       	pop	r28
    1056:	62 cf       	rjmp	.-316    	; 0xf1c <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1058:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest>
    105c:	81 32       	cpi	r24, 0x21	; 33
    105e:	61 f4       	brne	.+24     	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
    1060:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1064:	87 7f       	andi	r24, 0xF7	; 247
    1066:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    106a:	77 db       	rcall	.-2322   	; 0x75a <Endpoint_ClearStatusStage>
    106c:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <USB_ControlRequest+0x2>
			}

			break;
	}
}
    1070:	ce 01       	movw	r24, r28
    1072:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1074:	cf 91       	pop	r28
    1076:	52 cf       	rjmp	.-348    	; 0xf1c <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <__divmodhi4>:
    107e:	97 fb       	bst	r25, 7
    1080:	07 2e       	mov	r0, r23
    1082:	16 f4       	brtc	.+4      	; 0x1088 <__divmodhi4+0xa>
    1084:	00 94       	com	r0
    1086:	06 d0       	rcall	.+12     	; 0x1094 <__divmodhi4_neg1>
    1088:	77 fd       	sbrc	r23, 7
    108a:	08 d0       	rcall	.+16     	; 0x109c <__divmodhi4_neg2>
    108c:	0b d0       	rcall	.+22     	; 0x10a4 <__udivmodhi4>
    108e:	07 fc       	sbrc	r0, 7
    1090:	05 d0       	rcall	.+10     	; 0x109c <__divmodhi4_neg2>
    1092:	3e f4       	brtc	.+14     	; 0x10a2 <__divmodhi4_exit>

00001094 <__divmodhi4_neg1>:
    1094:	90 95       	com	r25
    1096:	81 95       	neg	r24
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	08 95       	ret

0000109c <__divmodhi4_neg2>:
    109c:	70 95       	com	r23
    109e:	61 95       	neg	r22
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255

000010a2 <__divmodhi4_exit>:
    10a2:	08 95       	ret

000010a4 <__udivmodhi4>:
    10a4:	aa 1b       	sub	r26, r26
    10a6:	bb 1b       	sub	r27, r27
    10a8:	51 e1       	ldi	r21, 0x11	; 17
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <__udivmodhi4_ep>

000010ac <__udivmodhi4_loop>:
    10ac:	aa 1f       	adc	r26, r26
    10ae:	bb 1f       	adc	r27, r27
    10b0:	a6 17       	cp	r26, r22
    10b2:	b7 07       	cpc	r27, r23
    10b4:	10 f0       	brcs	.+4      	; 0x10ba <__udivmodhi4_ep>
    10b6:	a6 1b       	sub	r26, r22
    10b8:	b7 0b       	sbc	r27, r23

000010ba <__udivmodhi4_ep>:
    10ba:	88 1f       	adc	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	5a 95       	dec	r21
    10c0:	a9 f7       	brne	.-22     	; 0x10ac <__udivmodhi4_loop>
    10c2:	80 95       	com	r24
    10c4:	90 95       	com	r25
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	08 95       	ret

000010cc <strtol>:
    10cc:	a3 e0       	ldi	r26, 0x03	; 3
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e6       	ldi	r30, 0x6B	; 107
    10d2:	f8 e0       	ldi	r31, 0x08	; 8
    10d4:	a6 c4       	rjmp	.+2380   	; 0x1a22 <__prologue_saves__>
    10d6:	5c 01       	movw	r10, r24
    10d8:	6b 01       	movw	r12, r22
    10da:	7a 01       	movw	r14, r20
    10dc:	61 15       	cp	r22, r1
    10de:	71 05       	cpc	r23, r1
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <strtol+0x1c>
    10e2:	fb 01       	movw	r30, r22
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	80 83       	st	Z, r24
    10e8:	e1 14       	cp	r14, r1
    10ea:	f1 04       	cpc	r15, r1
    10ec:	29 f0       	breq	.+10     	; 0x10f8 <strtol+0x2c>
    10ee:	c7 01       	movw	r24, r14
    10f0:	02 97       	sbiw	r24, 0x02	; 2
    10f2:	83 97       	sbiw	r24, 0x23	; 35
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <strtol+0x2c>
    10f6:	fd c0       	rjmp	.+506    	; 0x12f2 <strtol+0x226>
    10f8:	85 01       	movw	r16, r10
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	f5 01       	movw	r30, r10
    1100:	f0 81       	ld	r31, Z
    1102:	fa 83       	std	Y+2, r31	; 0x02
    1104:	8f 2f       	mov	r24, r31
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	09 d1       	rcall	.+530    	; 0x131c <isspace>
    110a:	89 2b       	or	r24, r25
    110c:	11 f0       	breq	.+4      	; 0x1112 <strtol+0x46>
    110e:	58 01       	movw	r10, r16
    1110:	f3 cf       	rjmp	.-26     	; 0x10f8 <strtol+0x2c>
    1112:	2a 81       	ldd	r18, Y+2	; 0x02
    1114:	2d 32       	cpi	r18, 0x2D	; 45
    1116:	41 f4       	brne	.+16     	; 0x1128 <strtol+0x5c>
    1118:	0f 5f       	subi	r16, 0xFF	; 255
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	f5 01       	movw	r30, r10
    111e:	f1 81       	ldd	r31, Z+1	; 0x01
    1120:	fa 83       	std	Y+2, r31	; 0x02
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	2b 83       	std	Y+3, r18	; 0x03
    1126:	0a c0       	rjmp	.+20     	; 0x113c <strtol+0x70>
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	8b 32       	cpi	r24, 0x2B	; 43
    112c:	31 f4       	brne	.+12     	; 0x113a <strtol+0x6e>
    112e:	85 01       	movw	r16, r10
    1130:	0e 5f       	subi	r16, 0xFE	; 254
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	f5 01       	movw	r30, r10
    1136:	f1 81       	ldd	r31, Z+1	; 0x01
    1138:	fa 83       	std	Y+2, r31	; 0x02
    113a:	1b 82       	std	Y+3, r1	; 0x03
    113c:	e1 14       	cp	r14, r1
    113e:	f1 04       	cpc	r15, r1
    1140:	f9 f0       	breq	.+62     	; 0x1180 <strtol+0xb4>
    1142:	20 e1       	ldi	r18, 0x10	; 16
    1144:	e2 16       	cp	r14, r18
    1146:	f1 04       	cpc	r15, r1
    1148:	19 f4       	brne	.+6      	; 0x1150 <strtol+0x84>
    114a:	42 c0       	rjmp	.+132    	; 0x11d0 <strtol+0x104>
    114c:	f0 e3       	ldi	r31, 0x30	; 48
    114e:	fa 83       	std	Y+2, r31	; 0x02
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	e8 16       	cp	r14, r24
    1154:	f1 04       	cpc	r15, r1
    1156:	31 f1       	breq	.+76     	; 0x11a4 <strtol+0xd8>
    1158:	54 f4       	brge	.+20     	; 0x116e <strtol+0xa2>
    115a:	e2 e0       	ldi	r30, 0x02	; 2
    115c:	ee 16       	cp	r14, r30
    115e:	f1 04       	cpc	r15, r1
    1160:	51 f5       	brne	.+84     	; 0x11b6 <strtol+0xea>
    1162:	81 2c       	mov	r8, r1
    1164:	91 2c       	mov	r9, r1
    1166:	a1 2c       	mov	r10, r1
    1168:	50 e4       	ldi	r21, 0x40	; 64
    116a:	b5 2e       	mov	r11, r21
    116c:	48 c0       	rjmp	.+144    	; 0x11fe <strtol+0x132>
    116e:	fa e0       	ldi	r31, 0x0A	; 10
    1170:	ef 16       	cp	r14, r31
    1172:	f1 04       	cpc	r15, r1
    1174:	41 f0       	breq	.+16     	; 0x1186 <strtol+0xba>
    1176:	20 e1       	ldi	r18, 0x10	; 16
    1178:	e2 16       	cp	r14, r18
    117a:	f1 04       	cpc	r15, r1
    117c:	e1 f4       	brne	.+56     	; 0x11b6 <strtol+0xea>
    117e:	3a c0       	rjmp	.+116    	; 0x11f4 <strtol+0x128>
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 33       	cpi	r24, 0x30	; 48
    1184:	41 f1       	breq	.+80     	; 0x11d6 <strtol+0x10a>
    1186:	3a e0       	ldi	r19, 0x0A	; 10
    1188:	e3 2e       	mov	r14, r19
    118a:	f1 2c       	mov	r15, r1
    118c:	4c ec       	ldi	r20, 0xCC	; 204
    118e:	84 2e       	mov	r8, r20
    1190:	98 2c       	mov	r9, r8
    1192:	a8 2c       	mov	r10, r8
    1194:	4c e0       	ldi	r20, 0x0C	; 12
    1196:	b4 2e       	mov	r11, r20
    1198:	32 c0       	rjmp	.+100    	; 0x11fe <strtol+0x132>
    119a:	e1 14       	cp	r14, r1
    119c:	f1 04       	cpc	r15, r1
    119e:	b1 f6       	brne	.-84     	; 0x114c <strtol+0x80>
    11a0:	80 e3       	ldi	r24, 0x30	; 48
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	98 e0       	ldi	r25, 0x08	; 8
    11a6:	e9 2e       	mov	r14, r25
    11a8:	f1 2c       	mov	r15, r1
    11aa:	81 2c       	mov	r8, r1
    11ac:	91 2c       	mov	r9, r1
    11ae:	a1 2c       	mov	r10, r1
    11b0:	20 e1       	ldi	r18, 0x10	; 16
    11b2:	b2 2e       	mov	r11, r18
    11b4:	24 c0       	rjmp	.+72     	; 0x11fe <strtol+0x132>
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e8       	ldi	r25, 0x80	; 128
    11be:	97 01       	movw	r18, r14
    11c0:	0f 2c       	mov	r0, r15
    11c2:	00 0c       	add	r0, r0
    11c4:	44 0b       	sbc	r20, r20
    11c6:	55 0b       	sbc	r21, r21
    11c8:	0a d4       	rcall	.+2068   	; 0x19de <__udivmodsi4>
    11ca:	49 01       	movw	r8, r18
    11cc:	5a 01       	movw	r10, r20
    11ce:	17 c0       	rjmp	.+46     	; 0x11fe <strtol+0x132>
    11d0:	2a 81       	ldd	r18, Y+2	; 0x02
    11d2:	20 33       	cpi	r18, 0x30	; 48
    11d4:	79 f4       	brne	.+30     	; 0x11f4 <strtol+0x128>
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 81       	ld	r24, Z
    11da:	8f 7d       	andi	r24, 0xDF	; 223
    11dc:	88 35       	cpi	r24, 0x58	; 88
    11de:	e9 f6       	brne	.-70     	; 0x119a <strtol+0xce>
    11e0:	f1 81       	ldd	r31, Z+1	; 0x01
    11e2:	fa 83       	std	Y+2, r31	; 0x02
    11e4:	0e 5f       	subi	r16, 0xFE	; 254
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	22 60       	ori	r18, 0x02	; 2
    11ec:	2b 83       	std	Y+3, r18	; 0x03
    11ee:	60 e1       	ldi	r22, 0x10	; 16
    11f0:	e6 2e       	mov	r14, r22
    11f2:	f1 2c       	mov	r15, r1
    11f4:	81 2c       	mov	r8, r1
    11f6:	91 2c       	mov	r9, r1
    11f8:	a1 2c       	mov	r10, r1
    11fa:	88 e0       	ldi	r24, 0x08	; 8
    11fc:	b8 2e       	mov	r11, r24
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	27 01       	movw	r4, r14
    1208:	0f 2c       	mov	r0, r15
    120a:	00 0c       	add	r0, r0
    120c:	66 08       	sbc	r6, r6
    120e:	77 08       	sbc	r7, r7
    1210:	18 01       	movw	r2, r16
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	90 53       	subi	r25, 0x30	; 48
    1216:	99 83       	std	Y+1, r25	; 0x01
    1218:	9a 30       	cpi	r25, 0x0A	; 10
    121a:	78 f0       	brcs	.+30     	; 0x123a <strtol+0x16e>
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	91 54       	subi	r25, 0x41	; 65
    1220:	9a 31       	cpi	r25, 0x1A	; 26
    1222:	20 f4       	brcc	.+8      	; 0x122c <strtol+0x160>
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	e7 53       	subi	r30, 0x37	; 55
    1228:	e9 83       	std	Y+1, r30	; 0x01
    122a:	07 c0       	rjmp	.+14     	; 0x123a <strtol+0x16e>
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	91 56       	subi	r25, 0x61	; 97
    1230:	9a 31       	cpi	r25, 0x1A	; 26
    1232:	48 f5       	brcc	.+82     	; 0x1286 <strtol+0x1ba>
    1234:	fa 81       	ldd	r31, Y+2	; 0x02
    1236:	f7 55       	subi	r31, 0x57	; 87
    1238:	f9 83       	std	Y+1, r31	; 0x01
    123a:	99 81       	ldd	r25, Y+1	; 0x01
    123c:	69 2f       	mov	r22, r25
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	6e 15       	cp	r22, r14
    1242:	7f 05       	cpc	r23, r15
    1244:	04 f5       	brge	.+64     	; 0x1286 <strtol+0x1ba>
    1246:	87 fd       	sbrc	r24, 7
    1248:	18 c0       	rjmp	.+48     	; 0x127a <strtol+0x1ae>
    124a:	82 16       	cp	r8, r18
    124c:	93 06       	cpc	r9, r19
    124e:	a4 06       	cpc	r10, r20
    1250:	b5 06       	cpc	r11, r21
    1252:	80 f0       	brcs	.+32     	; 0x1274 <strtol+0x1a8>
    1254:	c3 01       	movw	r24, r6
    1256:	b2 01       	movw	r22, r4
    1258:	a9 d3       	rcall	.+1874   	; 0x19ac <__mulsi3>
    125a:	9b 01       	movw	r18, r22
    125c:	ac 01       	movw	r20, r24
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	2e 0f       	add	r18, r30
    1262:	31 1d       	adc	r19, r1
    1264:	41 1d       	adc	r20, r1
    1266:	51 1d       	adc	r21, r1
    1268:	21 30       	cpi	r18, 0x01	; 1
    126a:	31 05       	cpc	r19, r1
    126c:	41 05       	cpc	r20, r1
    126e:	f0 e8       	ldi	r31, 0x80	; 128
    1270:	5f 07       	cpc	r21, r31
    1272:	10 f0       	brcs	.+4      	; 0x1278 <strtol+0x1ac>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	01 c0       	rjmp	.+2      	; 0x127a <strtol+0x1ae>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0f 5f       	subi	r16, 0xFF	; 255
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	f1 01       	movw	r30, r2
    1280:	f0 81       	ld	r31, Z
    1282:	fa 83       	std	Y+2, r31	; 0x02
    1284:	c5 cf       	rjmp	.-118    	; 0x1210 <strtol+0x144>
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	91 70       	andi	r25, 0x01	; 1
    128a:	c1 14       	cp	r12, r1
    128c:	d1 04       	cpc	r13, r1
    128e:	89 f0       	breq	.+34     	; 0x12b2 <strtol+0x1e6>
    1290:	88 23       	and	r24, r24
    1292:	31 f0       	breq	.+12     	; 0x12a0 <strtol+0x1d4>
    1294:	01 50       	subi	r16, 0x01	; 1
    1296:	11 09       	sbc	r17, r1
    1298:	f6 01       	movw	r30, r12
    129a:	11 83       	std	Z+1, r17	; 0x01
    129c:	00 83       	st	Z, r16
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <strtol+0x1e6>
    12a0:	fb 81       	ldd	r31, Y+3	; 0x03
    12a2:	f1 ff       	sbrs	r31, 1
    12a4:	1a c0       	rjmp	.+52     	; 0x12da <strtol+0x20e>
    12a6:	02 50       	subi	r16, 0x02	; 2
    12a8:	11 09       	sbc	r17, r1
    12aa:	f6 01       	movw	r30, r12
    12ac:	11 83       	std	Z+1, r17	; 0x01
    12ae:	00 83       	st	Z, r16
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <strtol+0x20e>
    12b2:	87 ff       	sbrs	r24, 7
    12b4:	12 c0       	rjmp	.+36     	; 0x12da <strtol+0x20e>
    12b6:	99 23       	and	r25, r25
    12b8:	29 f0       	breq	.+10     	; 0x12c4 <strtol+0x1f8>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e8       	ldi	r21, 0x80	; 128
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <strtol+0x200>
    12c4:	2f ef       	ldi	r18, 0xFF	; 255
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f ef       	ldi	r20, 0xFF	; 255
    12ca:	5f e7       	ldi	r21, 0x7F	; 127
    12cc:	82 e2       	ldi	r24, 0x22	; 34
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <errno+0x1>
    12d4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <errno>
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <strtol+0x220>
    12da:	99 23       	and	r25, r25
    12dc:	79 f0       	breq	.+30     	; 0x12fc <strtol+0x230>
    12de:	50 95       	com	r21
    12e0:	40 95       	com	r20
    12e2:	30 95       	com	r19
    12e4:	21 95       	neg	r18
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	4f 4f       	sbci	r20, 0xFF	; 255
    12ea:	5f 4f       	sbci	r21, 0xFF	; 255
    12ec:	b9 01       	movw	r22, r18
    12ee:	ca 01       	movw	r24, r20
    12f0:	12 c0       	rjmp	.+36     	; 0x1316 <strtol+0x24a>
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <strtol+0x24a>
    12fc:	57 ff       	sbrs	r21, 7
    12fe:	f6 cf       	rjmp	.-20     	; 0x12ec <strtol+0x220>
    1300:	82 e2       	ldi	r24, 0x22	; 34
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <errno+0x1>
    1308:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <errno>
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f ef       	ldi	r20, 0xFF	; 255
    1312:	5f e7       	ldi	r21, 0x7F	; 127
    1314:	eb cf       	rjmp	.-42     	; 0x12ec <strtol+0x220>
    1316:	23 96       	adiw	r28, 0x03	; 3
    1318:	e2 e1       	ldi	r30, 0x12	; 18
    131a:	9f c3       	rjmp	.+1854   	; 0x1a5a <__epilogue_restores__>

0000131c <isspace>:
    131c:	91 11       	cpse	r25, r1
    131e:	4a c2       	rjmp	.+1172   	; 0x17b4 <__ctype_isfalse>
    1320:	80 32       	cpi	r24, 0x20	; 32
    1322:	19 f0       	breq	.+6      	; 0x132a <isspace+0xe>
    1324:	89 50       	subi	r24, 0x09	; 9
    1326:	85 50       	subi	r24, 0x05	; 5
    1328:	d0 f7       	brcc	.-12     	; 0x131e <isspace+0x2>
    132a:	08 95       	ret

0000132c <fgets>:
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e9       	ldi	r30, 0x9B	; 155
    1332:	f9 e0       	ldi	r31, 0x09	; 9
    1334:	80 c3       	rjmp	.+1792   	; 0x1a36 <__prologue_saves__+0x14>
    1336:	fa 01       	movw	r30, r20
    1338:	23 81       	ldd	r18, Z+3	; 0x03
    133a:	20 fd       	sbrc	r18, 0
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <fgets+0x18>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	19 c0       	rjmp	.+50     	; 0x1376 <fgets+0x4a>
    1344:	16 16       	cp	r1, r22
    1346:	17 06       	cpc	r1, r23
    1348:	d4 f7       	brge	.-12     	; 0x133e <fgets+0x12>
    134a:	7a 01       	movw	r14, r20
    134c:	8c 01       	movw	r16, r24
    134e:	eb 01       	movw	r28, r22
    1350:	6c 01       	movw	r12, r24
    1352:	c1 30       	cpi	r28, 0x01	; 1
    1354:	d1 05       	cpc	r29, r1
    1356:	61 f0       	breq	.+24     	; 0x1370 <fgets+0x44>
    1358:	c7 01       	movw	r24, r14
    135a:	45 d2       	rcall	.+1162   	; 0x17e6 <fgetc>
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	ff ef       	ldi	r31, 0xFF	; 255
    1360:	9f 07       	cpc	r25, r31
    1362:	69 f3       	breq	.-38     	; 0x133e <fgets+0x12>
    1364:	f6 01       	movw	r30, r12
    1366:	81 93       	st	Z+, r24
    1368:	6f 01       	movw	r12, r30
    136a:	21 97       	sbiw	r28, 0x01	; 1
    136c:	0a 97       	sbiw	r24, 0x0a	; 10
    136e:	89 f7       	brne	.-30     	; 0x1352 <fgets+0x26>
    1370:	f6 01       	movw	r30, r12
    1372:	10 82       	st	Z, r1
    1374:	c8 01       	movw	r24, r16
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	e8 e0       	ldi	r30, 0x08	; 8
    137c:	78 c3       	rjmp	.+1776   	; 0x1a6e <__epilogue_restores__+0x14>

0000137e <fputs>:
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	db 01       	movw	r26, r22
    138c:	13 96       	adiw	r26, 0x03	; 3
    138e:	2c 91       	ld	r18, X
    1390:	21 ff       	sbrs	r18, 1
    1392:	18 c0       	rjmp	.+48     	; 0x13c4 <fputs+0x46>
    1394:	8b 01       	movw	r16, r22
    1396:	7c 01       	movw	r14, r24
    1398:	d0 e0       	ldi	r29, 0x00	; 0
    139a:	c0 e0       	ldi	r28, 0x00	; 0
    139c:	f7 01       	movw	r30, r14
    139e:	81 91       	ld	r24, Z+
    13a0:	7f 01       	movw	r14, r30
    13a2:	88 23       	and	r24, r24
    13a4:	61 f0       	breq	.+24     	; 0x13be <fputs+0x40>
    13a6:	d8 01       	movw	r26, r16
    13a8:	18 96       	adiw	r26, 0x08	; 8
    13aa:	ed 91       	ld	r30, X+
    13ac:	fc 91       	ld	r31, X
    13ae:	19 97       	sbiw	r26, 0x09	; 9
    13b0:	b8 01       	movw	r22, r16
    13b2:	09 95       	icall
    13b4:	89 2b       	or	r24, r25
    13b6:	91 f3       	breq	.-28     	; 0x139c <fputs+0x1e>
    13b8:	df ef       	ldi	r29, 0xFF	; 255
    13ba:	cf ef       	ldi	r28, 0xFF	; 255
    13bc:	ef cf       	rjmp	.-34     	; 0x139c <fputs+0x1e>
    13be:	8d 2f       	mov	r24, r29
    13c0:	9c 2f       	mov	r25, r28
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <fputs+0x4a>
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	9f ef       	ldi	r25, 0xFF	; 255
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	e6 e0       	ldi	r30, 0x06	; 6
    13ce:	51 c3       	rjmp	.+1698   	; 0x1a72 <__epilogue_restores__+0x18>

000013d0 <sprintf>:
    13d0:	ae e0       	ldi	r26, 0x0E	; 14
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ed ee       	ldi	r30, 0xED	; 237
    13d6:	f9 e0       	ldi	r31, 0x09	; 9
    13d8:	32 c3       	rjmp	.+1636   	; 0x1a3e <__prologue_saves__+0x1c>
    13da:	0d 89       	ldd	r16, Y+21	; 0x15
    13dc:	1e 89       	ldd	r17, Y+22	; 0x16
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	8c 83       	std	Y+4, r24	; 0x04
    13e2:	1a 83       	std	Y+2, r17	; 0x02
    13e4:	09 83       	std	Y+1, r16	; 0x01
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	9f e7       	ldi	r25, 0x7F	; 127
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	ae 01       	movw	r20, r28
    13f0:	47 5e       	subi	r20, 0xE7	; 231
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	6f 89       	ldd	r22, Y+23	; 0x17
    13f6:	78 8d       	ldd	r23, Y+24	; 0x18
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	08 d0       	rcall	.+16     	; 0x140e <vfprintf>
    13fe:	ef 81       	ldd	r30, Y+7	; 0x07
    1400:	f8 85       	ldd	r31, Y+8	; 0x08
    1402:	e0 0f       	add	r30, r16
    1404:	f1 1f       	adc	r31, r17
    1406:	10 82       	st	Z, r1
    1408:	2e 96       	adiw	r28, 0x0e	; 14
    140a:	e4 e0       	ldi	r30, 0x04	; 4
    140c:	34 c3       	rjmp	.+1640   	; 0x1a76 <__epilogue_restores__+0x1c>

0000140e <vfprintf>:
    140e:	ab e0       	ldi	r26, 0x0B	; 11
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ec e0       	ldi	r30, 0x0C	; 12
    1414:	fa e0       	ldi	r31, 0x0A	; 10
    1416:	05 c3       	rjmp	.+1546   	; 0x1a22 <__prologue_saves__>
    1418:	6c 01       	movw	r12, r24
    141a:	7b 01       	movw	r14, r22
    141c:	8a 01       	movw	r16, r20
    141e:	fc 01       	movw	r30, r24
    1420:	17 82       	std	Z+7, r1	; 0x07
    1422:	16 82       	std	Z+6, r1	; 0x06
    1424:	83 81       	ldd	r24, Z+3	; 0x03
    1426:	81 ff       	sbrs	r24, 1
    1428:	c0 c1       	rjmp	.+896    	; 0x17aa <vfprintf+0x39c>
    142a:	ce 01       	movw	r24, r28
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	3c 01       	movw	r6, r24
    1430:	f6 01       	movw	r30, r12
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	f7 01       	movw	r30, r14
    1436:	93 fd       	sbrc	r25, 3
    1438:	85 91       	lpm	r24, Z+
    143a:	93 ff       	sbrs	r25, 3
    143c:	81 91       	ld	r24, Z+
    143e:	7f 01       	movw	r14, r30
    1440:	88 23       	and	r24, r24
    1442:	09 f4       	brne	.+2      	; 0x1446 <vfprintf+0x38>
    1444:	ae c1       	rjmp	.+860    	; 0x17a2 <vfprintf+0x394>
    1446:	85 32       	cpi	r24, 0x25	; 37
    1448:	39 f4       	brne	.+14     	; 0x1458 <vfprintf+0x4a>
    144a:	93 fd       	sbrc	r25, 3
    144c:	85 91       	lpm	r24, Z+
    144e:	93 ff       	sbrs	r25, 3
    1450:	81 91       	ld	r24, Z+
    1452:	7f 01       	movw	r14, r30
    1454:	85 32       	cpi	r24, 0x25	; 37
    1456:	21 f4       	brne	.+8      	; 0x1460 <vfprintf+0x52>
    1458:	b6 01       	movw	r22, r12
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 d2       	rcall	.+1028   	; 0x1862 <fputc>
    145e:	e8 cf       	rjmp	.-48     	; 0x1430 <vfprintf+0x22>
    1460:	91 2c       	mov	r9, r1
    1462:	21 2c       	mov	r2, r1
    1464:	31 2c       	mov	r3, r1
    1466:	ff e1       	ldi	r31, 0x1F	; 31
    1468:	f3 15       	cp	r31, r3
    146a:	e0 f0       	brcs	.+56     	; 0x14a4 <vfprintf+0x96>
    146c:	8b 32       	cpi	r24, 0x2B	; 43
    146e:	79 f0       	breq	.+30     	; 0x148e <vfprintf+0x80>
    1470:	38 f4       	brcc	.+14     	; 0x1480 <vfprintf+0x72>
    1472:	80 32       	cpi	r24, 0x20	; 32
    1474:	79 f0       	breq	.+30     	; 0x1494 <vfprintf+0x86>
    1476:	83 32       	cpi	r24, 0x23	; 35
    1478:	a9 f4       	brne	.+42     	; 0x14a4 <vfprintf+0x96>
    147a:	23 2d       	mov	r18, r3
    147c:	20 61       	ori	r18, 0x10	; 16
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <vfprintf+0x92>
    1480:	8d 32       	cpi	r24, 0x2D	; 45
    1482:	59 f0       	breq	.+22     	; 0x149a <vfprintf+0x8c>
    1484:	80 33       	cpi	r24, 0x30	; 48
    1486:	71 f4       	brne	.+28     	; 0x14a4 <vfprintf+0x96>
    1488:	23 2d       	mov	r18, r3
    148a:	21 60       	ori	r18, 0x01	; 1
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <vfprintf+0x92>
    148e:	83 2d       	mov	r24, r3
    1490:	82 60       	ori	r24, 0x02	; 2
    1492:	38 2e       	mov	r3, r24
    1494:	e3 2d       	mov	r30, r3
    1496:	e4 60       	ori	r30, 0x04	; 4
    1498:	22 c0       	rjmp	.+68     	; 0x14de <vfprintf+0xd0>
    149a:	f3 2d       	mov	r31, r3
    149c:	f8 60       	ori	r31, 0x08	; 8
    149e:	25 c0       	rjmp	.+74     	; 0x14ea <vfprintf+0xdc>
    14a0:	32 2e       	mov	r3, r18
    14a2:	27 c0       	rjmp	.+78     	; 0x14f2 <vfprintf+0xe4>
    14a4:	37 fc       	sbrc	r3, 7
    14a6:	2d c0       	rjmp	.+90     	; 0x1502 <vfprintf+0xf4>
    14a8:	20 ed       	ldi	r18, 0xD0	; 208
    14aa:	28 0f       	add	r18, r24
    14ac:	2a 30       	cpi	r18, 0x0A	; 10
    14ae:	88 f4       	brcc	.+34     	; 0x14d2 <vfprintf+0xc4>
    14b0:	36 fe       	sbrs	r3, 6
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <vfprintf+0xb2>
    14b4:	89 2d       	mov	r24, r9
    14b6:	6a e0       	ldi	r22, 0x0A	; 10
    14b8:	70 d2       	rcall	.+1248   	; 0x199a <__mulqi3>
    14ba:	92 2e       	mov	r9, r18
    14bc:	98 0e       	add	r9, r24
    14be:	19 c0       	rjmp	.+50     	; 0x14f2 <vfprintf+0xe4>
    14c0:	82 2d       	mov	r24, r2
    14c2:	6a e0       	ldi	r22, 0x0A	; 10
    14c4:	6a d2       	rcall	.+1236   	; 0x199a <__mulqi3>
    14c6:	22 2e       	mov	r2, r18
    14c8:	28 0e       	add	r2, r24
    14ca:	83 2d       	mov	r24, r3
    14cc:	80 62       	ori	r24, 0x20	; 32
    14ce:	38 2e       	mov	r3, r24
    14d0:	10 c0       	rjmp	.+32     	; 0x14f2 <vfprintf+0xe4>
    14d2:	8e 32       	cpi	r24, 0x2E	; 46
    14d4:	31 f4       	brne	.+12     	; 0x14e2 <vfprintf+0xd4>
    14d6:	36 fc       	sbrc	r3, 6
    14d8:	64 c1       	rjmp	.+712    	; 0x17a2 <vfprintf+0x394>
    14da:	e3 2d       	mov	r30, r3
    14dc:	e0 64       	ori	r30, 0x40	; 64
    14de:	3e 2e       	mov	r3, r30
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <vfprintf+0xe4>
    14e2:	8c 36       	cpi	r24, 0x6C	; 108
    14e4:	21 f4       	brne	.+8      	; 0x14ee <vfprintf+0xe0>
    14e6:	f3 2d       	mov	r31, r3
    14e8:	f0 68       	ori	r31, 0x80	; 128
    14ea:	3f 2e       	mov	r3, r31
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0xe4>
    14ee:	88 36       	cpi	r24, 0x68	; 104
    14f0:	41 f4       	brne	.+16     	; 0x1502 <vfprintf+0xf4>
    14f2:	f7 01       	movw	r30, r14
    14f4:	93 fd       	sbrc	r25, 3
    14f6:	85 91       	lpm	r24, Z+
    14f8:	93 ff       	sbrs	r25, 3
    14fa:	81 91       	ld	r24, Z+
    14fc:	7f 01       	movw	r14, r30
    14fe:	81 11       	cpse	r24, r1
    1500:	b2 cf       	rjmp	.-156    	; 0x1466 <vfprintf+0x58>
    1502:	98 2f       	mov	r25, r24
    1504:	9f 7d       	andi	r25, 0xDF	; 223
    1506:	95 54       	subi	r25, 0x45	; 69
    1508:	93 30       	cpi	r25, 0x03	; 3
    150a:	28 f4       	brcc	.+10     	; 0x1516 <vfprintf+0x108>
    150c:	0c 5f       	subi	r16, 0xFC	; 252
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	2f e3       	ldi	r18, 0x3F	; 63
    1512:	29 83       	std	Y+1, r18	; 0x01
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <vfprintf+0x122>
    1516:	83 36       	cpi	r24, 0x63	; 99
    1518:	31 f0       	breq	.+12     	; 0x1526 <vfprintf+0x118>
    151a:	83 37       	cpi	r24, 0x73	; 115
    151c:	71 f0       	breq	.+28     	; 0x153a <vfprintf+0x12c>
    151e:	83 35       	cpi	r24, 0x53	; 83
    1520:	09 f0       	breq	.+2      	; 0x1524 <vfprintf+0x116>
    1522:	55 c0       	rjmp	.+170    	; 0x15ce <vfprintf+0x1c0>
    1524:	20 c0       	rjmp	.+64     	; 0x1566 <vfprintf+0x158>
    1526:	f8 01       	movw	r30, r16
    1528:	80 81       	ld	r24, Z
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	0e 5f       	subi	r16, 0xFE	; 254
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	88 24       	eor	r8, r8
    1532:	83 94       	inc	r8
    1534:	91 2c       	mov	r9, r1
    1536:	53 01       	movw	r10, r6
    1538:	12 c0       	rjmp	.+36     	; 0x155e <vfprintf+0x150>
    153a:	28 01       	movw	r4, r16
    153c:	f2 e0       	ldi	r31, 0x02	; 2
    153e:	4f 0e       	add	r4, r31
    1540:	51 1c       	adc	r5, r1
    1542:	f8 01       	movw	r30, r16
    1544:	a0 80       	ld	r10, Z
    1546:	b1 80       	ldd	r11, Z+1	; 0x01
    1548:	36 fe       	sbrs	r3, 6
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <vfprintf+0x144>
    154c:	69 2d       	mov	r22, r9
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x148>
    1552:	6f ef       	ldi	r22, 0xFF	; 255
    1554:	7f ef       	ldi	r23, 0xFF	; 255
    1556:	c5 01       	movw	r24, r10
    1558:	3b d1       	rcall	.+630    	; 0x17d0 <strnlen>
    155a:	4c 01       	movw	r8, r24
    155c:	82 01       	movw	r16, r4
    155e:	f3 2d       	mov	r31, r3
    1560:	ff 77       	andi	r31, 0x7F	; 127
    1562:	3f 2e       	mov	r3, r31
    1564:	15 c0       	rjmp	.+42     	; 0x1590 <vfprintf+0x182>
    1566:	28 01       	movw	r4, r16
    1568:	22 e0       	ldi	r18, 0x02	; 2
    156a:	42 0e       	add	r4, r18
    156c:	51 1c       	adc	r5, r1
    156e:	f8 01       	movw	r30, r16
    1570:	a0 80       	ld	r10, Z
    1572:	b1 80       	ldd	r11, Z+1	; 0x01
    1574:	36 fe       	sbrs	r3, 6
    1576:	03 c0       	rjmp	.+6      	; 0x157e <vfprintf+0x170>
    1578:	69 2d       	mov	r22, r9
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <vfprintf+0x174>
    157e:	6f ef       	ldi	r22, 0xFF	; 255
    1580:	7f ef       	ldi	r23, 0xFF	; 255
    1582:	c5 01       	movw	r24, r10
    1584:	1a d1       	rcall	.+564    	; 0x17ba <strnlen_P>
    1586:	4c 01       	movw	r8, r24
    1588:	f3 2d       	mov	r31, r3
    158a:	f0 68       	ori	r31, 0x80	; 128
    158c:	3f 2e       	mov	r3, r31
    158e:	82 01       	movw	r16, r4
    1590:	33 fc       	sbrc	r3, 3
    1592:	19 c0       	rjmp	.+50     	; 0x15c6 <vfprintf+0x1b8>
    1594:	82 2d       	mov	r24, r2
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	88 16       	cp	r8, r24
    159a:	99 06       	cpc	r9, r25
    159c:	a0 f4       	brcc	.+40     	; 0x15c6 <vfprintf+0x1b8>
    159e:	b6 01       	movw	r22, r12
    15a0:	80 e2       	ldi	r24, 0x20	; 32
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	5e d1       	rcall	.+700    	; 0x1862 <fputc>
    15a6:	2a 94       	dec	r2
    15a8:	f5 cf       	rjmp	.-22     	; 0x1594 <vfprintf+0x186>
    15aa:	f5 01       	movw	r30, r10
    15ac:	37 fc       	sbrc	r3, 7
    15ae:	85 91       	lpm	r24, Z+
    15b0:	37 fe       	sbrs	r3, 7
    15b2:	81 91       	ld	r24, Z+
    15b4:	5f 01       	movw	r10, r30
    15b6:	b6 01       	movw	r22, r12
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	53 d1       	rcall	.+678    	; 0x1862 <fputc>
    15bc:	21 10       	cpse	r2, r1
    15be:	2a 94       	dec	r2
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    15c2:	82 1a       	sub	r8, r18
    15c4:	91 08       	sbc	r9, r1
    15c6:	81 14       	cp	r8, r1
    15c8:	91 04       	cpc	r9, r1
    15ca:	79 f7       	brne	.-34     	; 0x15aa <vfprintf+0x19c>
    15cc:	e1 c0       	rjmp	.+450    	; 0x1790 <vfprintf+0x382>
    15ce:	84 36       	cpi	r24, 0x64	; 100
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <vfprintf+0x1c8>
    15d2:	89 36       	cpi	r24, 0x69	; 105
    15d4:	39 f5       	brne	.+78     	; 0x1624 <vfprintf+0x216>
    15d6:	f8 01       	movw	r30, r16
    15d8:	37 fe       	sbrs	r3, 7
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <vfprintf+0x1dc>
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	0c 5f       	subi	r16, 0xFC	; 252
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <vfprintf+0x1ec>
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	07 2e       	mov	r0, r23
    15f0:	00 0c       	add	r0, r0
    15f2:	88 0b       	sbc	r24, r24
    15f4:	99 0b       	sbc	r25, r25
    15f6:	0e 5f       	subi	r16, 0xFE	; 254
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	f3 2d       	mov	r31, r3
    15fc:	ff 76       	andi	r31, 0x6F	; 111
    15fe:	3f 2e       	mov	r3, r31
    1600:	97 ff       	sbrs	r25, 7
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <vfprintf+0x208>
    1604:	90 95       	com	r25
    1606:	80 95       	com	r24
    1608:	70 95       	com	r23
    160a:	61 95       	neg	r22
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	8f 4f       	sbci	r24, 0xFF	; 255
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	f0 68       	ori	r31, 0x80	; 128
    1614:	3f 2e       	mov	r3, r31
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	a3 01       	movw	r20, r6
    161c:	5e d1       	rcall	.+700    	; 0x18da <__ultoa_invert>
    161e:	88 2e       	mov	r8, r24
    1620:	86 18       	sub	r8, r6
    1622:	44 c0       	rjmp	.+136    	; 0x16ac <vfprintf+0x29e>
    1624:	85 37       	cpi	r24, 0x75	; 117
    1626:	31 f4       	brne	.+12     	; 0x1634 <vfprintf+0x226>
    1628:	23 2d       	mov	r18, r3
    162a:	2f 7e       	andi	r18, 0xEF	; 239
    162c:	b2 2e       	mov	r11, r18
    162e:	2a e0       	ldi	r18, 0x0A	; 10
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	25 c0       	rjmp	.+74     	; 0x167e <vfprintf+0x270>
    1634:	93 2d       	mov	r25, r3
    1636:	99 7f       	andi	r25, 0xF9	; 249
    1638:	b9 2e       	mov	r11, r25
    163a:	8f 36       	cpi	r24, 0x6F	; 111
    163c:	c1 f0       	breq	.+48     	; 0x166e <vfprintf+0x260>
    163e:	18 f4       	brcc	.+6      	; 0x1646 <vfprintf+0x238>
    1640:	88 35       	cpi	r24, 0x58	; 88
    1642:	79 f0       	breq	.+30     	; 0x1662 <vfprintf+0x254>
    1644:	ae c0       	rjmp	.+348    	; 0x17a2 <vfprintf+0x394>
    1646:	80 37       	cpi	r24, 0x70	; 112
    1648:	19 f0       	breq	.+6      	; 0x1650 <vfprintf+0x242>
    164a:	88 37       	cpi	r24, 0x78	; 120
    164c:	21 f0       	breq	.+8      	; 0x1656 <vfprintf+0x248>
    164e:	a9 c0       	rjmp	.+338    	; 0x17a2 <vfprintf+0x394>
    1650:	e9 2f       	mov	r30, r25
    1652:	e0 61       	ori	r30, 0x10	; 16
    1654:	be 2e       	mov	r11, r30
    1656:	b4 fe       	sbrs	r11, 4
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <vfprintf+0x266>
    165a:	fb 2d       	mov	r31, r11
    165c:	f4 60       	ori	r31, 0x04	; 4
    165e:	bf 2e       	mov	r11, r31
    1660:	09 c0       	rjmp	.+18     	; 0x1674 <vfprintf+0x266>
    1662:	34 fe       	sbrs	r3, 4
    1664:	0a c0       	rjmp	.+20     	; 0x167a <vfprintf+0x26c>
    1666:	29 2f       	mov	r18, r25
    1668:	26 60       	ori	r18, 0x06	; 6
    166a:	b2 2e       	mov	r11, r18
    166c:	06 c0       	rjmp	.+12     	; 0x167a <vfprintf+0x26c>
    166e:	28 e0       	ldi	r18, 0x08	; 8
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	05 c0       	rjmp	.+10     	; 0x167e <vfprintf+0x270>
    1674:	20 e1       	ldi	r18, 0x10	; 16
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x270>
    167a:	20 e1       	ldi	r18, 0x10	; 16
    167c:	32 e0       	ldi	r19, 0x02	; 2
    167e:	f8 01       	movw	r30, r16
    1680:	b7 fe       	sbrs	r11, 7
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <vfprintf+0x284>
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	0c 5f       	subi	r16, 0xFC	; 252
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0x290>
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 5f       	subi	r16, 0xFE	; 254
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	a3 01       	movw	r20, r6
    16a0:	1c d1       	rcall	.+568    	; 0x18da <__ultoa_invert>
    16a2:	88 2e       	mov	r8, r24
    16a4:	86 18       	sub	r8, r6
    16a6:	fb 2d       	mov	r31, r11
    16a8:	ff 77       	andi	r31, 0x7F	; 127
    16aa:	3f 2e       	mov	r3, r31
    16ac:	36 fe       	sbrs	r3, 6
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <vfprintf+0x2bc>
    16b0:	23 2d       	mov	r18, r3
    16b2:	2e 7f       	andi	r18, 0xFE	; 254
    16b4:	a2 2e       	mov	r10, r18
    16b6:	89 14       	cp	r8, r9
    16b8:	58 f4       	brcc	.+22     	; 0x16d0 <vfprintf+0x2c2>
    16ba:	34 fe       	sbrs	r3, 4
    16bc:	0b c0       	rjmp	.+22     	; 0x16d4 <vfprintf+0x2c6>
    16be:	32 fc       	sbrc	r3, 2
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <vfprintf+0x2c6>
    16c2:	83 2d       	mov	r24, r3
    16c4:	8e 7e       	andi	r24, 0xEE	; 238
    16c6:	a8 2e       	mov	r10, r24
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <vfprintf+0x2c6>
    16ca:	b8 2c       	mov	r11, r8
    16cc:	a3 2c       	mov	r10, r3
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <vfprintf+0x2c8>
    16d0:	b8 2c       	mov	r11, r8
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <vfprintf+0x2c8>
    16d4:	b9 2c       	mov	r11, r9
    16d6:	a4 fe       	sbrs	r10, 4
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <vfprintf+0x2ea>
    16da:	fe 01       	movw	r30, r28
    16dc:	e8 0d       	add	r30, r8
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	80 33       	cpi	r24, 0x30	; 48
    16e4:	21 f4       	brne	.+8      	; 0x16ee <vfprintf+0x2e0>
    16e6:	9a 2d       	mov	r25, r10
    16e8:	99 7e       	andi	r25, 0xE9	; 233
    16ea:	a9 2e       	mov	r10, r25
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x2f2>
    16ee:	a2 fe       	sbrs	r10, 2
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <vfprintf+0x2f0>
    16f2:	b3 94       	inc	r11
    16f4:	b3 94       	inc	r11
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <vfprintf+0x2f2>
    16f8:	8a 2d       	mov	r24, r10
    16fa:	86 78       	andi	r24, 0x86	; 134
    16fc:	09 f0       	breq	.+2      	; 0x1700 <vfprintf+0x2f2>
    16fe:	b3 94       	inc	r11
    1700:	a3 fc       	sbrc	r10, 3
    1702:	10 c0       	rjmp	.+32     	; 0x1724 <vfprintf+0x316>
    1704:	a0 fe       	sbrs	r10, 0
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <vfprintf+0x306>
    1708:	b2 14       	cp	r11, r2
    170a:	80 f4       	brcc	.+32     	; 0x172c <vfprintf+0x31e>
    170c:	28 0c       	add	r2, r8
    170e:	92 2c       	mov	r9, r2
    1710:	9b 18       	sub	r9, r11
    1712:	0d c0       	rjmp	.+26     	; 0x172e <vfprintf+0x320>
    1714:	b2 14       	cp	r11, r2
    1716:	58 f4       	brcc	.+22     	; 0x172e <vfprintf+0x320>
    1718:	b6 01       	movw	r22, r12
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a1 d0       	rcall	.+322    	; 0x1862 <fputc>
    1720:	b3 94       	inc	r11
    1722:	f8 cf       	rjmp	.-16     	; 0x1714 <vfprintf+0x306>
    1724:	b2 14       	cp	r11, r2
    1726:	18 f4       	brcc	.+6      	; 0x172e <vfprintf+0x320>
    1728:	2b 18       	sub	r2, r11
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vfprintf+0x322>
    172c:	98 2c       	mov	r9, r8
    172e:	21 2c       	mov	r2, r1
    1730:	a4 fe       	sbrs	r10, 4
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <vfprintf+0x344>
    1734:	b6 01       	movw	r22, r12
    1736:	80 e3       	ldi	r24, 0x30	; 48
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	93 d0       	rcall	.+294    	; 0x1862 <fputc>
    173c:	a2 fe       	sbrs	r10, 2
    173e:	16 c0       	rjmp	.+44     	; 0x176c <vfprintf+0x35e>
    1740:	a1 fc       	sbrc	r10, 1
    1742:	03 c0       	rjmp	.+6      	; 0x174a <vfprintf+0x33c>
    1744:	88 e7       	ldi	r24, 0x78	; 120
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x340>
    174a:	88 e5       	ldi	r24, 0x58	; 88
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	b6 01       	movw	r22, r12
    1750:	0c c0       	rjmp	.+24     	; 0x176a <vfprintf+0x35c>
    1752:	8a 2d       	mov	r24, r10
    1754:	86 78       	andi	r24, 0x86	; 134
    1756:	51 f0       	breq	.+20     	; 0x176c <vfprintf+0x35e>
    1758:	a1 fe       	sbrs	r10, 1
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x352>
    175c:	8b e2       	ldi	r24, 0x2B	; 43
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <vfprintf+0x354>
    1760:	80 e2       	ldi	r24, 0x20	; 32
    1762:	a7 fc       	sbrc	r10, 7
    1764:	8d e2       	ldi	r24, 0x2D	; 45
    1766:	b6 01       	movw	r22, r12
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	7b d0       	rcall	.+246    	; 0x1862 <fputc>
    176c:	89 14       	cp	r8, r9
    176e:	30 f4       	brcc	.+12     	; 0x177c <vfprintf+0x36e>
    1770:	b6 01       	movw	r22, r12
    1772:	80 e3       	ldi	r24, 0x30	; 48
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	75 d0       	rcall	.+234    	; 0x1862 <fputc>
    1778:	9a 94       	dec	r9
    177a:	f8 cf       	rjmp	.-16     	; 0x176c <vfprintf+0x35e>
    177c:	8a 94       	dec	r8
    177e:	f3 01       	movw	r30, r6
    1780:	e8 0d       	add	r30, r8
    1782:	f1 1d       	adc	r31, r1
    1784:	80 81       	ld	r24, Z
    1786:	b6 01       	movw	r22, r12
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	6b d0       	rcall	.+214    	; 0x1862 <fputc>
    178c:	81 10       	cpse	r8, r1
    178e:	f6 cf       	rjmp	.-20     	; 0x177c <vfprintf+0x36e>
    1790:	22 20       	and	r2, r2
    1792:	09 f4       	brne	.+2      	; 0x1796 <vfprintf+0x388>
    1794:	4d ce       	rjmp	.-870    	; 0x1430 <vfprintf+0x22>
    1796:	b6 01       	movw	r22, r12
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	62 d0       	rcall	.+196    	; 0x1862 <fputc>
    179e:	2a 94       	dec	r2
    17a0:	f7 cf       	rjmp	.-18     	; 0x1790 <vfprintf+0x382>
    17a2:	f6 01       	movw	r30, r12
    17a4:	86 81       	ldd	r24, Z+6	; 0x06
    17a6:	97 81       	ldd	r25, Z+7	; 0x07
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0x3a0>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	2b 96       	adiw	r28, 0x0b	; 11
    17b0:	e2 e1       	ldi	r30, 0x12	; 18
    17b2:	53 c1       	rjmp	.+678    	; 0x1a5a <__epilogue_restores__>

000017b4 <__ctype_isfalse>:
    17b4:	99 27       	eor	r25, r25
    17b6:	88 27       	eor	r24, r24

000017b8 <__ctype_istrue>:
    17b8:	08 95       	ret

000017ba <strnlen_P>:
    17ba:	fc 01       	movw	r30, r24
    17bc:	05 90       	lpm	r0, Z+
    17be:	61 50       	subi	r22, 0x01	; 1
    17c0:	70 40       	sbci	r23, 0x00	; 0
    17c2:	01 10       	cpse	r0, r1
    17c4:	d8 f7       	brcc	.-10     	; 0x17bc <strnlen_P+0x2>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	8e 0f       	add	r24, r30
    17cc:	9f 1f       	adc	r25, r31
    17ce:	08 95       	ret

000017d0 <strnlen>:
    17d0:	fc 01       	movw	r30, r24
    17d2:	61 50       	subi	r22, 0x01	; 1
    17d4:	70 40       	sbci	r23, 0x00	; 0
    17d6:	01 90       	ld	r0, Z+
    17d8:	01 10       	cpse	r0, r1
    17da:	d8 f7       	brcc	.-10     	; 0x17d2 <strnlen+0x2>
    17dc:	80 95       	com	r24
    17de:	90 95       	com	r25
    17e0:	8e 0f       	add	r24, r30
    17e2:	9f 1f       	adc	r25, r31
    17e4:	08 95       	ret

000017e6 <fgetc>:
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	20 ff       	sbrs	r18, 0
    17f0:	33 c0       	rjmp	.+102    	; 0x1858 <fgetc+0x72>
    17f2:	26 ff       	sbrs	r18, 6
    17f4:	0a c0       	rjmp	.+20     	; 0x180a <fgetc+0x24>
    17f6:	2f 7b       	andi	r18, 0xBF	; 191
    17f8:	2b 83       	std	Y+3, r18	; 0x03
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	9f 83       	std	Y+7, r25	; 0x07
    1802:	8e 83       	std	Y+6, r24	; 0x06
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	29 c0       	rjmp	.+82     	; 0x185c <fgetc+0x76>
    180a:	22 ff       	sbrs	r18, 2
    180c:	0f c0       	rjmp	.+30     	; 0x182c <fgetc+0x46>
    180e:	e8 81       	ld	r30, Y
    1810:	f9 81       	ldd	r31, Y+1	; 0x01
    1812:	80 81       	ld	r24, Z
    1814:	08 2e       	mov	r0, r24
    1816:	00 0c       	add	r0, r0
    1818:	99 0b       	sbc	r25, r25
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	19 f4       	brne	.+6      	; 0x1824 <fgetc+0x3e>
    181e:	20 62       	ori	r18, 0x20	; 32
    1820:	2b 83       	std	Y+3, r18	; 0x03
    1822:	1a c0       	rjmp	.+52     	; 0x1858 <fgetc+0x72>
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	f9 83       	std	Y+1, r31	; 0x01
    1828:	e8 83       	st	Y, r30
    182a:	0e c0       	rjmp	.+28     	; 0x1848 <fgetc+0x62>
    182c:	ea 85       	ldd	r30, Y+10	; 0x0a
    182e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1830:	09 95       	icall
    1832:	97 ff       	sbrs	r25, 7
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <fgetc+0x62>
    1836:	2b 81       	ldd	r18, Y+3	; 0x03
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	11 f0       	breq	.+4      	; 0x1840 <fgetc+0x5a>
    183c:	80 e2       	ldi	r24, 0x20	; 32
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <fgetc+0x5c>
    1840:	80 e1       	ldi	r24, 0x10	; 16
    1842:	82 2b       	or	r24, r18
    1844:	8b 83       	std	Y+3, r24	; 0x03
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <fgetc+0x72>
    1848:	2e 81       	ldd	r18, Y+6	; 0x06
    184a:	3f 81       	ldd	r19, Y+7	; 0x07
    184c:	2f 5f       	subi	r18, 0xFF	; 255
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	3f 83       	std	Y+7, r19	; 0x07
    1852:	2e 83       	std	Y+6, r18	; 0x06
    1854:	99 27       	eor	r25, r25
    1856:	02 c0       	rjmp	.+4      	; 0x185c <fgetc+0x76>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <fputc>:
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	fb 01       	movw	r30, r22
    186c:	23 81       	ldd	r18, Z+3	; 0x03
    186e:	21 fd       	sbrc	r18, 1
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <fputc+0x16>
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	2c c0       	rjmp	.+88     	; 0x18d0 <fputc+0x6e>
    1878:	22 ff       	sbrs	r18, 2
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <fputc+0x46>
    187c:	46 81       	ldd	r20, Z+6	; 0x06
    187e:	57 81       	ldd	r21, Z+7	; 0x07
    1880:	24 81       	ldd	r18, Z+4	; 0x04
    1882:	35 81       	ldd	r19, Z+5	; 0x05
    1884:	42 17       	cp	r20, r18
    1886:	53 07       	cpc	r21, r19
    1888:	44 f4       	brge	.+16     	; 0x189a <fputc+0x38>
    188a:	a0 81       	ld	r26, Z
    188c:	b1 81       	ldd	r27, Z+1	; 0x01
    188e:	9d 01       	movw	r18, r26
    1890:	2f 5f       	subi	r18, 0xFF	; 255
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	31 83       	std	Z+1, r19	; 0x01
    1896:	20 83       	st	Z, r18
    1898:	8c 93       	st	X, r24
    189a:	26 81       	ldd	r18, Z+6	; 0x06
    189c:	37 81       	ldd	r19, Z+7	; 0x07
    189e:	2f 5f       	subi	r18, 0xFF	; 255
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	37 83       	std	Z+7, r19	; 0x07
    18a4:	26 83       	std	Z+6, r18	; 0x06
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <fputc+0x6e>
    18a8:	8b 01       	movw	r16, r22
    18aa:	ec 01       	movw	r28, r24
    18ac:	fb 01       	movw	r30, r22
    18ae:	00 84       	ldd	r0, Z+8	; 0x08
    18b0:	f1 85       	ldd	r31, Z+9	; 0x09
    18b2:	e0 2d       	mov	r30, r0
    18b4:	09 95       	icall
    18b6:	89 2b       	or	r24, r25
    18b8:	e1 f6       	brne	.-72     	; 0x1872 <fputc+0x10>
    18ba:	d8 01       	movw	r26, r16
    18bc:	16 96       	adiw	r26, 0x06	; 6
    18be:	8d 91       	ld	r24, X+
    18c0:	9c 91       	ld	r25, X
    18c2:	17 97       	sbiw	r26, 0x07	; 7
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	17 96       	adiw	r26, 0x07	; 7
    18c8:	9c 93       	st	X, r25
    18ca:	8e 93       	st	-X, r24
    18cc:	16 97       	sbiw	r26, 0x06	; 6
    18ce:	ce 01       	movw	r24, r28
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <__ultoa_invert>:
    18da:	fa 01       	movw	r30, r20
    18dc:	aa 27       	eor	r26, r26
    18de:	28 30       	cpi	r18, 0x08	; 8
    18e0:	61 f1       	breq	.+88     	; 0x193a <__ultoa_invert+0x60>
    18e2:	20 31       	cpi	r18, 0x10	; 16
    18e4:	91 f1       	breq	.+100    	; 0x194a <__ultoa_invert+0x70>
    18e6:	e8 94       	clt
    18e8:	6f 93       	push	r22
    18ea:	6e 7f       	andi	r22, 0xFE	; 254
    18ec:	6e 5f       	subi	r22, 0xFE	; 254
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	8f 4f       	sbci	r24, 0xFF	; 255
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	af 4f       	sbci	r26, 0xFF	; 255
    18f6:	b1 e0       	ldi	r27, 0x01	; 1
    18f8:	40 d0       	rcall	.+128    	; 0x197a <__ultoa_invert+0xa0>
    18fa:	b4 e0       	ldi	r27, 0x04	; 4
    18fc:	3e d0       	rcall	.+124    	; 0x197a <__ultoa_invert+0xa0>
    18fe:	67 0f       	add	r22, r23
    1900:	78 1f       	adc	r23, r24
    1902:	89 1f       	adc	r24, r25
    1904:	9a 1f       	adc	r25, r26
    1906:	a1 1d       	adc	r26, r1
    1908:	68 0f       	add	r22, r24
    190a:	79 1f       	adc	r23, r25
    190c:	8a 1f       	adc	r24, r26
    190e:	91 1d       	adc	r25, r1
    1910:	a1 1d       	adc	r26, r1
    1912:	6a 0f       	add	r22, r26
    1914:	71 1d       	adc	r23, r1
    1916:	81 1d       	adc	r24, r1
    1918:	91 1d       	adc	r25, r1
    191a:	a1 1d       	adc	r26, r1
    191c:	22 d0       	rcall	.+68     	; 0x1962 <__ultoa_invert+0x88>
    191e:	09 f4       	brne	.+2      	; 0x1922 <__ultoa_invert+0x48>
    1920:	68 94       	set
    1922:	3f 91       	pop	r19
    1924:	06 2e       	mov	r0, r22
    1926:	00 0c       	add	r0, r0
    1928:	30 19       	sub	r19, r0
    192a:	00 0c       	add	r0, r0
    192c:	00 0c       	add	r0, r0
    192e:	30 19       	sub	r19, r0
    1930:	30 5d       	subi	r19, 0xD0	; 208
    1932:	31 93       	st	Z+, r19
    1934:	ce f6       	brtc	.-78     	; 0x18e8 <__ultoa_invert+0xe>
    1936:	cf 01       	movw	r24, r30
    1938:	08 95       	ret
    193a:	46 2f       	mov	r20, r22
    193c:	47 70       	andi	r20, 0x07	; 7
    193e:	40 5d       	subi	r20, 0xD0	; 208
    1940:	41 93       	st	Z+, r20
    1942:	b3 e0       	ldi	r27, 0x03	; 3
    1944:	0f d0       	rcall	.+30     	; 0x1964 <__ultoa_invert+0x8a>
    1946:	c9 f7       	brne	.-14     	; 0x193a <__ultoa_invert+0x60>
    1948:	f6 cf       	rjmp	.-20     	; 0x1936 <__ultoa_invert+0x5c>
    194a:	46 2f       	mov	r20, r22
    194c:	4f 70       	andi	r20, 0x0F	; 15
    194e:	40 5d       	subi	r20, 0xD0	; 208
    1950:	4a 33       	cpi	r20, 0x3A	; 58
    1952:	18 f0       	brcs	.+6      	; 0x195a <__ultoa_invert+0x80>
    1954:	49 5d       	subi	r20, 0xD9	; 217
    1956:	31 fd       	sbrc	r19, 1
    1958:	40 52       	subi	r20, 0x20	; 32
    195a:	41 93       	st	Z+, r20
    195c:	02 d0       	rcall	.+4      	; 0x1962 <__ultoa_invert+0x88>
    195e:	a9 f7       	brne	.-22     	; 0x194a <__ultoa_invert+0x70>
    1960:	ea cf       	rjmp	.-44     	; 0x1936 <__ultoa_invert+0x5c>
    1962:	b4 e0       	ldi	r27, 0x04	; 4
    1964:	a6 95       	lsr	r26
    1966:	97 95       	ror	r25
    1968:	87 95       	ror	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	ba 95       	dec	r27
    1970:	c9 f7       	brne	.-14     	; 0x1964 <__ultoa_invert+0x8a>
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	61 05       	cpc	r22, r1
    1976:	71 05       	cpc	r23, r1
    1978:	08 95       	ret
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	0a 2e       	mov	r0, r26
    1980:	06 94       	lsr	r0
    1982:	57 95       	ror	r21
    1984:	47 95       	ror	r20
    1986:	37 95       	ror	r19
    1988:	27 95       	ror	r18
    198a:	ba 95       	dec	r27
    198c:	c9 f7       	brne	.-14     	; 0x1980 <__ultoa_invert+0xa6>
    198e:	62 0f       	add	r22, r18
    1990:	73 1f       	adc	r23, r19
    1992:	84 1f       	adc	r24, r20
    1994:	95 1f       	adc	r25, r21
    1996:	a0 1d       	adc	r26, r0
    1998:	08 95       	ret

0000199a <__mulqi3>:
    199a:	00 24       	eor	r0, r0

0000199c <__mulqi3_loop>:
    199c:	80 fd       	sbrc	r24, 0
    199e:	06 0e       	add	r0, r22
    19a0:	66 0f       	add	r22, r22
    19a2:	11 f0       	breq	.+4      	; 0x19a8 <__mulqi3_exit>
    19a4:	86 95       	lsr	r24
    19a6:	d1 f7       	brne	.-12     	; 0x199c <__mulqi3_loop>

000019a8 <__mulqi3_exit>:
    19a8:	80 2d       	mov	r24, r0
    19aa:	08 95       	ret

000019ac <__mulsi3>:
    19ac:	ee 27       	eor	r30, r30
    19ae:	ff 27       	eor	r31, r31

000019b0 <__mulsi3_helper>:
    19b0:	aa 27       	eor	r26, r26
    19b2:	bb 27       	eor	r27, r27
    19b4:	08 c0       	rjmp	.+16     	; 0x19c6 <__mulsi3_helper+0x16>
    19b6:	a2 0f       	add	r26, r18
    19b8:	b3 1f       	adc	r27, r19
    19ba:	e4 1f       	adc	r30, r20
    19bc:	f5 1f       	adc	r31, r21
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	44 1f       	adc	r20, r20
    19c4:	55 1f       	adc	r21, r21
    19c6:	96 95       	lsr	r25
    19c8:	87 95       	ror	r24
    19ca:	77 95       	ror	r23
    19cc:	67 95       	ror	r22
    19ce:	98 f3       	brcs	.-26     	; 0x19b6 <__mulsi3_helper+0x6>
    19d0:	70 40       	sbci	r23, 0x00	; 0
    19d2:	a9 f7       	brne	.-22     	; 0x19be <__mulsi3_helper+0xe>
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	99 f7       	brne	.-26     	; 0x19be <__mulsi3_helper+0xe>
    19d8:	bd 01       	movw	r22, r26
    19da:	cf 01       	movw	r24, r30
    19dc:	08 95       	ret

000019de <__udivmodsi4>:
    19de:	a1 e2       	ldi	r26, 0x21	; 33
    19e0:	1a 2e       	mov	r1, r26
    19e2:	aa 1b       	sub	r26, r26
    19e4:	bb 1b       	sub	r27, r27
    19e6:	fd 01       	movw	r30, r26
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <__udivmodsi4_ep>

000019ea <__udivmodsi4_loop>:
    19ea:	aa 1f       	adc	r26, r26
    19ec:	bb 1f       	adc	r27, r27
    19ee:	ee 1f       	adc	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	a2 17       	cp	r26, r18
    19f4:	b3 07       	cpc	r27, r19
    19f6:	e4 07       	cpc	r30, r20
    19f8:	f5 07       	cpc	r31, r21
    19fa:	20 f0       	brcs	.+8      	; 0x1a04 <__udivmodsi4_ep>
    19fc:	a2 1b       	sub	r26, r18
    19fe:	b3 0b       	sbc	r27, r19
    1a00:	e4 0b       	sbc	r30, r20
    1a02:	f5 0b       	sbc	r31, r21

00001a04 <__udivmodsi4_ep>:
    1a04:	66 1f       	adc	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	1a 94       	dec	r1
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <__udivmodsi4_loop>
    1a10:	60 95       	com	r22
    1a12:	70 95       	com	r23
    1a14:	80 95       	com	r24
    1a16:	90 95       	com	r25
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	bd 01       	movw	r22, r26
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret

00001a22 <__prologue_saves__>:
    1a22:	2f 92       	push	r2
    1a24:	3f 92       	push	r3
    1a26:	4f 92       	push	r4
    1a28:	5f 92       	push	r5
    1a2a:	6f 92       	push	r6
    1a2c:	7f 92       	push	r7
    1a2e:	8f 92       	push	r8
    1a30:	9f 92       	push	r9
    1a32:	af 92       	push	r10
    1a34:	bf 92       	push	r11
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	ca 1b       	sub	r28, r26
    1a4c:	db 0b       	sbc	r29, r27
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	09 94       	ijmp

00001a5a <__epilogue_restores__>:
    1a5a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a5c:	39 88       	ldd	r3, Y+17	; 0x11
    1a5e:	48 88       	ldd	r4, Y+16	; 0x10
    1a60:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a62:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a64:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a66:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a68:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a6c:	b9 84       	ldd	r11, Y+9	; 0x09
    1a6e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a70:	df 80       	ldd	r13, Y+7	; 0x07
    1a72:	ee 80       	ldd	r14, Y+6	; 0x06
    1a74:	fd 80       	ldd	r15, Y+5	; 0x05
    1a76:	0c 81       	ldd	r16, Y+4	; 0x04
    1a78:	1b 81       	ldd	r17, Y+3	; 0x03
    1a7a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a7c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a7e:	ce 0f       	add	r28, r30
    1a80:	d1 1d       	adc	r29, r1
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	ed 01       	movw	r28, r26
    1a8e:	08 95       	ret

00001a90 <_exit>:
    1a90:	f8 94       	cli

00001a92 <__stop_program>:
    1a92:	ff cf       	rjmp	.-2      	; 0x1a92 <__stop_program>
